(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1566428,      29009]
NotebookOptionsPosition[   1544827,      28669]
NotebookOutlinePosition[   1545219,      28686]
CellTagsIndexPosition[   1545176,      28683]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Classifying NK Networks.", "Title",
 CellChangeTimes->{{3.7632178085713577`*^9, 
  3.7632178256511154`*^9}},ExpressionUUID->"1810843b-c7e4-4e97-a98d-\
1ceb6deca9e6"],

Cell[TextData[{
 "An NK network is a boolean network where n specify the number of nodes or \
vertexes and k is the number of incoming connections that each vertex has. \
According to Kauffman, the parameter K defines the stability (or lack of \
thereof) of the network, where k = 2 is a ",
 StyleBox["critical point ",
  FontWeight->"Bold"],
 "that approximates the properties of gene regulatory networks. Bellow that \
(k=1) we have too much regularity (",
 StyleBox["frozen state",
  FontSlant->"Italic"],
 ") and beyond it (K>=3) we have ",
 StyleBox["chaos",
  FontSlant->"Italic"],
 ".",
 StyleBox[" ",
  FontWeight->"Bold"]
}], "Text",
 CellChangeTimes->{{3.763414043448762*^9, 3.763414110976862*^9}, {
  3.7634141438099594`*^9, 3.7634141754407387`*^9}, {3.7634142717366743`*^9, 
  3.7634143134556856`*^9}, {3.7634144031367407`*^9, 3.763414463680584*^9}, {
  3.7634148283874397`*^9, 
  3.763414841040329*^9}},ExpressionUUID->"42582dfc-ed31-45cb-a9ff-\
afe371e402d4"],

Cell[CellGroupData[{

Cell["The Problem", "Chapter",
 CellChangeTimes->{{3.7634144802143993`*^9, 
  3.7634144863517323`*^9}},ExpressionUUID->"aaff250b-1a38-431e-8370-\
cf45fc234b6c"],

Cell[TextData[{
 "The classification problem to solve is, can we find out whenever the \
evolution of an NK network correspond to k=1 (",
 StyleBox["frozen",
  FontSlant->"Italic"],
 "), k = 2 (",
 StyleBox["criticality",
  FontSlant->"Italic"],
 ") and k=3 (",
 StyleBox["chaos",
  FontSlant->"Italic"],
 ")?"
}], "Text",
 CellChangeTimes->{{3.763414488880718*^9, 3.7634145131054907`*^9}, {
  3.76341473942422*^9, 3.76341478611204*^9}, {3.7634148465320745`*^9, 
  3.7634148671518917`*^9}},ExpressionUUID->"f3b8714d-6424-4408-b154-\
9d87c9e57fc6"],

Cell[CellGroupData[{

Cell["Legacy Functions", "Subsubsection",
 CellChangeTimes->{{3.763222058593745*^9, 
  3.763222067985651*^9}},ExpressionUUID->"96c302f3-f610-4e7e-93e8-\
bf14e015e477"],

Cell[BoxData[
 RowBox[{
  RowBox[{"toBinaryInt", "[", 
   RowBox[{"n_", ",", "bits_"}], "]"}], ":=", 
  RowBox[{"IntegerDigits", "[", 
   RowBox[{"n", ",", "2", ",", "bits"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.763222116267547*^9, 3.7632221182108345`*^9}, 
   3.763222231562704*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"cad08083-9ef3-41d1-9277-1dfcef64e2ab"],

Cell["\<\
The following code contains snips from and code inspired by \
https://demonstrations.wolfram.com/BooleanNKNetworks/\
\>", "Text",
 CellChangeTimes->{{3.7632178446754875`*^9, 3.7632178632705097`*^9}, {
  3.763219795585736*^9, 
  3.7632198152898083`*^9}},ExpressionUUID->"8709bfe6-9a66-4cd8-be29-\
624308a90f43"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ConnectivityMatrix", "[", 
   RowBox[{"n_", ",", "k_"}], "]"}], ":=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomSample", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{"Prepend", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{"0", ",", 
          RowBox[{"{", 
           RowBox[{"n", "-", "k"}], "}"}]}], "]"}], ",", 
        RowBox[{"Table", "[", 
         RowBox[{"1", ",", 
          RowBox[{"{", "k", "}"}]}], "]"}]}], "]"}], "]"}], "]"}], ",", 
    RowBox[{"{", "n", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7632182481582346`*^9, 3.7632182514783287`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"00220d97-7608-4384-8385-b0cf22d1dcf0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"InitialStates", "[", "n_", "]"}], ":=", 
  RowBox[{"RandomInteger", "[", 
   RowBox[{"1", ",", "n"}], "]"}]}]], "Input",
 CellChangeTimes->{3.76321827663545*^9},
 CellLabel->"In[3]:=",ExpressionUUID->"6aea2156-383c-44da-828f-c34097d07f4f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"PositionsMatrix", "[", "conM_", "]"}], ":=", 
   RowBox[{"Map", "[", 
    RowBox[{"Flatten", ",", 
     RowBox[{
      RowBox[{
       RowBox[{"Position", "[", 
        RowBox[{"#", ",", "1"}], "]"}], "&"}], "/@", "conM"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.763220628284315*^9, 3.7632206497554417`*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"218b7cda-8afa-4a40-aac5-0b07304b853b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Rules", "Subchapter",
 CellChangeTimes->{{3.7632183122178335`*^9, 
  3.763218317892355*^9}},ExpressionUUID->"818a5e5b-73fd-4b33-b61b-\
8961753748df"],

Cell["\<\
The following functions randomly generates boolean rules of degree K.\
\>", "Text",
 CellChangeTimes->{{3.7634148736064777`*^9, 
  3.763414890519956*^9}},ExpressionUUID->"1b758921-8c9d-4fbb-bac4-\
6a41fc5bd80a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"randomRule", "[", "k_", "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"With", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"outputs", " ", "=", 
        RowBox[{"RandomChoice", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}], ",", 
          RowBox[{"2", "^", "k"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"inputs", " ", "=", " ", 
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"toBinaryInt", "[", 
             RowBox[{"#", ",", "k"}], "]"}], "&"}], "/@", 
           RowBox[{"Range", "[", 
            RowBox[{"2", "^", 
             RowBox[{"{", "k", "}"}]}], "]"}]}], ",", "1"}], "]"}]}]}], 
      "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"AssociationThread", "[", 
      RowBox[{"inputs", "\[Rule]", " ", "outputs"}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.763224213405613*^9, 3.7632245054840174`*^9}, {
  3.763224563034658*^9, 3.763224592122776*^9}, {3.7632246378201475`*^9, 
  3.763224685465893*^9}, {3.763224731573682*^9, 3.7632247664126325`*^9}, {
  3.7632248019100494`*^9, 3.7632248437667274`*^9}, {3.7632248956131983`*^9, 
  3.7632249122186594`*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"630cba2c-f310-49b2-b364-69c16e0c1452"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"randomRule", "[", "3", "]"}]], "Input",
 CellChangeTimes->{{3.7632244931062117`*^9, 3.763224496978163*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"5b9a01c8-aae9-4782-9719-61b3feb7ac05"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "1"}], "}"}], "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "0"}], "}"}], "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "1"}], "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "0"}], "}"}], "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "1"}], "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "0"}], "}"}], "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "1"}], "}"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0"}], "}"}], "\[Rule]", "1"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.763224497628791*^9, 3.763224687453727*^9, {3.763224746361883*^9, 
   3.76322477419489*^9}, {3.7632248378418546`*^9, 3.763224845886696*^9}, {
   3.7632249146175785`*^9, 3.7632249285910683`*^9}, 3.763243798768117*^9, 
   3.763244707110121*^9, 3.763246146749777*^9, 3.7633983438739204`*^9, 
   3.763402503516822*^9, 3.7634074633025*^9, 3.763408227407462*^9, 
   3.765051126103225*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"283ef520-8491-4c0e-ab8c-438de8f41edf"]
}, Open  ]],

Cell["Function that generates a random NK network topology.", "Text",
 CellChangeTimes->{{3.7632240400934644`*^9, 3.7632240724502897`*^9}, {
  3.763225201065053*^9, 
  3.7632252053371677`*^9}},ExpressionUUID->"3add9883-94b9-4a9e-93ac-\
722f6c3ea693"],

Cell[BoxData[
 RowBox[{
  RowBox[{"randomNetwork", "[", 
   RowBox[{"n_", ",", "k_"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"With", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"rules", " ", "=", " ", 
       RowBox[{"RandomChoice", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"randomRule", "[", "k", "]"}], "&"}], "/@", 
          RowBox[{"Range", "[", "n", "]"}]}], "\[IndentingNewLine]", ",", 
         "n"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"connections", " ", "=", " ", 
       RowBox[{"PositionsMatrix", "[", 
        RowBox[{"ConnectivityMatrix", "[", 
         RowBox[{"n", ",", "k"}], "]"}], "]"}]}]}], "\[IndentingNewLine]", 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Association", "[", "\[IndentingNewLine]", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\"\<Connections\>\"", "->", "connections"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Rules\>\"", "\[Rule]", " ", "rules"}]}], 
      "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7632252158900194`*^9, 3.7632253681776686`*^9}, {
  3.7632255694963603`*^9, 3.763225576051359*^9}, {3.763225615861402*^9, 
  3.7632257347938585`*^9}, {3.7632257997939825`*^9, 3.7632258663063755`*^9}, {
  3.763225900470376*^9, 3.7632259771241055`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"413dae10-d401-4621-b246-83d2d84cead7"],

Cell["For example:", "Text",
 CellChangeTimes->{{3.7632265516246843`*^9, 
  3.763226554937111*^9}},ExpressionUUID->"45c42295-9988-4567-9a35-\
a51c048c0c91"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"randomNetwork", "[", 
  RowBox[{"10", ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.763225543505746*^9, 3.7632255452443523`*^9}, {
  3.763225582118498*^9, 3.763225588241562*^9}, {3.7632258749331927`*^9, 
  3.7632258765618153`*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"596cc544-f382-4ed5-b72c-a5978c820dab"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Connections\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "5"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "7"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "9"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"6", ",", "9"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "9"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"3", ",", "6"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"5", ",", "9"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"8", ",", "9"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4", ",", "7"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"\<\"Rules\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], "\[Rule]", "0"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], "\[Rule]", "0"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", "1"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], "\[Rule]", "0"}]}], 
       "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], "\[Rule]", "1"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], "\[Rule]", "0"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", "1"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], "\[Rule]", "0"}]}], 
       "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], "\[Rule]", "1"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], "\[Rule]", "1"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", "0"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], "\[Rule]", "1"}]}], 
       "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], "\[Rule]", "1"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], "\[Rule]", "1"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", "0"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], "\[Rule]", "0"}]}], 
       "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], "\[Rule]", "1"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], "\[Rule]", "1"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", "0"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], "\[Rule]", "1"}]}], 
       "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], "\[Rule]", "1"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], "\[Rule]", "1"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", "0"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], "\[Rule]", "0"}]}], 
       "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], "\[Rule]", "1"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], "\[Rule]", "1"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", "0"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], "\[Rule]", "1"}]}], 
       "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], "\[Rule]", "1"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], "\[Rule]", "0"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", "1"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], "\[Rule]", "1"}]}], 
       "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], "\[Rule]", "1"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], "\[Rule]", "0"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", "1"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], "\[Rule]", "0"}]}], 
       "\[RightAssociation]"}], ",", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], "\[Rule]", "1"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], "\[Rule]", "1"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", "0"}], ",", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], "\[Rule]", "1"}]}], 
       "\[RightAssociation]"}]}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.763225545914602*^9, {3.7632255887262845`*^9, 3.7632256214622946`*^9}, {
   3.7632257002404237`*^9, 3.7632257099829283`*^9}, {3.7632258470245113`*^9, 
   3.763225877105145*^9}, 3.763225978904974*^9, 3.7632437988090954`*^9, 
   3.7632447072140613`*^9, 3.7632461468507166`*^9, 3.7633983439658685`*^9, 
   3.7634025035827837`*^9, 3.763407463351472*^9, 3.7634082274554353`*^9, 
   3.765051126172623*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"516d7764-9d07-4c9c-8815-49fa37307ac6"]
}, Open  ]],

Cell[TextData[{
 "Given a ",
 StyleBox["network topology, ",
  FontSlant->"Italic"],
 "the following function evolves a vector of ",
 StyleBox["n ",
  FontWeight->"Bold"],
 "vectors."
}], "Text",
 CellChangeTimes->{{3.7632272880343046`*^9, 3.7632273333443623`*^9}, {
  3.7632273751766653`*^9, 
  3.7632274360332327`*^9}},ExpressionUUID->"eafcd623-51a2-49a1-81b9-\
86d7b6352d98"],

Cell[BoxData[
 RowBox[{"Remove", "[", "evolve", "]"}]], "Input",
 CellChangeTimes->{{3.763228353161296*^9, 3.763228358052139*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"0535e1bd-ec30-4af0-9163-8f6eef135fab"],

Cell[BoxData[
 RowBox[{
  RowBox[{"evolve", "[", 
   RowBox[{"state_", ",", " ", "topo_"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Table", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"With", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"inputs", " ", "=", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"topo", "[", "\"\<Connections\>\"", "]"}], ")"}], "[", 
          RowBox[{"[", "i", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"trans", " ", "=", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"topo", "[", "\"\<Rules\>\"", "]"}], ")"}], "[", 
          RowBox[{"[", "i", "]"}], "]"}]}]}], "\[IndentingNewLine]", "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"trans", "[", 
       RowBox[{"state", "[", 
        RowBox[{"[", "inputs", "]"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
     "]"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", 
      RowBox[{"Length", "@", "state"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7632274512452035`*^9, 3.7632275005244603`*^9}, {
  3.763227721166306*^9, 3.7632277285003386`*^9}, {3.7632277587712274`*^9, 
  3.7632278598773637`*^9}, {3.76322801905457*^9, 3.763228025034389*^9}, {
  3.763228094629321*^9, 3.7632281068504796`*^9}, {3.76322814746141*^9, 
  3.7632281764911833`*^9}, {3.7632282379330573`*^9, 3.7632282442369533`*^9}, {
  3.7632282792841635`*^9, 3.763228285825982*^9}, {3.763228342671013*^9, 
  3.763228362922027*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"f14cfaa0-374d-4226-b8ef-378b6502d902"],

Cell["For example:", "Text",
 CellChangeTimes->{{3.763228307338244*^9, 
  3.7632283104558315`*^9}},ExpressionUUID->"1d1341d7-6ab8-4819-962c-\
12c0bddbcbd9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", " ", "=", " ", 
   RowBox[{"randomNetwork", "[", 
    RowBox[{"10", ",", "2"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7632278719135065`*^9, 3.7632278807843347`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"188a0980-a814-4cf2-9e37-20ce6b835795"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"evolve", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1",
      ",", "0", ",", "1"}], "}"}], ",", "net"}], "]"}]], "Input",
 CellChangeTimes->{{3.763227916713297*^9, 3.763227979257223*^9}, {
  3.7632280297642717`*^9, 3.763228043578638*^9}, {3.763228368693554*^9, 
  3.7632283689773912`*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"aa97f2c0-a25b-4624-bc66-8fbf48d53bd2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", 
   ",", "0", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{{3.7632279392829885`*^9, 3.763227979958434*^9}, 
   3.763228110227417*^9, {3.7632281537151146`*^9, 3.763228179024359*^9}, 
   3.763228258840024*^9, 3.763228289656142*^9, 3.763228372484191*^9, 
   3.7632437988650637`*^9, 3.763244707409977*^9, 3.763246146994167*^9, 
   3.7633983441417675`*^9, 3.76340250365446*^9, 3.7634074634144363`*^9, 
   3.763408227520397*^9, 3.7650511262535753`*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"be2a11db-9b0e-41bf-a62d-a0c8b22d9673"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"v", " ", "=", " ", 
  RowBox[{"ConstantArray", "[", 
   RowBox[{"0", ",", "10"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7632286406654406`*^9, 3.763228655065387*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"7700ff26-227e-45d2-bce7-58f9ac1c1b67"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{3.7632286557400007`*^9, 3.7632437988870497`*^9, 
  3.763244707467951*^9, 3.763246147031147*^9, 3.7633983441817455`*^9, 
  3.7634025036744475`*^9, 3.7634074634354234`*^9, 3.7634082275383883`*^9, 
  3.7650511262935543`*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"eb963f2a-237f-4a2f-8e0a-689f9423edd8"]
}, Open  ]],

Cell["An evolution of the system for 10 steps is:", "Text",
 CellChangeTimes->{{3.7632287887118807`*^9, 
  3.763228797072387*^9}},ExpressionUUID->"1690238c-0e73-4b73-b901-\
7a7252dbf5b8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"NestList", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"evolve", "[", 
      RowBox[{"#", ",", "net"}], "]"}], "&"}], ",", "v", ",", "10"}], "]"}], 
  " "}]], "Input",
 CellChangeTimes->{{3.76322853530436*^9, 3.7632285376010427`*^9}, {
  3.763228600537142*^9, 3.7632286322408333`*^9}, {3.7632286859058933`*^9, 
  3.7632287154537077`*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"fc54105f-971b-4cb4-8bf1-271949234436"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1",
      ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1",
      ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1",
      ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1",
      ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0",
      ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1",
      ",", "0", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.763228716346773*^9, 3.763243798910036*^9, 
  3.7632447075249195`*^9, 3.7632461470901136`*^9, 3.7633983442237206`*^9, 
  3.763402503700433*^9, 3.763407463464407*^9, 3.7634082275633745`*^9, 
  3.7650511263265347`*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"cf3d582f-8c98-416f-8123-015a5e3030c4"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["The Data Sets", "Chapter",
 CellChangeTimes->{{3.7632386371095695`*^9, 
  3.7632386407527747`*^9}},ExpressionUUID->"f62351f9-2597-4dc3-9697-\
b8ad8aecb689"],

Cell["\<\
The data sets consists of the evolution up time t=10 of 24 vertex nk-Boolean \
networks for each category of k=1,2,3.\
\>", "Text",
 CellChangeTimes->{{3.7632386651814175`*^9, 3.7632386959175124`*^9}, {
  3.763414902327711*^9, 
  3.7634149693600817`*^9}},ExpressionUUID->"3e8996e9-bcd1-4900-8dd5-\
e62d506ec76d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"n", "=", " ", "24"}]], "Input",
 CellChangeTimes->{{3.7632387149032907`*^9, 3.763238745342331*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"b03f6b8f-512b-4629-838f-668bdf9e4ee5"],

Cell[BoxData["24"], "Output",
 CellChangeTimes->{3.763238745972971*^9, 3.7632437989230285`*^9, 
  3.7632447075749407`*^9, 3.7632461471340876`*^9, 3.7633983442686977`*^9, 
  3.7634025037194223`*^9, 3.7634074634813976`*^9, 3.7634082275823636`*^9, 
  3.765051126360515*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"87feac7e-389f-49d2-9a5b-48372d90314b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"start", " ", "=", " ", 
  RowBox[{"ConstantArray", "[", 
   RowBox[{"0", ",", "n"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7632386981653967`*^9, 3.7632387419187713`*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"36a8140b-71fa-4c75-b8ad-304d5fccaf2b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{3.7632387485550785`*^9, 3.763243798949013*^9, 
  3.763244707627912*^9, 3.7632461471700654`*^9, 3.763398344308672*^9, 
  3.763402503745407*^9, 3.763407463500386*^9, 3.763408227606351*^9, 
  3.76505112833788*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"e58a115d-20af-4272-b8f4-c7b3f8ef5207"]
}, Open  ]],

Cell[TextData[{
 "According to Kaufman, k=2 represents a critical point, where the network \
becomes ",
 StyleBox["interesting. ",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.763238768510007*^9, 3.7632388260371637`*^9}, {
   3.7632392241512403`*^9, 3.7632392348380985`*^9}, {3.763239276757914*^9, 
   3.7632393254085884`*^9}, 
   3.763414981921138*^9},ExpressionUUID->"6d325d80-2e0d-4475-a4a3-\
73cc24641770"],

Cell["Let\[CloseCurlyQuote]s see how is the evolution of the network.", "Text",
 CellChangeTimes->{{3.763239453198896*^9, 
  3.7632394692659225`*^9}},ExpressionUUID->"d3fc4c60-4cd9-42e2-9c73-\
f46f5800ca75"],

Cell[BoxData[
 RowBox[{
  RowBox[{"size", " ", "=", " ", "100"}], ";"}]], "Input",
 CellChangeTimes->{{3.763239657503069*^9, 3.763239662854513*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"d1817d37-d299-4bc0-a6fb-fd0f85f12c82"],

Cell[BoxData[{
 RowBox[{"SeedRandom", "[", "02042019", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"s1", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"evolve", "[", 
      RowBox[{"start", ",", 
       RowBox[{"randomNetwork", "[", 
        RowBox[{"n", ",", "1"}], "]"}]}], "]"}], "&"}], "/@", 
    RowBox[{"Range", "[", "size", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"s2", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"evolve", "[", 
      RowBox[{"start", ",", 
       RowBox[{"randomNetwork", "[", 
        RowBox[{"n", ",", "2"}], "]"}]}], "]"}], "&"}], "/@", 
    RowBox[{"Range", "[", "size", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"s3", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"evolve", "[", 
      RowBox[{"start", ",", 
       RowBox[{"randomNetwork", "[", 
        RowBox[{"n", ",", "3"}], "]"}]}], "]"}], "&"}], "/@", 
    RowBox[{"Range", "[", "size", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"s4", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"evolve", "[", 
      RowBox[{"start", ",", 
       RowBox[{"randomNetwork", "[", 
        RowBox[{"n", ",", "4"}], "]"}]}], "]"}], "&"}], "/@", 
    RowBox[{"Range", "[", "size", "]"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.7632394945421557`*^9, 3.763239515431197*^9}, 
   3.763239586662753*^9, {3.7632396329142275`*^9, 3.7632398020787354`*^9}, {
   3.763398004816039*^9, 3.7633980123427315`*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"fce6c3bb-71ad-476a-a55f-86e3f802d769"],

Cell["Let\[CloseCurlyQuote]s see if there\[CloseCurlyQuote]s any BDM \
regularity.", "Text",
 CellChangeTimes->{{3.7632399095262575`*^9, 
  3.763239920294276*^9}},ExpressionUUID->"4d04b52e-9bf3-46a3-8747-\
0427440aca24"],

Cell[CellGroupData[{

Cell["String BDM.", "Section",
 CellChangeTimes->{{3.7416255539380045`*^9, 
  3.7416255620340085`*^9}},ExpressionUUID->"3969c6d4-824a-461e-b86d-\
962bf5ec92a4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.741625565281389*^9, 3.741625571305856*^9}, 
   3.7626206803057213`*^9},
 CellLabel->"In[23]:=",ExpressionUUID->"18313940-5afe-4143-a063-80206582bac5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"D5", " ", "=", " ", 
   RowBox[{"<<", "\"\<D5.m\>\""}]}], ";"}]], "Input",
 CellChangeTimes->{{3.576316991168059*^9, 3.576317006002987*^9}, {
   3.576317054243099*^9, 3.576317054368575*^9}, {3.594127414279915*^9, 
   3.594127423422022*^9}, {3.7311809642602*^9, 3.7311810217742987`*^9}, 
   3.7416255788573837`*^9},
 CellLabel->"In[24]:=",ExpressionUUID->"bdf87686-f654-432a-933c-a34697a6eac2"],

Cell["Adding missing strings:", "Text",
 CellChangeTimes->{{3.731181243030327*^9, 
  3.7311812481194773`*^9}},ExpressionUUID->"350ec4b2-c73e-4897-816d-\
c5f6b2a41e18"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"D5", "=", 
   RowBox[{"Flatten", "/@", 
    RowBox[{"Append", "[", 
     RowBox[{"D5", ",", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"\"\<000110100111\>\"", ",", 
         RowBox[{"(", "5.21946101832149`*^-12", ")"}]}], "}"}], "}"}]}], 
     "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"D5", "=", 
   RowBox[{"Flatten", "/@", 
    RowBox[{"Append", "[", 
     RowBox[{"D5", ",", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"\"\<111001011000\>\"", ",", 
         RowBox[{"(", "5.21946101832149`*^-12", ")"}]}], "}"}], "}"}]}], 
     "]"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.731181159121903*^9, 3.731181164193017*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"919b8455-6d92-44df-a327-abe55ed779cd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"HashStrings", "[", 
      RowBox[{"D5", "[", 
       RowBox[{"[", 
        RowBox[{"i", ",", "1"}], "]"}], "]"}], "]"}], " ", "=", " ", 
     RowBox[{"-", 
      RowBox[{"Log", "[", 
       RowBox[{"2", ",", 
        RowBox[{"D5", "[", 
         RowBox[{"[", 
          RowBox[{"i", ",", "2"}], "]"}], "]"}]}], "]"}]}]}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", 
      RowBox[{"Length", "@", "D5"}]}], "}"}]}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.576317011991968*^9, 3.57631708827692*^9}, {
  3.576343504058402*^9, 3.576343504139472*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"320485cf-478a-49d3-b08e-049e0802f422"],

Cell[BoxData[
 RowBox[{
  RowBox[{"StringBDM", "[", 
   RowBox[{"string_", ",", 
    RowBox[{"len_:", "1"}]}], "]"}], ":=", " ", "\[IndentingNewLine]", 
  RowBox[{"N", "@", 
   RowBox[{"Total", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"HashStrings", "[", 
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}], "+", 
       RowBox[{"Log", "[", 
        RowBox[{"2", ",", 
         RowBox[{"#", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "&"}], "/@", 
     RowBox[{"Tally", "[", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"TrueQ", "[", 
         RowBox[{
          RowBox[{"StringLength", "[", "string", "]"}], ">", "12"}], "]"}], 
        ",", 
        RowBox[{"StringPartition", "[", 
         RowBox[{"string", ",", "12", ",", "len"}], "]"}], ",", 
        RowBox[{"{", "string", "}"}]}], "]"}], "]"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{3.759767772514639*^9},
 CellLabel->"In[28]:=",ExpressionUUID->"770fb098-f874-4f2f-9ea7-3772d1ef4379"],

Cell[TextData[{
 StyleBox["Modified",
  FontWeight->"Bold"],
 " version of String Entropy to be able to setup partition sizes."
}], "Text",
 CellChangeTimes->{{3.759528710392538*^9, 
  3.75952872905687*^9}},ExpressionUUID->"ea62fc7d-3b23-4a13-a1b7-\
c6f80a7c34cb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"StringBDMS", "[", 
   RowBox[{"string_", ",", 
    RowBox[{"len_:", "1"}], ",", " ", 
    RowBox[{"dis_:", "1"}]}], "]"}], ":=", " ", "\[IndentingNewLine]", 
  RowBox[{"N", "@", 
   RowBox[{"Total", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"HashStrings", "[", 
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}], "+", 
       RowBox[{"Log", "[", 
        RowBox[{"2", ",", 
         RowBox[{"#", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "&"}], "/@", 
     RowBox[{"Tally", "[", "\[IndentingNewLine]", 
      RowBox[{"StringPartition", "[", 
       RowBox[{"string", ",", "len", ",", "dis"}], "]"}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}]}]], "Input",
 CellChangeTimes->{
  3.73118093049841*^9, 3.731181185599428*^9, {3.7595281416381254`*^9, 
   3.759528163365651*^9}, {3.7595283709253645`*^9, 3.7595283719227934`*^9}, {
   3.7595284154663305`*^9, 3.7595284388757668`*^9}, {3.7595285699096503`*^9, 
   3.7595286251462355`*^9}, {3.7595286969959044`*^9, 3.759528701722829*^9}, {
   3.759588375840043*^9, 3.759588378173185*^9}, {3.7595885974060845`*^9, 
   3.759588623877392*^9}, {3.75958867176542*^9, 3.759588673653105*^9}, 
   3.7595887711856174`*^9},
 CellLabel->"In[29]:=",ExpressionUUID->"fa5e7204-cff2-47bc-a570-b5608b3bf163"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BinaryBDM", "[", 
   RowBox[{"input_", ",", 
    RowBox[{"len_:", "1"}]}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"With", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"str", " ", "=", " ", 
      RowBox[{"StringJoin", "[", 
       RowBox[{"ToString", "/@", "input"}], "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"StringBDM", "[", 
     RowBox[{"str", ",", "len"}], "]"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7632401938066225`*^9, 3.763240283510825*^9}, {
  3.763240313869503*^9, 3.7632403546145477`*^9}, {3.763240386930414*^9, 
  3.763240387870516*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"ac7147a1-bb02-47d6-b886-947a783f05c3"]
}, Open  ]],

Cell[CellGroupData[{

Cell["The Sets:", "Section",
 CellChangeTimes->{{3.763240948076795*^9, 3.7632409517329454`*^9}, {
  3.76341499716741*^9, 
  3.7634150052957945`*^9}},ExpressionUUID->"971a1988-0476-4e05-b1c0-\
71a2def90378"],

Cell["We will include the evolution of a network up to 10 times.", "Text",
 CellChangeTimes->{{3.7632409538609724`*^9, 3.763240959037201*^9}, {
  3.7632410460133667`*^9, 3.7632410810379143`*^9}, {3.763415007384182*^9, 
  3.7634150175909843`*^9}},ExpressionUUID->"77c94592-9cda-42e2-baa3-\
d094f70e9ef1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"flattenEvo", "[", " ", 
   RowBox[{"str_", ",", "net_", ",", "t_"}], "]"}], ":=", " ", 
  RowBox[{"Flatten", "@", 
   RowBox[{"Rest", "@", 
    RowBox[{"NestList", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"evolve", "[", 
        RowBox[{"#", ",", "net"}], "]"}], "&"}], ",", "str", ",", "t"}], 
     "]"}], " "}]}]}]], "Input",
 CellChangeTimes->{{3.7632410868099823`*^9, 3.76324115426235*^9}, {
  3.763241318609467*^9, 3.7632413211373076`*^9}, {3.7632420483717003`*^9, 
  3.7632420539426785`*^9}, {3.76324463785106*^9, 3.7632446438537436`*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"b6e2df2d-a0a3-41ce-8701-19ff6bb0d607"],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", " ", "=", " ", 
   RowBox[{"randomNetwork", "[", 
    RowBox[{"24", ",", "2"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7632412716400146`*^9, 3.7632412767023478`*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"730aba62-b7bf-470d-a8d0-1975859cc882"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BinaryBDM", "@", 
  RowBox[{"RandomChoice", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], ",", 
    RowBox[{"n", "*", "10"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.763241365246193*^9, 3.763241426512992*^9}, 
   3.7632416217852645`*^9},
 CellLabel->"In[38]:=",ExpressionUUID->"dee3e9c5-390b-4053-86fc-4cabb6a46bce"],

Cell[BoxData["7093.271455408565`"], "Output",
 CellChangeTimes->{{3.763241411332053*^9, 3.7632414271716127`*^9}, {
   3.763241622972374*^9, 3.763241645099786*^9}, 3.763243805523556*^9, 
   3.7632446526249557`*^9, 3.7632447103934984`*^9, 3.7632461491145244`*^9, 
   3.7633983463321204`*^9, 3.7634025058678927`*^9, 3.763407465807787*^9, 
   3.763408229860773*^9, 3.765051130955562*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"e4779a7b-dc41-4cea-9caa-6621ace947ba"]
}, Open  ]],

Cell["Let\[CloseCurlyQuote]s see the expected values for these sets.", "Text",
 CellChangeTimes->{{3.763241684637662*^9, 
  3.7632417019652247`*^9}},ExpressionUUID->"fc429efb-1c6d-4022-b5a5-\
558630542189"],

Cell[BoxData[{
 RowBox[{"SeedRandom", "[", "02042019", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"s1", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"flattenEvo", "[", 
      RowBox[{"start", ",", 
       RowBox[{"randomNetwork", "[", 
        RowBox[{"n", ",", "1"}], "]"}], ",", "10"}], "]"}], "&"}], "/@", 
    RowBox[{"Range", "[", "size", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"s2", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"flattenEvo", "[", 
      RowBox[{"start", ",", 
       RowBox[{"randomNetwork", "[", 
        RowBox[{"n", ",", "2"}], "]"}], ",", "10"}], "]"}], "&"}], "/@", 
    RowBox[{"Range", "[", "size", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"s3", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"flattenEvo", "[", 
      RowBox[{"start", ",", 
       RowBox[{"randomNetwork", "[", 
        RowBox[{"n", ",", "3"}], "]"}], ",", "10"}], "]"}], "&"}], "/@", 
    RowBox[{"Range", "[", "size", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"s4", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"flattenEvo", "[", 
      RowBox[{"start", ",", 
       RowBox[{"randomNetwork", "[", 
        RowBox[{"n", ",", "4"}], "]"}], ",", "10"}], "]"}], "&"}], "/@", 
    RowBox[{"Range", "[", "size", "]"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.763242034126282*^9, 3.7632420884466033`*^9}, {
  3.7632446663212347`*^9, 3.763244674325494*^9}, {3.763398054000156*^9, 
  3.7633980652328353`*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"c0b0388a-9739-42cb-9d69-69c934372cb4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Mean", "[", 
  RowBox[{"BinaryBDM", "/@", "s1"}], "]"}]], "Input",
 CellChangeTimes->{3.763242098975278*^9},
 CellLabel->"In[44]:=",ExpressionUUID->"0e6c85c2-7cb3-48f3-a2ac-0f13f13be1b7"],

Cell[BoxData["2541.5748072177794`"], "Output",
 CellChangeTimes->{
  3.763242099942507*^9, 3.763243806081236*^9, 3.7632446231758995`*^9, {
   3.7632446571687903`*^9, 3.7632446781242123`*^9}, 3.763244711072632*^9, 
   3.763246149674096*^9, 3.763398069486232*^9, 3.7633983468728113`*^9, 
   3.7634025064573708`*^9, 3.7634074666360235`*^9, 3.7634082304134564`*^9, 
   3.7650511317828784`*^9},
 CellLabel->"Out[44]=",ExpressionUUID->"c017fc7e-7011-4cc0-8881-c4335403e31e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Mean", "[", 
  RowBox[{"BinaryBDM", "/@", "s2"}], "]"}]], "Input",
 CellChangeTimes->{{3.7632421043987436`*^9, 3.7632421063986206`*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"96783f87-e43e-4a98-af87-abcfe7397680"],

Cell[BoxData["5018.436121902861`"], "Output",
 CellChangeTimes->{
  3.7632421073176312`*^9, 3.7632438062691307`*^9, 3.7632446251219406`*^9, {
   3.763244658991*^9, 3.763244679519369*^9}, 3.7632447112535276`*^9, 
   3.763246149950939*^9, 3.7633983470107336`*^9, 3.7634025065803022`*^9, 
   3.7634074668249187`*^9, 3.763408230549378*^9, 3.7650511319467845`*^9},
 CellLabel->"Out[45]=",ExpressionUUID->"63e01b9f-99bd-4c78-abdc-145cbceeb000"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Mean", "[", 
  RowBox[{"BinaryBDM", "/@", "s3"}], "]"}]], "Input",
 CellChangeTimes->{{3.7632421105439878`*^9, 3.763242112324935*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"2df60942-3307-4ebb-8bd9-f711deaac581"],

Cell[BoxData["6625.196036408517`"], "Output",
 CellChangeTimes->{
  3.7632421132408094`*^9, 3.7632438066449137`*^9, 3.7632446271049414`*^9, {
   3.763244662008767*^9, 3.763244680870897*^9}, 3.763244711462423*^9, 
   3.7632461501568975`*^9, 3.7633983471716423`*^9, 3.763402506719221*^9, 
   3.76340746704379*^9, 3.7634082307259398`*^9, 3.7650511321246815`*^9},
 CellLabel->"Out[46]=",ExpressionUUID->"5a954a90-d1f3-49d0-be56-1bf32284ff15"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Mean", "[", 
  RowBox[{"BinaryBDM", "/@", "s4"}], "]"}]], "Input",
 CellChangeTimes->{{3.763398076810583*^9, 3.763398078528223*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"4f545bd0-cb21-4344-91ec-8cf4e9a473c7"],

Cell[BoxData["7191.176859821693`"], "Output",
 CellChangeTimes->{3.763398079403447*^9, 3.7633983473115606`*^9, 
  3.763402506885126*^9, 3.7634074672576675`*^9, 3.763408230867859*^9, 
  3.765051132274597*^9},
 CellLabel->"Out[47]=",ExpressionUUID->"cacc2e23-ad00-43f8-9d01-10ba09caf393"]
}, Open  ]],

Cell["\<\
Looks like we will be able to separate sets according to the BDM!\
\>", "Text",
 CellChangeTimes->{{3.7632421227415857`*^9, 
  3.763242195669813*^9}},ExpressionUUID->"9d1b6cda-8201-4823-9323-\
431f7a27a614"]
}, Open  ]],

Cell[CellGroupData[{

Cell["The Sets", "Subchapter",
 CellChangeTimes->{{3.7632424598455753`*^9, 
  3.7632424628140926`*^9}},ExpressionUUID->"b6b41eeb-d89e-43e3-a392-\
3d9af38d71b0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classes", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.763242956613846*^9, 3.763242972894581*^9}, {
  3.763398085768727*^9, 3.763398086031638*^9}, {3.763398300883968*^9, 
  3.7633983014796267`*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"2fe1778e-61b9-4c91-831f-ada05e386a73"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{3.763242974958556*^9, 3.763243806754853*^9, 
  3.7632447115268135`*^9, 3.763246150208868*^9, 3.763398086868287*^9, 
  3.763398302656602*^9, 3.7633983473535366`*^9, 3.7634025069141097`*^9, 
  3.7634074672896485`*^9, 3.763408230885848*^9, 3.7650511323195715`*^9},
 CellLabel->"Out[48]=",ExpressionUUID->"3d0ca191-26fd-4685-8697-71c84416e0cb"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"size", " ", "=", " ", "100"}], ";"}]], "Input",
 CellChangeTimes->{{3.7632430988933926`*^9, 3.763243099325465*^9}, {
  3.763243133733981*^9, 3.7632431341067643`*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"9bdc1915-5f30-4358-abdf-d910c630a9a7"],

Cell[BoxData[{
 RowBox[{"SeedRandom", "[", "02042019", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"TrainingSample", " ", "=", "\[IndentingNewLine]", " ", 
    RowBox[{"Flatten", "@", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Table", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"flattenEvo", "[", "\[IndentingNewLine]", 
           RowBox[{"start", ",", "\[IndentingNewLine]", 
            RowBox[{"randomNetwork", "[", 
             RowBox[{"n", ",", 
              RowBox[{"classes", "[", 
               RowBox[{"[", "j", "]"}], "]"}]}], "]"}], ",", 
            "\[IndentingNewLine]", "10"}], "]"}], "\[Rule]", 
          RowBox[{"classes", "[", 
           RowBox[{"[", "j", "]"}], "]"}]}], "\[IndentingNewLine]", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "size"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
       ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", 
         RowBox[{"Length", "@", "classes"}]}], "}"}]}], "]"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ValidationSample", " ", "=", "\[IndentingNewLine]", " ", 
    RowBox[{"Flatten", "@", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Table", "[", "\[IndentingNewLine]", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"flattenEvo", "[", "\[IndentingNewLine]", 
           RowBox[{"start", ",", "\[IndentingNewLine]", 
            RowBox[{"randomNetwork", "[", 
             RowBox[{"n", ",", 
              RowBox[{"classes", "[", 
               RowBox[{"[", "j", "]"}], "]"}]}], "]"}], ",", 
            "\[IndentingNewLine]", "10"}], "]"}], "\[Rule]", 
          RowBox[{"classes", "[", 
           RowBox[{"[", "j", "]"}], "]"}]}], "\[IndentingNewLine]", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "size"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
       ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", 
         RowBox[{"Length", "@", "classes"}]}], "}"}]}], "]"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TestSample", " ", "=", "\[IndentingNewLine]", " ", 
   RowBox[{"Flatten", "@", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Table", "[", "\[IndentingNewLine]", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"flattenEvo", "[", "\[IndentingNewLine]", 
          RowBox[{"start", ",", "\[IndentingNewLine]", 
           RowBox[{"randomNetwork", "[", 
            RowBox[{"n", ",", 
             RowBox[{"classes", "[", 
              RowBox[{"[", "j", "]"}], "]"}]}], "]"}], ",", 
           "\[IndentingNewLine]", "10"}], "]"}], "\[Rule]", 
         RowBox[{"classes", "[", 
          RowBox[{"[", "j", "]"}], "]"}]}], "\[IndentingNewLine]", ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "size"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
      ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", 
        RowBox[{"Length", "@", "classes"}]}], "}"}]}], "]"}]}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.7632430863096356`*^9, 3.7632430938450994`*^9}, {
   3.763243145781822*^9, 3.763243211909851*^9}, {3.7632432519445367`*^9, 
   3.7632433285115166`*^9}, {3.7632433818986163`*^9, 
   3.7632434091315784`*^9}, {3.763243492025395*^9, 3.763243558266552*^9}, 
   3.7632436232888494`*^9, {3.763243723929563*^9, 3.7632437682303457`*^9}, {
   3.7632438217126017`*^9, 3.7632438231031113`*^9}, {3.763244434559784*^9, 
   3.7632444524936304`*^9}, {3.763244484906581*^9, 3.7632445629586773`*^9}, {
   3.7632459511692114`*^9, 3.7632459638530135`*^9}, 3.765051176764477*^9, 
   3.7650513027327213`*^9},ExpressionUUID->"12d3e8b7-d678-4005-9677-\
714d5e1e64df"],

Cell["The data has the form:", "Text",
 CellChangeTimes->{{3.763243826901846*^9, 
  3.763243835172881*^9}},ExpressionUUID->"44c93c31-18c4-43b9-b19a-\
bc7a68c628a3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TrainingSample", "[", 
  RowBox[{"[", "1", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7632433484692545`*^9, 3.7632433866569386`*^9}, {
  3.763243478732415*^9, 3.7632435076923275`*^9}, {3.7632436998522587`*^9, 
  3.7632437018640795`*^9}, {3.763246166760685*^9, 3.7632461675967455`*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"f70a6f51-5d10-4e93-8dd0-8a86a66d135c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
   "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", 
    ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",",
     "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", 
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0",
     ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", 
    ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",",
     "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
    "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0",
     ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", 
    ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",",
     "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", 
    "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0",
     ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", 
    ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",",
     "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", 
    "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0",
     ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", 
    ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",",
     "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
    "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0",
     ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", 
    ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",",
     "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", 
    "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1",
     ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", 
    ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",",
     "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
    "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0",
     ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
    ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",",
     "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", 
    "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0",
     ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0"}], 
   "}"}], "\[Rule]", "1"}]], "Output",
 CellChangeTimes->{
  3.7632433875008016`*^9, 3.7632434373669987`*^9, {3.7632434802384186`*^9, 
   3.7632434868046217`*^9}, 3.763243529976213*^9, 3.7632435869153795`*^9, 
   3.7632436565170007`*^9, {3.7632437027452183`*^9, 3.763243728607081*^9}, 
   3.7632438081957045`*^9, 3.7632444619125905`*^9, {3.763244525486495*^9, 
   3.763244537684128*^9}, 3.7632447128235893`*^9, {3.763246151545086*^9, 
   3.763246180534128*^9}, 3.7633980965690546`*^9, 3.7633983482968025`*^9, 
   3.7634025079181957`*^9, 3.7634074684489307`*^9, 3.7634082319275546`*^9, 
   3.765051133306566*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"9baab11d-38f4-4332-865d-61a6670911c5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "@", 
  RowBox[{"TrainingSample", "[", 
   RowBox[{"[", 
    RowBox[{"1", ",", "1"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7650513115707555`*^9, 3.765051321278674*^9}, {
  3.765051404610084*^9, 3.7650514064832935`*^9}},
 CellLabel->
  "In[102]:=",ExpressionUUID->"6950ed9a-e320-4103-85d8-a9ddf8cb1f95"],

Cell[BoxData["240"], "Output",
 CellChangeTimes->{3.7650513231650004`*^9, 3.76505140695802*^9},
 CellLabel->
  "Out[102]=",ExpressionUUID->"09c4a486-d2dc-4a9d-b7c0-f627123eb21d"]
}, Open  ]],

Cell["\<\
Where the object to classify is the evolution to 10 steps of the Boolean \
network while the class if the $K$ parameter that was used to generate the \
network.  \
\>", "Text",
 CellChangeTimes->{{3.7632438423668985`*^9, 3.7632438524608192`*^9}, {
  3.7632438991897*^9, 
  3.7632439593409853`*^9}},ExpressionUUID->"11fa9d1a-4dc7-4a39-b971-\
366f4165277e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solving the Classification Problem With Neural Networks.", "Chapter",
 CellChangeTimes->{{3.7632453935439773`*^9, 
  3.763245405692049*^9}},ExpressionUUID->"7615688e-c912-4f2e-850f-\
b7aa7d5c2246"],

Cell["\<\
Lets see if a neural network can solve classify the previous set.\
\>", "Text",
 CellChangeTimes->{{3.7632454159162645`*^9, 
  3.763245441931261*^9}},ExpressionUUID->"ace2c4c2-c63c-47dd-9f43-\
34210f4b43c8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nn", " ", "=", " ", 
  RowBox[{"NetChain", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", " ", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"LinearLayer", "[", 
       RowBox[{"n", "*", "10"}], "]"}], ",", "Ramp", ",", 
      RowBox[{"DropoutLayer", "[", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"LinearLayer", "[", "]"}], ",", "Ramp", ",", 
      RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", "\n", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Class\>\"", ",", "classes"}], "}"}], "]"}]}], ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", " ", 
     RowBox[{"{", 
      RowBox[{"n", "*", "10"}], "}"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.763245463722003*^9, 3.763245527596218*^9}, {
  3.763245792052077*^9, 3.763245794784336*^9}, {3.7633956409216166`*^9, 
  3.7633956422495365`*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"e3af811a-791a-465b-9c26-8d18fac400de"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"240\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["6", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{240, 240}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {240}, "$OutputSize" -> 240, 
                    "$InputSize" -> 240, "$InputDimensions" -> {240}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {240}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]]], 
                    "3" -> Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]]], 
                    "4" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{3, 240}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 240, "$InputDimensions" -> {240}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {3}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {1, 2, 3}, "InputDepth" -> 1, "Dimensions" -> 
                    3, "$Rank" -> 0], 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"240\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"240\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"240\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"240\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.763245534750656*^9, 3.763245795509922*^9, 
  3.7632461543278913`*^9, 3.763395643401189*^9, 3.7633980997341657`*^9, 
  3.763398353463656*^9, 3.7634025137141104`*^9, 3.763407470996066*^9, 
  3.76340823449408*^9, 3.7650511402818975`*^9},
 CellLabel->"Out[55]=",ExpressionUUID->"a5d601a8-e9e4-4a8e-8d2c-28c2682624e6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"SeedRandom", "[", "02042019", "]"}], "\[IndentingNewLine]", 
 RowBox[{"net", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{
   "nn", ",", "\[IndentingNewLine]", "TrainingSample", ",", " ", 
    "\[IndentingNewLine]", 
    RowBox[{"ValidationSet", "\[Rule]", "ValidationSample"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"TargetDevice", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<GPU\>\"", ",", "2"}], "}"}]}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.763245547429985*^9, 3.7632455950619054`*^9}, {
  3.763245887406168*^9, 3.763245888766409*^9}, {3.7632459721463113`*^9, 
  3.763245984326803*^9}, {3.7632460965212913`*^9, 3.7632460981050177`*^9}, {
  3.763246179710012*^9, 3.763246190684785*^9}, {3.763398162999688*^9, 
  3.763398173199887*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"146d5e7a-e1ba-4870-b3b3-d1cf781c0653"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"240\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["6", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{240, 240}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{240}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {240}, "$OutputSize" -> 240, 
                    "$InputSize" -> 240, "$InputDimensions" -> {240}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {240}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]]], 
                    "3" -> Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]]], 
                    "4" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{3, 240}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{3}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 240, "$InputDimensions" -> {240}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {3}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {1, 2, 3}, "InputDepth" -> 1, "Dimensions" -> 
                    3, "$Rank" -> 0], 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"240\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"240\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"240\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"240\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.7632456006470213`*^9, 3.7632457977010975`*^9, 3.763245927332307*^9, {
   3.7632459776006413`*^9, 3.7632460038752117`*^9}, 3.76324610072583*^9, 
   3.763246180174858*^9, 3.763246218694842*^9, 3.7633957012879887`*^9, 
   3.763398160380187*^9, 3.7633984099128284`*^9, 3.7634025537910404`*^9, 
   3.7634075108243403`*^9, 3.7634083051893363`*^9, 3.765051198480033*^9},
 CellLabel->"Out[57]=",ExpressionUUID->"1015f635-f166-4424-8e63-0f2287cfc4ab"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{"net", ",", " ", "TestSample", ",", " ", "\"\<Accuracy\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7632456136609907`*^9, 3.7632456241442156`*^9}, {
  3.7632459338301044`*^9, 3.763245938829139*^9}, {3.76324626766602*^9, 
  3.763246274277067*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"540aec86-858d-4c99-a7d7-f79cd6bdca1f"],

Cell[BoxData["0.4266666666666667`"], "Output",
 CellChangeTimes->{{3.7632456162672343`*^9, 3.7632456246949005`*^9}, {
   3.763245935871065*^9, 3.7632459397522044`*^9}, 3.7632461803732147`*^9, 
   3.7632462764970646`*^9, 3.763395701470066*^9, {3.7633981605670805`*^9, 
   3.763398178924946*^9}, 3.7633984112156715`*^9, 3.7634025547767153`*^9, 
   3.7634075114759674`*^9, 3.7634083057197638`*^9, 3.7650511997232327`*^9},
 CellLabel->"Out[58]=",ExpressionUUID->"1735ec52-0eb1-4260-943f-e9793858e460"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{"net", ",", " ", "TrainingSample", ",", " ", "\"\<Accuracy\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7650627400740027`*^9, 3.765062750976424*^9}},
 CellLabel->
  "In[117]:=",ExpressionUUID->"16070b32-af29-4f0f-8e6c-db8f3a49bea5"],

Cell[BoxData["1.`"], "Output",
 CellChangeTimes->{3.765062752461256*^9},
 CellLabel->
  "Out[117]=",ExpressionUUID->"d9e5f3df-06e9-45b9-8e56-80d6aba38669"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nn2", " ", "=", " ", 
  RowBox[{"NetChain", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", " ", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"LinearLayer", "[", 
       RowBox[{"n", "*", "10"}], "]"}], ",", "Ramp", ",", 
      RowBox[{"DropoutLayer", "[", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"LinearLayer", "[", "]"}], ",", 
      RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", "\n", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Class\>\"", ",", "classes"}], "}"}], "]"}]}], ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", " ", 
     RowBox[{"{", 
      RowBox[{"n", "*", "10"}], "}"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7650522132627163`*^9, 3.7650522246705513`*^9}},
 CellLabel->
  "In[103]:=",ExpressionUUID->"ed95537e-511d-451a-9d9a-f83ec80f1339"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"240\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["5", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{240, 240}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {240}, "$OutputSize" -> 240, 
                    "$InputSize" -> 240, "$InputDimensions" -> {240}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {240}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]]], 
                    "3" -> Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]]], 
                    "4" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{3, 240}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 240, "$InputDimensions" -> {240}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {1, 2, 3}, "InputDepth" -> 1, "Dimensions" -> 
                    3, "$Rank" -> 0], 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"240\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"240\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"240\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"240\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7650522365580425`*^9},
 CellLabel->
  "Out[103]=",ExpressionUUID->"1e22878f-0076-471c-8a8d-8fc15fdd5789"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"SeedRandom", "[", "02042019", "]"}], "\[IndentingNewLine]", 
 RowBox[{"net2", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{
   "nn2", ",", "\[IndentingNewLine]", "TrainingSample", ",", " ", 
    "\[IndentingNewLine]", 
    RowBox[{"ValidationSet", "\[Rule]", "ValidationSample"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"TargetDevice", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<GPU\>\"", ",", "2"}], "}"}]}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.7650522404709244`*^9, 3.76505224558981*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"f503fb4a-cbd5-4010-b8f2-ca4201e760ba"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"240\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["5", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{240, 240}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{240}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {240}, "$OutputSize" -> 240, 
                    "$InputSize" -> 240, "$InputDimensions" -> {240}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {240}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]]], 
                    "3" -> Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]]], 
                    "4" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{3, 240}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{3}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 240, "$InputDimensions" -> {240}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {1, 2, 3}, "InputDepth" -> 1, "Dimensions" -> 
                    3, "$Rank" -> 0], 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"240\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"240\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"240\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"240\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.765052292618767*^9},
 CellLabel->
  "Out[105]=",ExpressionUUID->"325e353a-571c-4374-8fa0-48c32baaf7e1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{"net2", ",", " ", "TestSample", ",", " ", "\"\<Accuracy\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{3.7650522656934013`*^9, 3.7650523046166925`*^9},
 CellLabel->
  "In[107]:=",ExpressionUUID->"3025176c-34f0-4eca-8493-43cee9e88294"],

Cell[BoxData["0.43`"], "Output",
 CellChangeTimes->{{3.7650522927856703`*^9, 3.765052305199998*^9}},
 CellLabel->
  "Out[107]=",ExpressionUUID->"852a2a3d-7af6-45bd-a74e-3b7e41ba59ed"]
}, Open  ]],

Cell["\<\
As expected, the NN is not good at classifying this problem, and the network \
has enough variance to perfectly fit the set.\
\>", "Text",
 CellChangeTimes->{{3.763246281860834*^9, 
  3.763246323980756*^9}},ExpressionUUID->"64daf8a4-ab69-44ca-9291-\
27df6fcc1cd4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{"net", ",", " ", "TrainingSample", ",", " ", "\"\<Accuracy\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.763246326105734*^9, 3.763246339942238*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"d143480a-34aa-4c0e-bd24-976dc143823a"],

Cell[BoxData["1.`"], "Output",
 CellChangeTimes->{3.7632463406378374`*^9, 3.763398182102769*^9, 
  3.7633984115604744`*^9, 3.763402554879655*^9, 3.76340751157591*^9, 
  3.7634083058227043`*^9, 3.7650512000529165`*^9},
 CellLabel->"Out[59]=",ExpressionUUID->"1e969605-7d71-45a9-aa5f-0de0daf772ac"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{
  "net2", ",", " ", "TestSample", " ", ",", " ", 
   "\"\<ConfusionMatrixPlot\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.7633986967588863`*^9, 3.76339870699102*^9}, {
  3.7650523114557934`*^9, 3.7650523129334517`*^9}},
 CellLabel->
  "In[108]:=",ExpressionUUID->"6ae411d4-3a6a-4a4e-be79-5b05410dab8b"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{0.8945942583607176, 0.7090533576541674, 0.3023798974622647}, {
   0.8635559697338789, 0.5733190318221273, 0.03544974283375141}, {
   0.8818650725755535, 0.6533870330151846, 0.19290854191236873`}}, {{
   0.9296619137024884, 0.4898720411769702, 0.003501936515863808}, {
   0.8850684864419744, 0.534170001923154, 0.005722118489973546}, {
   0.9234062735499363, 0.8290163880673418, 0.5626416871353802}}, {{1., 0.42, 
   0.}, {0.8850684864419744, 0.534170001923154, 0.005722118489973546}, {
   0.9456004215370546, 0.9128823649786179, 0.7807843228638177}}}, {{0, 0}, {3,
    3}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["57", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "57", "\" examples of \"", "1", "\" correctly classified\""}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.4318181818181818`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.57`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.4913793103448276`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{57, " examples of ", 1, " correctly classified"}], 
         Row[{"Precision = ", 0.4318181818181818}], 
         Row[{"Recall = ", 0.57}], 
         Row[{"FScore = ", 0.4913793103448276}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["45", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "45", "\" examples of \"", "2", "\" misclassified as \"", "1"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.3409090909090909`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.45`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{45, " examples of ", 2, " misclassified as ", 1}], 
         Row[{"Column fraction = ", 0.3409090909090909}], 
         Row[{"Row fraction = ", 0.45}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["30", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "30", "\" examples of \"", "3", "\" misclassified as \"", "1"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.22727272727272727`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.3`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{30, " examples of ", 3, " misclassified as ", 1}], 
         Row[{"Column fraction = ", 0.22727272727272727`}], 
         Row[{"Row fraction = ", 0.3}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["40", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "40", "\" examples of \"", "1", "\" misclassified as \"", "2"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.3389830508474576`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.4`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{40, " examples of ", 1, " misclassified as ", 2}], 
         Row[{"Column fraction = ", 0.3389830508474576}], 
         Row[{"Row fraction = ", 0.4}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["40", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "40", "\" examples of \"", "2", "\" correctly classified\""}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.3389830508474576`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.4`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.3669724770642202`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{40, " examples of ", 2, " correctly classified"}], 
         Row[{"Precision = ", 0.3389830508474576}], 
         Row[{"Recall = ", 0.4}], 
         Row[{"FScore = ", 0.3669724770642202}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["38", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "38", "\" examples of \"", "3", "\" misclassified as \"", "2"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.3220338983050847`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.38`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{38, " examples of ", 3, " misclassified as ", 2}], 
         Row[{"Column fraction = ", 0.3220338983050847}], 
         Row[{"Row fraction = ", 0.38}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["3", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "3", "\" examples of \"", "1", "\" misclassified as \"", "3"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.06`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.03`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{3, " examples of ", 1, " misclassified as ", 3}], 
         Row[{"Column fraction = ", 0.06}], 
         Row[{"Row fraction = ", 0.03}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["15", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "15", "\" examples of \"", "2", "\" misclassified as \"", "3"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.3`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.15`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{15, " examples of ", 2, " misclassified as ", 3}], 
         Row[{"Column fraction = ", 0.3}], 
         Row[{"Row fraction = ", 0.15}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["32", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "32", "\" examples of \"", "3", "\" correctly classified\""}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.64`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.32`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.4266666666666667`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{32, " examples of ", 3, " correctly classified"}], 
         Row[{"Precision = ", 0.64}], 
         Row[{"Recall = ", 0.32}], 
         Row[{"FScore = ", 0.4266666666666667}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{"100", "\" example\"", "\"s\"", "\" of class \"", "1"},
            "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.57`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{100, " example", "s", " of class ", 1}], 
        Row[{"Recall = ", 0.57}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{"100", "\" example\"", "\"s\"", "\" of class \"", "2"},
            "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.4`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{100, " example", "s", " of class ", 2}], 
        Row[{"Recall = ", 0.4}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{"100", "\" example\"", "\"s\"", "\" of class \"", "3"},
            "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.32`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{100, " example", "s", " of class ", 3}], 
        Row[{"Recall = ", 0.32}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "132", "\" example\"", "\"s\"", "\" classified as \"", "1"}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.4318181818181818`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{132, " example", "s", " classified as ", 1}], 
        Row[{"Precision = ", 0.4318181818181818}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "118", "\" example\"", "\"s\"", "\" classified as \"", "2"}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.3389830508474576`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{118, " example", "s", " classified as ", 2}], 
        Row[{"Precision = ", 0.3389830508474576}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "50", "\" example\"", "\"s\"", "\" classified as \"", "3"}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.64`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{50, " example", "s", " classified as ", 3}], 
        Row[{"Precision = ", 0.64}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{2.5, 
       FormBox[
        RotationBox["1", BoxRotation -> 0.], TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["2", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["3", BoxRotation -> 0.], TraditionalForm]}}, {{2.5, 
       FormBox["100", TraditionalForm]}, {1.5, 
       FormBox["100", TraditionalForm]}, {0.5, 
       FormBox["100", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["132", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["118", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["50", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["1", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["2", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["3", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.763398709018437*^9, 3.7634025553878417`*^9, 
  3.7634075118607464`*^9, 3.7634083061035433`*^9, 3.765051200387725*^9, 
  3.7650523135997257`*^9},
 CellLabel->
  "Out[108]=",ExpressionUUID->"038d5b29-7889-4162-b436-14aebb3b939a"]
}, Open  ]],

Cell["\<\
Looks like most incorrect classifications are assigned to the k=1 class.\
\>", "Text",
 CellChangeTimes->{{3.7634075304243803`*^9, 
  3.7634075659571095`*^9}},ExpressionUUID->"e4314c01-fff0-468d-b291-\
3f55b7d4c361"],

Cell["Lets see if Mathematica can find a good classifier.", "Text",
 CellChangeTimes->{{3.7633069759579773`*^9, 
  3.76330699022093*^9}},ExpressionUUID->"08228df2-91e3-4eae-b94f-\
7a6c34574ff7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mClass", " ", "=", " ", 
  RowBox[{"Classify", "[", "TrainingSample", "]"}]}]], "Input",
 CellChangeTimes->{{3.7633070196301394`*^9, 3.763307042529502*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"50acee1e-cb53-4959-ba6f-37007770da86"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "240", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "1", "2", "3"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "240", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "1", "2", "3"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"GradientBoostedTrees\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["300", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 300, "ClassNumber" -> 3, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "BooleanVector", "Length" -> 240]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"BooleanVector"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ConformBooleanVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 8258112739109874696, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "BooleanVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 6090998123808376730, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 300, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> CompressedData["
1:eJx1lT9I20EUxyOKQqGDYHFQCg6WFCxuFSJy2VqwRHRySLFYOjhYFZwcLBEU
pUOkQpwKQgedCoJCnIRCB8WCpUOp+eWX3y86CIoWi0LBwbsffF7g/fAgOe7u
vff9cy+XjtGJoXd1iUTir/28X/vVmBoPzKOvL8KZFt+8mt08ae33Tc/hWP3n
54FpSo3biKp5nf92ncxWzFym7XQr55tENAJDfim9/nD6KDDN0QjlfL+7cDu6
VzHVmRaLcGR2Hs+fDRZ9mW+SWVs5MJcXbvhShzz4PNkdvvrYGV+3WzaZtkDW
b7r+f/804gmPaHs3MP/s9/BVSXDRhy720cuafPgwT/U9+P1lsiy4rHU89Tes
qvR6WfyCp97/ceCGJ7o+OLmzofjOPcFP4wy4sMyx+I+vQ0WXULsv9OMTOp45
Wl2hWVp0IxAc1tyPX45GzAf0rIw4gRXB+emmwz/CnzrwIx+95HPfL8OogcRf
6qIff+BJ3Ko97S54ogMfdJ7uR2bqwQ+f3+65ArU+x4/zQQcQCg51wcFv+HMf
nNN/uq/oB3xh/6mjmfQEr8G6PFZfljX82QcHfazBw2fO8Q9c6pLH/aFT9xO4
6EUH+fiJj+SBxzl16B/iqUcc/t/XX+TpOvQD94pv8OQcPPLpd/RxH8TBg/eP
eugDhz5fdjLy1dg7w1q/L/DQ7w91F86cIaVYP/HOoJ88fKQP6E/9PrMPb/Rs
55zAMHbP+t3lHD7wIJ/+oz59R36v+5mkav2gf0f6f4l46qAPH/EHfHDAxxcd
zzk6wNPvgvaTvDux5cbd
                    "], "Method" -> "Naive", "VectorLength" -> 240, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> CompressedData["
1:eJx1lT9I20EUxyOKQqGDYHFQCg6WFCxuFSJy2VqwRHRySLFYOjhYFZwcLBEU
pUOkQpwKQgedCoJCnIRCB8WCpUOp+eWX3y86CIoWi0LBwbsffF7g/fAgOe7u
vff9cy+XjtGJoXd1iUTir/28X/vVmBoPzKOvL8KZFt+8mt08ae33Tc/hWP3n
54FpSo3biKp5nf92ncxWzFym7XQr55tENAJDfim9/nD6KDDN0QjlfL+7cDu6
VzHVmRaLcGR2Hs+fDRZ9mW+SWVs5MJcXbvhShzz4PNkdvvrYGV+3WzaZtkDW
b7r+f/804gmPaHs3MP/s9/BVSXDRhy720cuafPgwT/U9+P1lsiy4rHU89Tes
qvR6WfyCp97/ceCGJ7o+OLmzofjOPcFP4wy4sMyx+I+vQ0WXULsv9OMTOp45
Wl2hWVp0IxAc1tyPX45GzAf0rIw4gRXB+emmwz/CnzrwIx+95HPfL8OogcRf
6qIff+BJ3Ko97S54ogMfdJ7uR2bqwQ+f3+65ArU+x4/zQQcQCg51wcFv+HMf
nNN/uq/oB3xh/6mjmfQEr8G6PFZfljX82QcHfazBw2fO8Q9c6pLH/aFT9xO4
6EUH+fiJj+SBxzl16B/iqUcc/t/XX+TpOvQD94pv8OQcPPLpd/RxH8TBg/eP
eugDhz5fdjLy1dg7w1q/L/DQ7w91F86cIaVYP/HOoJ88fKQP6E/9PrMPb/Rs
55zAMHbP+t3lHD7wIJ/+oz59R36v+5mkav2gf0f6f4l46qAPH/EHfHDAxxcd
zzk6wNPvgvaTvDux5cbd
                    "], "StandardDeviation" -> CompressedData["
1:eJx1lUsoRVEUho8wNRF5pRTKwGMgGdAOmZgoj+7EiG5yJJEkYaRkZECETBQT
yUwekYSSKBMjOhQDA3Hrllde6Xx31387t267vff61/rXv9daJ6+9tymc4DjO
y9+/KLpUkf7lmbq3lO3qiGeO88drQ1HP9OQmz9T/eOYl8bwwad8zyR+pE23f
nnFnFspSXz3j/P9uDXhw7zuvQydP9t7J7Axf/vnJbtnrHpz1zOpk62Lfu12J
ux4amev/tH7Asdc47LFjn53mZlSeWR5dPl/yIC75kRfnageeOKxr80Oh/Qcb
l73a47+hebMj8hjPU89Xtk7vn68sPnGs6LD62uqOXvDTOFMXA/0FjVZ/dOWe
OOSPTpzDBxxx9H3AqQ7g8c86fVDV2BeOrzP8gidfcNipvtyTP/rgD7vRjMPO
ukubBzooTutR6xJ+4GuHc0qL76zO6FGyvXxwfhRfV8TBDv74daVOta7gC45z
jYd+7OEfVEfsNR736Kf9onqTp9aTvqfqHnsPmScaDz/w0vmCHXoE1Re4ID+8
Kzg3oP/Ba70TX+cX88+V+tW+yvLtdM6w1/kCD+0P/G7c7JY3bcS/b2zO+Pl3
yXtoXytPncfkQ70E9ZfWQSw/nwd4nRPwAl/jvxN22kfKD3vNT78fWu8aX+11
PsW+XzIXVE/sfgGlU84D
                    "], "Method" -> "NaiveSampler", "VectorLength" -> 240, 
                   "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 240]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                   True, "Invertibility" -> "Perfect", "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 92]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                "Model" -> Association["Matrix" -> CompressedData["
1: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
iR/Hk5FoY1l8++19OLWjeUryRzPYNuzb9BTPhViXt/R8NtnwX+T0YMT3InR0
vTipnFsPMUVOpS9Ht/xzJW/+7zESGI768P98k4TXLeQSKre4MHqa99Uz0zAQ
iSDt49odBOFTx6iWe+Nh9frnNJdaD4i594QWQjqAx+kNn74EAtdfmdyLxf+B
Q2nkvg/9ddD2ziVU1rwYr4l/7Ny/MwErK904FivroPAr77MXotUg49BktVLo
Dxa6zbt9WRDF/Hb1+wo2QDSdhQ9HJxVs3xsbuliJI5/YQem1Dw1IbRJSFwzM
Bq3N2nNe17OA47eTKFE0F3kErak8TXmobPLDhUOzBvdWaismS9eDYterR0wJ
2bgmvHfJSTIIrJKvmpxvJOPz96Pph5gI2Hqgd+9MUw6+yBsy0yvZel4mYhHe
mAmxlotLcqWqQGXdpamjVgpyb+fSeC5nYXDW981y70o4SUFG4XOZ8Pq6pHGL
Xx1O01caqCZXYMEoQTV8i99IfzuS9NuIeKHpHmeT4Ja5alcpS17NBqmqJUvT
bf7wDQ/5XS/Pxjy58n2ttZV4OoYvlSzVAGV+FbUn8mohV8XuARu1FqnraoLe
AckQvFvyo/tEJOoFfF70mI1GLz9XAdPuetgbpq53+WMF6nyUPTzJnwXN7I5/
E7enYqqbe871/4pBtSfj+PioJ/TqSDWMnmuA+iT3L4apvjhstDtu+f/395f/
ij2RJ0KdpOFgo2gwbJvp4B+6QkQbz78Xb8WRMcTiTvri3QrseueTIOaZD9fe
3tOYvdqFQYa2b3RTiSgbYUF4CSTkOyh4bfZG1dY8ulhm6/IUVVzzLrOu2uIg
m9INheQ05GujV87/RESyfaf2v3UCJMW9bd4zRUSf4y8/F7yLgN1XtQ1t/mTD
6216N+R/1aOHRT/57e1iuBlztfj65xRckzqdyFySjzriI/Z+BrnYnTr+VW2t
BlTZVinTPvm468lvr0DrCGBlFcu1rA5HjYuFlwbjw9HlgZHDPVkq9jhkaM3Z
kJHjx9NW7zFHcB7QarxytAq4nE9wsjMVIFdGFLlntgIWQ4J2X92Tjx1f9QYK
ZjJhjJ9y04bND+O7/hyvFiEBa2F1/92JYnB2y37zZeoRspnu+vdRtwoJGy8/
vNzi3yG2qgb93w2QWCFFT9vwAJXvGepPruYiXV5ghF5HA3IqPszl2BGCq9fv
rxsqV+E8nePqbi0yvp+BRcMBH+g72rVUI1qN/v2PvwaKxIG+5u7uY3bqaHZU
5PwD6TZImhlEsYvt6MHz7rarEiJrE2Hi1d0OjNrcx51LCMb6jYOC6wYlULvz
vfSyUgsMZ8aS/2Oqw6M+tv4NH0Mx0rfQbkqlAGTaeaRtLPJxqPVjZ/PLGtAd
drAPzq1D93SN9FNRGbBOLNHZWIkFEuHh9cnqWgzsc8VnZ0pwxj7SLDLJD1lN
jw3/97wYjqc3HKebzIbJxd/Wrg0kVGeY6ffmzUIv9umLPKskiJcOpvrmxYLv
xxLtTwtE2DFq3DSflIwihEeZvFtz/I9HZTpzOBW1VLPreqKqcNv71y+GHMhw
8cF5cq8xCf9yGhQMnKICh1IhOhqmg3Dkss/kYh2YFacLME9TYJWReJRFoxoF
8wdOPnAkAbNN+MSmTxmI/7LTu0O3lbsXcgwdeUUoy+yvnExbB3YJTaztgjn4
7Ive8jkFKkqI98x/sKkFFh/W/WHRpcAqb9WkkYPA6LrtmLRZOd5LpR/6PRUA
vk8fGwlPV0P2pTHVi30kUKX/YF0ZmosTnw8quBjFYuaD0IOS2oiH9V7X3+0p
hncmrNNHLlHw/R8rA4k6AlYJPdBtUImCRsb80LeuJWg5962C/TcFpxO9rPU4
kpGfXpMh9FgoZl65e8npSzJSTY04WF0qUPBwn9f2z+mQ+Eqdv8m+CnepVVUn
ihFARDQ+9lU5GT7L8TOxHq/Hfem63XTRkfhSbfPGcatg2G3WF2R7rgB3fLlF
e5SuAv6walnvqC7D1QetJnUOWcCg2zu1uD8bOA/x6coc9cEDBa/r/9wkwZ/x
P84VecWQ+kSlcUKEhDbKm/b8F7Kg5YuIzMi/UpS60zW/+3ghyu9x9/n0sxMm
tu18fMK8FA/l+nV2+5KRiz0lW+fiQzQ8utxxQZOCvS9m9Uq9qOhw2fvrhLkr
fjtwyFSYmoDzPnIBSa4V4HzYqdKuNxjg3LtSNaFqsOnyG52vjUaDF/rC1qcT
4auOFjlEKgM1Zr7lCXQSQFf0ROvCZiUaxlPLaBOK4f0Nk42N6Wh4Haaz9Hl3
InRe5hKJc6YC470HiWIMtcB7+4oxRTYJuWxk9kjEZ8L2utyPO/gq8OG6q4Gc
UzOaBrT/kLpYj1fCW7kLaNqQkLtNoMw5Cro01xcbHgbAOeNzahe0KmH0wp6D
F46HIGcqZ9CFxEK42r5bnDOFgh5fiExtbj5o9u2i/LHdWTC+J2/7G4VqLFf+
u8uStxVFl5uXD52pRtnrxwvbwlWg6dS3iTyeMFzw/qxF4E/Dlyn/btvLlULf
rMHz3je52OgV/8HmeB0yKjxr7rKrxMgbnn8/0BdidUaT8Nk1d1zWj71E3eIu
2Zo3EoSaJrDve3OdxoWMvBe4bQ74ZaBQxEX27qnHsGQlP3/qdSLasn85wPml
EmoPyFZupqag/9zVXvY7ifCBiePfy9YUpPKFE3TO++PyiKz+EShC6VOsscIp
5SDYqfGnULEMXQTYeuz35cNT3HHP2y0OVwam+9leFmPg84p17at5QDFID7fy
K8CvLPaqxQ2ZcMjJDgX3tEJTJWzubS9AfdX9hwUeJENfb8HIkzvxWGzJIJn8
iIyT+QpFaQ/rgfmb2Y1zYcUw2BdF45Fehr6h5zgSVHLg+NT9X0wCodhhKPS+
7WcsCEu1cTu2ZKGJCCnC4lo5po6d/yl4vhrMLXmSJnIqUFpum9RLtQC8yc7+
RXWLoy7FxXVfSayHSx5NK8v3q/FwUdLdMddIfK/JoJZ7vQqDfhs4JubVwJqd
TNtb3hJo/NGZ4RHw//tefxWZpdNhsCJDxTo2F9+tp5eZPqqCC+3XWW4w56Ov
ufT3aw1NuNfMRem8ZSwUnEvj0ZaoA3Ovn0neTHWQ9WzaUKs9Dsds7lYUPsrE
5V4uX5J+K1rV3uJ5dyASxt7sNGAuLIXwIfFbEnpU3PF54PipXip2f6uWo1Mj
oBInZ0wXXTNcI5JMyrtK0U2WbN//qQjDxsMCR03ycOPF6RdiAiUotWw7X3Yj
FXOej0peEwqCvURT+3rzagwnmf9pMijE2EP0OQ1qMWC6flHyjloVeq/d/Zv6
nIRRN717xjWzUaQlxc0uqAiclyT86V8lYOPZ0+75W+evQ67Rc8W3GBL+k+gN
FeqEHvH8Xnr2Srxicr6i60k+Ki/apDGe7YDdfW/f/PEgoruuXLLSTCF+8jMu
5xaMwfcCB2nc3MJBZ7u1fE50NUjLTj+fu9KA6ex/xr5MZ0MdQ4mN5+NSrD5p
bzQdVAEO0erX41NDIXFKMfY9bTNac9abVu3KQ/XHopzvjtbgGYMls9WzNXBW
5c6ZU361wMp2I/f0cg7GtntVsBdE4u3bSg4bmA9t6rRGR05VQcDGJY/HQ/mQ
8qXSr/5kAdK2tClqLTwDS5aNSw4elZh+jnbhxfMU4H68GJ6KMcg6vqkFWlTs
7ds7ZvqjDP6mKLsdS0+GuHIWO2HVYDhuc4cO+YgwV5DaUjkfAlcL7pbXCkZg
13zBye9B1Rh4Zn5oYCYHNviGA1w7KKCU3NRzzqoKPbv7rt+LSEHLXWFahOFS
VDecS7i1UYCPRnvLPwtVYu+mpMxZtgCInyuI+9BfhQd9NFh5TKughjp/K+te
Dlzc9rD/T4UqPtXieB2XWAWCl9+Xjnxpgee2E7w3PAh4UH5v8PPFYrSmCv1U
VSwFrtLQpQMDJhB7+5IezZ5KaJc47Pmytg1enot9QxuaBlbpHtbRf/1wNJVf
Ztt1En55qJ+13asVXPxKeeeXMmDkb5j8jQE/XP+WyWOk+Rjb07MfGLZu8eSA
2gzTw2C4kNS+gBu1sKNi+JQwUwXQJA0v89wIgxtZpSmf1YrQf1d9VlBWIna0
S0rHDZfBqWARzQuJzbh0u/FsU6EbTN13P+ZwugV0tXc/1fnQiOornxsj2JJR
rudbuJUbokazn7Fgbhz4GC/z30+KQTpbYnMo0Q2bldl+3NIuAms8vWdCJhl3
luuFsTEUgd2d8MgW+0a8cLJKZzOgCmQ0+VottPNxZx7n13EtEvQ/p6WZbSVB
1gmenQemKHj6Xp+gkk4gfKEZqF25UYmvmc5eL9zdhLd29333oa0E+6ziPbIW
jahymCsl4rEdKr1Xo1RoBuLGP+FWJfEItKZ/8uHbOhW4PI6wRc1m406eF/eG
WcqQLMeZrupFgGsHnYVXDiDmnVsL/ffPG/lHazNTForw/Q15Q9unefi++YcZ
6zEK2JpdZGx0CQQrSiDHZFsMOs7zBRhItAP/i3xBtoIkvCx+m5Z0rBWvydxN
NRyoxTJzMbq9XzNhulNVvdzADI4ODe8L7e6GK9IyHIxbXOkuMrnG8TEdP0gM
6bY/2fIhJtcbmUPRIPrSOVvrTSueduWRz1dwQsFY9mGxnclYcWeXe1ZMM9SE
sTZ4CZZCrnTKJYkHqXhJ0Oi1+YlwUKkVeFzyUQN3hhKZ9hDJSPM3BSb3mYLA
8wffLbii4Q/9W1+G7THw1l3AcSMyA641H9DS1yfgqEJoYYxSDQTPGW+SbhFx
4waX7t5dlcCVmdktqeoKLZlOyr8aQ+GPaHeyUWIZGKfwiyRqEfEXobXTgoUE
H4asxH1LI+CkU/BzS7kq6N527MqwGxnCmWo4PAJK4fjOV5GWr+vgrbqRf7tQ
IG5bKilrsd/qiy5tfap2CF5vNb/8xD4RpDYXPu0apmCUQlvwx9xC1DGZnzNL
IEB5wlhb/UsKxmtFkmixAgJ1xD5XO1XDae2vzUFOKZBSo8eRl0MA8p4/0p15
SfjXW8fimHw1tg9xGsv9bYaOfMLgyZhiNJlN/3dZnQjKPfKZPPTZuKBi1lXc
nIz3N4adlGlD8Wj9JMtX2Sw4x+/mMfu+HjwspLzrbevhcuZjtj9MVKw/efdX
vgkRauPu/7wvGg2qIcz6TVopqCV0k7fOoQZVPJ30DHUq4QpP5srSRiDIomBL
C0MT/AKa1d2TNZgnuMBPokZgUBh/GUG3Dm/BtzNrgiRQEw1V9P1ZDJHh5+MP
+TyDh3QG/Or3YjDA+o3ng8k2jChi9SZzZULB7FbNqRWD2MM2FpftaXDwDuN2
M6NcyN433sYpTIECi90isxzhYOmTdeoXJmEJ/3Wf6MPOePKxXEyKVzlsrlft
NBOgglSX5vuS7EZgc6ndtKCYQ+cUzSvtzCDgC7Dh+z6ni2Sn2IrLca4Yct/2
ltabZOAWi8z53kWC3NUDRqnryUh+sHjr46cksBKSWDvBXoD8vWuXVr6XoOOI
3sWE8Uj8bhH1fFXYFUt+DXmONEeDSpGY3e16c0w4G+cHzVs8u/8fb+t+EkYe
mP+cEF+L/JJDJmuLRPA1N/z1IDoHmjR0HnicpMKhzefOMo+owDN0I2twOBrt
L+q9kLoSBR8iuyXmfjfDhnMVmWchBvS3vbNRk8zAjp6ByvP8FEiajhB79jAU
QoRfn3k6UQmNsnX9Y/X2YPqn289qWxnE+8Rpru9OA/Fpow/WmgRs6rk0KRsf
CQUHUo2WfuSDpk7UnwUJW+ysVP7sJBEDmWkp42fdPJDltvW98bhn4I4NUm4h
MThkovbk88NylM1Y6+pUqYdf73efeZleCU2R/KSh282QPix54oFHPnLL16cW
bu1fPr+e/r6PYZBPcO9r8KnFNL/O96pZRLhm0J5sUUxEujvh5KeBmdByU9xH
szgKbL6kf3bpzMK6B3yb57d86uYt7qVLB8ORWbn0uP6leuSq+7iNe2jLf2vK
7wSEVwK7tpLYj30hcFMwp/sDRzNayIoemA5oAjGXfisLrmqcefTvQNlJP9Cv
f83C4RwL1/gUjJti7GB7l5SjJEMKKPF+Ec2UbcKCZ/+e5qZRQTqpxZPWlQS1
JsvW/BUNaNh0pJjBqhYCDZ84Lb4rREsqf26XfyQ0Hk0XIdGQMGB4n7C2gyf8
Wkx24J7Mxgs5QfvdHzvi2jxvXPDNKuygvR2xcLUGzh1kDAx2KcA/ImrNI9lZ
uPbzME9jeBHybOaG6oVkQwp95mbxyVqYFFFYXWIsRd/AHw6MpuX4rmOHhdZX
Cnz69Nxn3SEaFA7SM80bVyDV9873nanVKOOXUq+7VI15QXas/PKteK7h+orh
SD0kMZE0qV5ZYELsl4/K98LAW8ezzAnuGLgiQ7UN2fIJilys+yFvmLsrcebi
n2IYPljpxqAWDrto6v2yugohVvOdm6YOGfh4TR5ceJMKpIGLN75sI6Np2KVT
Nedt8UO22Zv1wig8RXuP/2LdM2SUvPMzOa0IGgq9Ml/YFcIxJvpPvTFk2Ogy
mmplrwPiXLisxy1LeGtX0OscXom298xM8qrNwNZXNujdThEQSDDs18omw4uy
kIzGsBKoPXrRvoa3GQb3yLlo15bh059DYkVMBcD74shLz2N5kMcYVOFjtdWj
ao93na5Pw44xDxPkzwHLvzT7njjkoePlw6e5E9MwnaP46q+dJahe4qh7qSAf
vuT9GDjXWQhc6bwvBzfI0FJEF6TcFQuXRfB91XwYVGS/EnYeyoHVP5uZmsHR
MCBXnPS5pxYKfltaJNN7w237Yz8shepg/j8fegVhAqb90t9/x68J+5N1izzF
UnHUrNckuZyKG4/qyO+OtMM5BivrsSNUUNJ+0n94MABO8GSodezxhPtvXOdo
q4lQLhySyyuRgDlTeyML/TNRY7FwOKC2BVOrhkq0UxPA29P6tPvjVhTZo6Wy
uzwPTpz/GXhuy9+Gbi4Z3vRvRmYGxj+lt/3hu6R7wmI+FQYbe912mIQiDU3c
brMLbWAke18B1Alwkv1EytuuEpC0EXoWJJmGRpIigtMJhcCq0m+RXVcFzeae
hyvm3IBSPCX070wEXiCJf7/7swLmCyzJm7KFQKzaIsVUMlY5UXIL9jQhlvsu
HtFvBv34a8r36QygvlRe7RQxHr5o5on87nTEkuGhjnydbHzk94rL+WslmCdE
pITtiYS77twVV9jTQT/J+/ayjCbsj52UT1qqR2p/mWqOaRlK5dZ5V/3MBF6R
cXoqVwdqF16afL2rAWwHQ7VuvG/FN5IK7KeeVsKs09VQOo96bDFZMO+0rMe3
OHxIX6QR67FW/voRHSS63E1lvrTlq+VMO8oE3EHfeVhiw7gZR1QjaogPCpF1
zwnRc+06MP+txCIGi/G1PW0NYwYZ3b4a9ByOo2JJ5cSB+IhM6GVV4wuXyYX7
LQeZeW9RoOj7tcaS/kK8w3k1hn9fDjy0f5Rw3zEAA5PFxWTFC0D378CKwrtA
5NodPbhwNwL5nwg+t7+cgq+yWm/o2DQi17kqtt2kbIwsZIxIXCLC4RLyIbUn
VHB9rXZHbSMHvkbaf2iUy4IbPooS2m8y0Ov3ndaza1v8uJJ2yE7MDVvz9ZX4
MkkQ63XZwelIJWaWNRWSBOWQqfSWnfHJYmh1cvtYy5sJUvuKzp+dLMR9CgeK
BDmKoOngsRyfxSpcO911mn5iixMyH+2M2erZYalMOsbVFJAVPXUnuKwd5QzT
UmhyMpApbeO7cnE9tkcrT4hGxcPBFydycpmIYDRSNJ6p1IIvO5SNfhFiQdwq
64uk4RMs/H1WKMaJjFbdru1/zImQWKVFvcxZi2x+bLJpJ/IxmIHT08UkHURd
tBxFYgfwvdTKXdNH2Wg+nJMRORaKTZf9mC4oBqIo7WxE3clqoIuSXv9XmQvK
62ziP5QyQVmL6/TzrlwYV/sS635cGy7BsaRt1k04aDDQ0RtaDhr1Kz+Dh+JA
5dbNV8bzhaAjmLz7Xmc8Nv1n3nVyhzTcsuVkivmchfo95wU03AvgVcD+pdzO
fHibXiio/KEEDp61DLUUSYQfz+x35CeUA8suleJHKWkwYElbIibbgRhU9ekP
CxkVdxI/e1+IwtYUjj+T4WVo9mPoskh7JsQVZBzyriNi2s93ipRSEkz8VRx4
3rM1z8ygtarFB9NlJeTvZIZD/7+vrtqi5VhuK103mEQBSTKxxIaTiF+/Hbub
kkfGQwTxwt21ZBgL6Q+culOOF87kSoxKFqKXa2/cGCUNBDMiTZmqjWF/+/ij
4eIcsO+WfX74ah22/9Rd6FKrAEK2ig13jTcU7I/PDLpRA6nuL07V5rZjMwbo
fGihIvPLstM+jT74eqJBqtEvEogG2iwTVw2QnnOAd3yeABPcRnkm0nmQQ2Le
f4WdCjSHOdvmHt7G7jrtt++OUXDiMhP19nAKsN+0mz30g4oLUTtycy5TIfP9
izNTvLFgS1tw5tvhGEhKH7yXuFaNBkp1tK7SAfAniO7q7HAFdL24z9E2mIyj
K3+p6rsS0L1tVP3zrjygE/piqSNAhvm8Uisnt3R0LpNuin8Thez8Sr9ZSFv9
MfwjcX5bNvI5fMzoVKWCw3t9ZY3CIlSd/sXbUpeH+dvrKeVQh0qB20coPBV4
aOXB09waAvx06KFozDcAX8OstM2vRLA6wzZ7l5oN8TRD75Q+dkFwnhI7WTkd
EtuvvdH7ZQ5iS1O9AVIx8EKz69BDpKLr4UMtmbcjgS0gz+33FqfIJ7M282o0
wPTEIXcp+/sYX2ns3LODBNfldrI03MyGH+5nrGpdm2CLeaVPJRVhKk1vRp3k
Vt7Y/ElNy4ZA6bPU9lghQtm0ipTRv1z0ff1Q3L2qBC5fuPzW82EkJNVOr4xE
FoON9QHTHfltEFbAL72vmwxGY15/1wqjIL7ZZPLKVCD+MZzoniISIHuqfpG1
OR1n2FLJXGVEPC+sY7U+EgOlawpK249VYFstR6Lb5Tq4rzr8d76nEVK9g+ck
H7hA1k/Hw9s0/cBshHQ0uDEPBjbKhZfcSvBYvO9v8450cB3nWpeszMWBtv7c
Dd8mSOS017W92AR1xo03I/orQIdplmoYQsALtc3G/11rwRLL6vs7YkiYafRV
R/NlAjCHl5Rr+Pph+4upF/uL6+DKvZnKqkXEmwkVhKOh1Whn5jTYZ50OfLSr
7yzcszDpfmOByLVqLLZKsFherICCS+9GI6sDgcY7U0BlvgRVT97WiOTIAvqU
E+a29WQUnmqLmfWrxsunpx+/31OGRALz5PHfxTjAFjtSczULC7yUm475UGH4
7PQX8q9i3GFmNlTAl4C0zLxjNgOREERjFK8zmAeaNw5YJ0nHoU2kxxk63VSI
mnlRaMGeAy/JPUuTSQ3goPvwXKh0EqhxjYYLPbfG4OkrneucxXhIRrOKGkxE
b5obETt05KFuQn3GRJMKfC4JP3nPEfFTAssxq+oi/FGjwiL1igAaPVUl5kIu
2CboykreSMT+1eAX6eaV8LO/TWNAtB71Yie6DTy1gSHRd5eKfAqy8LStdKpl
43D0G69rSkRoFkh74qVfCXF7/jrvCsnApiMDRk91c7GC1mB/qV0Yng7njGeg
ZKOShlHXC+4SIM/2aDXnVELk9xAxzTYf1KZ7XXdsXysE956nnLaIB3/OtO1z
CUTQ0l1QvqxLAZ+v5keukiMhsPCyIVdpLxy1Kop+t0LCe09qLnT9145Pzr+q
JQcSwbKdpspwNgEYvs2QWWRzoT9SqNArZIvX2hXHjN82bqHGSGRUQRIMm9k1
HzStA+9n4ssqP87A2MW6Gq0jtthxN/z3OHcEaFyZ2zlTmYOMNW33o63KgXFJ
8VCkahXqCpBG1TiqId6GzWOkrAA+RbCd3bvUACrGMnXpSZVY9/MC1/hqAW7W
sT59sFEN7oodxh89CtBm6kNb7loctItw9dFwE4G1tETojnwesu5Xsrf9Vw3v
Oy7SRTkFo9Wz73dyFSswISBfYzmyFC+2jMnpnm0E/50f7fle5EIw/a3vahaN
qLPP80oLGwWIGfyfJgfz8YnQZudwZjPenrndeHFXFua8Cf5JsxSD893WAfw9
JKzqex8ixIlAw9QU1pRsDSveYmoiSe3Y/4RT1LQ8Cw03UocCDjQBxfBB0f3X
zdh4VHf43LNasPSz+n7AqBm75FasosvqUVbrIbBbh2KdGqWlTjsNTL6t+8q6
tYKBn3TN1QOVWO/tf/izaBXsrZPrmvUNhFNJdWv/HYjFt6bkKknhPByu7v1e
KZQE0+eyFG32RWFpzWj4YyxBJpp18bxt+VCk27BydU8tNH4/9PHjIgl5Pn0+
/VbMCPlX2XjPXwgEjvsuxBg5b4yUFnPxLnOEecZFvsQ73tDN6CrQy+0LN/8y
5Tgt+sEzLnuRrEcl6HTecYXetA05tj/1U9IqBGsBBQ2ntWR4MKVPpRaV4vwc
k8OsZDFyZBG0ShkaMf8dh6+kYzYK1TJXdurF4pg4d4/W0SDM61rosXDowhmn
w57nRVNgjp/re4J9E+4MKiqY5qbCiYCFdEVqKWT0zu4eVW8CO92LyoJ3KqFo
53aOx9PF+CH239nNo7nIOTS91uRajQylz4c4DpZjPQ+nvFdfHq5MXT++uq0W
Dzf9tFGLqsLeKHgifyEX76UM2fFsb8LTdUEXVFSeALP17a+ChqlwsHqEpqso
Fu7vp5U7e7wKc7LeZdWLkzGWO/R7l3EFjAi5VEvcIcK0ZY7wm1V9SE7QYtfW
7gA3mot9j1Ty0LW2gqCvmIlXLj9bO9EYCHtHidyrBilIcLh2p7U3Hp9UltPs
6EmErCndMwTaJjj8KW5nrnM8DID24DUKCe+mvrD6z8sTDggwdB5xDgFW2cjz
iuPJ+P3jw9o220wYd06KzTYJgW87dIgFywH44IwXoyhPK0JdsPbx5xRIvLqn
v86wBHR3dxyZpWuEXbs5Oa9s8Q190dkArbJKpG8vYI18Kgk8Pe+TvfYk4qWB
AFLgRh3Q3OOl/+u7JHHEmV3klTZC4udShZu9GZjQuapY3EQC/fXRY3xBkvDH
0UlO8mgwyDhczKP4E4FQcugtKTYX5Lw1y6P5QtH4tGImx6gz0kjljpxWSoHH
TEW0YvlNKMJIVVLIqUe28dl1KeMmPOcx8k/v8TOYpFOZ/STvj58Ch92FTPzg
cGiqC+WpHey0mN7f4ZCI86EvFBMVyXhc+91MZG8DcgTlWLCWEiA825Vj9k4w
THSd/H3bqBbH1idNbAFx+2Sy2QupUJSZO3qQdpYEyfwktj0B+VDfN3c+j64K
uxpSBj+52oGOX/vXDNp8aHr6m/XGcUUYp+6Xl58ugG5Wxs2J8XK0OPMf5WFk
PfoaWcr2sbmBo0S5wGNK7v/3gcMuyRkm0pJjWGWSseWoRqSLJhX5rUR+85hS
8YfzoL2fWtnWOpQrhOfNoJg77/ZHgy1uuHnU/GQfEQb5XKTqvuehs5I449tf
FThX+IWknBiETNFZFZKJzVCRca+LJ6ASxCP19a405WLClL7KT8VCZBS6vqNc
oRpl63+N/N5Pxfhjg0JnVtWgKFzwYlFBBjYahtAElVRiY1Nw9s8POeBN+HFO
M1cb1du8D+6scsMA17Yq8sN4EOtirNTroaByK8vzZyJU4Fhd3vGbKQ7yA2Jk
jc/m4z1ZcSVRx2Sw3tjfc7utFQeELq+8P5ONsRM9k/s8t/im84DOTd4C1O8O
fvy0NBH265wZTvpTCI5PniRoVqShzozKP1bbaLilnGwQv1qDTUVF76Xv5aBw
g/CPh5+omGQYaiA5mQDsKeECfjsywZQa8mD0XhcUmCWuLX5rwPkjjOactplI
V/BKaec0FfyfMYQ8ZowDu/MNH3L2lUCiMoMGp0AVaq1yWGJJNhze46iXs6cU
/G/PPT75oxnSN8Ol7p2ohsfegxl9nAngUH9625e7OTi5V+lYwhsSGt4LHaDd
CMII+5jz+5QpMKCaG35lnzI2Z37Q/5JXj4bHL9zj2BOLCtQ1bT1aY5xWG/j4
xTANLbZtBvncpaCzX/mAsEEuXMrw9lIJ9cMrD+3yLWlJGFV99ufn4iwU2Fhf
tDMhALvOPSY/xQic3gnNoen+sONjSW7tTSoWOdyZ5vibAd3f7x5/FhcCR8eE
eTJyqyCua5iZactjeFIkfw6HpeLiwneZ48+qIVelwP/6jVowoLMwe9uRhWNL
Pouk/Hzkle7JZ5eNxaUWhfLwR4mIpJtHQy8QQTqTcacFuR53lcTvZH+cAjRC
E8ncBzJx4WgoqU4kC9Zjd9aENmai+3RjV9+fGuQiU/qW/JwxivY17Z17oWjH
peGUeLcIevrHnvpfSsUFD6vttU1VcDb+guHC5Wp49yixdyYpGSd7WnRE+DKx
nXfX4UGbVLgovXiVIyQLrn784caznQijAlri8nxlMHZnOaifkwrrcirrb00y
4cGF7XM+BwuAg0ni/EZFHGh0Jroo7swDfyWnV6m7qjEl22L0+Nb33/qnxZ2W
mA0y46t8es7FwElcZ1qoz0RegmDeU0IzdgYFTT5aKYICi9mk7wvZyJluOpjv
3Y2izoy3yHOZWHxhj0Yw4xa3tpw6dJGjFkaIN1y5dYrR9xX1b0l1Mx787C6S
29OKWgZXbh9uDoLj93/VlXn4485So3NGQjl4daTiQwfzU8zcx9JD698KvVLH
7tRiAfqKsOy104+HRWuj3x6jFPDoSqs7V5yIwrz+gXM5uUB4e2WJ8iASDFub
HuRfQzRT2ZR4o1+JYQM13+NEmtDZgsYh+kwD5LN+C5rxzEaJZa48D5oY8Kob
O3GHLRxnBltuffIqg+Oadgcrj5NQhK+yXXQ8F4LEBZlzPlRgctTCpPr9JuB7
Y+xHsCyF1pUbf8au5mFk/aVLM045WFoZYzMvXwuEp+8uLpGbgW7vm1106WRY
vzD3KHw1ELleiX7bIU1Au0rRKUZ+IvifPrD8Zy0OdVRtO8xcW8DIm7yg+4qA
+XKCg4YyIbir2C/lqut9pBuP+LY8rQ6rVzks+8TDMfLVJXr0MYDILj270dl8
7BMJySQl5cOHr7ZG11TJeI2fzSSWoQpHH3It9jMnwGcV409vSOVAboeHhpJx
oO8kQaj81Agnu5N6mb4Zgz7NYOtQQib8Gas/5N9VBrxyrD09A+lwV0o+V7OE
gnvDXs8c3FOI1+/oBuRgCoo8EhcjX3WCudiBr0Pfy3G/n9+X3g/V0H8gYvIK
ZzH0fH594fyebNAgufwbbCnEI9ExSsqx+RjSnSPcsBiNm4Pl9Q6/yOBtoltM
E9oFuc/792rkbfGLqIPs2ykSuF2wZaVPL8Kixj0Je06WwXT1rx+tAc1gUE5H
Gm6OxmOcJT1Z4Ukgnqu1PJMaBDvEdp8t3F8KnpcynCuc3SE+tGH42UUSSvgN
n3inU4DdzywZz0xXgM/rufPXrGrxorDtNs7qZ2ij/Ijh6M4anOOMzHVuz4N1
3YzlhR8J8PX69LUDPKnQLaF6rFQ4B9X0zloSnCqAwennUO/fPBw33yXRdKsd
jOH9m4+MiThq1zw18jUX3fdPaRn7tQJHR/6X289dcOcfw973vRT4Vfkr9ElA
OcxFBHd6vbKF9sfVP7cnF2NujPNNu6ZofHTh/nJYZx2sSVzVdltPAEeKwn/s
WdWwtofw22qxHvkPMQ+/9CmDsM9Ds4pOZJT3eZzv7lmN27G4iCszBgenIuJH
TlThG4Endh7dOUDTwxnd54dQJuaxd7aFAqWSqSfTH5RAu+HY5X8qhchMUxpY
ItiEvtkWzG+iS+DQhRTPvJUopCTMZb4sbMUh26jxusUkrOVTvKe/mg5Sr7uU
1aazYJe0Yu2OgFSM9S+hkIob0VbkzN4cWh/8wxBoyNKQhD8ZSqtoPqWBUzk5
jVvRCQgSnKwWcZGwfqK5p3wkBk8zEC5v442AuuF7e7ONmzE/taXS4mUTtDRe
yFnmbkbqft++IpYA0BkTjSveqMEfBve70lsrMGzzioiQfglQiAe+LtuS4W8s
B/cnuzzg1a/vz8ophks/nYTkF8Kx8IGuF990IajPWT6oukzAtgLB6tsfI+EM
i7JQ1DIF1Z/VV67SVGDO2Ss2pNl4ZJD3+1GgEQXKatbqnsfJ2Fm/KnVm1zO4
t3Ra8tWxJvQO21XFtWgBqx1WZvN5OZh57fF2vYQaCDWQDr55zA//M7O+ouBd
gzNa1v5x+0PRQTHZxVwiCKrW/G+TFyOReJ62fC3DCMS09XQMDBuh+1rr6/wt
DrC9cn38rqMfCjkmFPscK4R8zWABFehCNrP1TyyMzbD3w2e/jK2TNrhz89Ff
1mBguEX3n8g1KjixGJg+2uLQDnH9r/dPNuLrqrr3TklbPT/0MPLtT90tj2Cm
cHwqg9iflfcCaEvx9sv+lFvHEF0elF4y8MiBklOJORxPiMDi45NMP1gOgktm
Dw7KFYHI4ze8X867gnrZmfZ02gqYOGzy52KiH65FLraK06fi/W0lA+wB/jBR
09bUf7sQlNTaeiu+5kCizL+mviZvOCv7U6+BLgv+hO17zWvmi7x3Tntwi3VA
XF6bwfeFangjuTr38XkLctZyxp3tqULBFFX/nWtkeJ0CPjqLdTB3OWzE83oR
GItULt+2KIOnuQ8tIkdLgdPkdFkhZyMalPWlL1YQ8SZppUHeLA9fX5PUNqSm
o4cT9fBGKAG8Uns2hjWzYbzqhcOJ/irQsp+Mmkw3w9viuw4b5ZLgvfXCg/NA
xI0xmgQ99woINH/6NVs2Ey4XVjqYsmbggtuE1jlJF+Qccy1muRePP6WqFj/x
UoDnxOP/dvwLwLWzpxtsbhaD7Qu/J2s0Nig8wbQzOCIGt+VE64wl2aKQ0buZ
FLlcmL3xH79QUhgQN1gM3aq2el/FhCKR0QGDHdEZZvsoeE+vjWy87I+qmMSj
RqyD/dpunMn/FSG95vzVVGkK/nqkFHD3WR5+Cjgw3h1cBFwHI+dTxorxXqzn
un9QOWgF3PJS+RAJQ7a3jp1nicEb69sFJ7bV4IKgRs5HqjP8ujnK895OBv/j
XmI4lvgMRkJMQ959C4ODqqqh90STgHl4B1tJrBMO0f14FtZaCjvcmoeL1qPR
x7Aoju0dBVaft+ruUyPBzEljNvjgDbuTR9nZtaPxirC+v3pVFvJrH5hZkkZI
SftGf+5AMfYOSkh8d2xHJmFzHwU9EvZru2a+9KyAN+Rdg4XGcRA3OtHS7NYE
qvbzKvorVXh3WlBd/EEWsDKz7eeaIEJZDt1PDsZmTBvKfftrqAPaXp32+y+w
HOkHTt241RuHHUnSzHuuZ+EseeNW579m3FVr1/xiey540oxcPF7Tg4LHFn8s
tmTgzRU9T/Aj4cEOLeK/rhRIluXiq36RDkYjZ4sKeiqA2BDDMFOcCnXKx2fO
T6bj/B72YAbBMozVC5FPehALz0Sf6IX6F6C/6HR60PYyHBySrOF+mAye7GcZ
gjmiUeHLMw1t2iAILlYUvnQwGT8YUEMzTlFhbCaWTZGbCAEu9PsVW5qxe+pD
mO1GDiww1hFaxutgoXXf39l0Ilg2HkgsV2mD+ooj/rqXi/Dm83J7h11bvK36
iWnXJhVXrEnkl39zgD/4cMlX1XA47FMsr0+8hd0tqudqpkuAZvvdAz3Lz+FA
qtezYJMItPuhcuvXnUIMjo9482izCs/zX9Pbp1QCrUtGYkMi0RiozJj3jdsN
GpueMAY3bPXJdYqR6e/HmMgTaFYwE4W/Xk7eizhagzSOTNoDSheBr3easGEZ
Au2ZLz8uhqRA5Sr7t28VVdBxqBB/BYVA8Mfk7bv3xkCtCWuIdXEJhM8mxwaT
K3D9N8cBb72ncPSJWAKerYDx6+WD++RjQNwzQm1ItQY8ReM5LJQqkF+Im2zI
SASblyzbq5QrUCqbwSt7MhZY1tW/rDNHY2L5q3Nf5ZKRTq0w3Sy5CDZqbn+v
EgiBgruVAR7zaSB14HdNthwZq8/acCnuzEHDbnO5netlSBN64yW54wIomW/U
yuuUwJwpM8vNSAqu5zhzKfNlgSy3fuv5ZCKufqIfG10j4QmuOieF8RScx/ig
7a4NYOHG2fTWPg4OTey34zOrgaD1wG6NykqUafr13a2iEDOddbiEXW+hqpzE
nf6PeVjPZvr5zb04lC2cPmXuVwXaTFm+3h+ycGBbcUvVtmogukuI5bJ54OOH
y/+5JhfhOv9tctMhMvzaKOA9SmoGl0ba63ZBCZDKMtHyXr4CGHn/klayi/Fm
tsWgDGMr8kj4i9YsVuHL63a/0+haMHPgZPeLkyQQ+0DVlhzMRz+H8OPs6vFQ
8zY57lsR4o1bmXRFbCdh8Y+U8/QAFW/GVrjxZIQiw9WUsWyLGtipoMBZhzVg
V/xIZ9vLUCjgqAlXmPCAZTX2xdcLJdC0MVN95Wg1SgjUnf8h4AA7ky6a/TqR
Aiwl4jIy6iXonU9j8FBoyxc5VvnMr/yf65UaKEeroCJQNSjpIwEODtUeWXxN
Qrvox5S4VQposRomB3iZwoTQs08fE6phyrxMdfZYETpvz/c0XfVFSdOkPRWp
JLyBHVdy4h+j29VHGbz3SDi889NxlrRm7H10OezHtixM0FksOS+Tj3Ra42Ge
qaF4bd9p5YK/Zeh+fvOI+O5oGA8uXtfPiUbvxt5TnN1RkP6mWtdYsBUcDYJV
Pt0mY8z2L0t3JZvAnfbXoONjAlZ9Kw8IUu3DyCaDV9ZtgaD08bL6sjwFO3ZH
LqzyZ8GK2sSigpgL9Defzk1wLIaibukHXr8rwTy6mLwQi0BzfxKrB6XgpWaf
w/2KLCTz+rsOvWiFU7IeMk8fVaBbN28D05dcVF+4YnTBpBJEVMsPVQdEYSqt
mcuH75EwI7BJX1ecjLXBtwronydBk9hfk0X/GoxqS52zn8oFhQvqCRunHLGg
cT9zQHE9MIuJC/2I3fKd/9Z/crrYg4cDa+HKEQqctR05teNtKdLQz1jTlewG
4jxB6rVlMJT1iXMGqBQBTW7jAvfXBJxWpzFjUM/HGWOv7JypCPCb2lbu1ZMJ
slqLBKFTJniyT9t3RqoJ7LQfG/x7HwfT3lnVTc8MUOH1EX6KXAuIjtofearf
DLSezUe/X6tEpd/0duzWW5xQOp4XEOiLDwcNjVdG7IH5juXkOrkIf9W8bN1u
i8jjNvVO8S8VQsN1sjkG03C3LNmFSaAcC9tyq82+EeDmervzeh4BRl1aW8sI
W/NOgqXEu4qIiemMNv+8ovHu+p3B6jACeFfErVAsnwLjbu/4fQV10GYlI7RX
JgnekZSO7TuOUCF941f6NSI6pVzf9ZsBQcfh7mCzwRb3bXdfblIvQ/ZfRyu5
uQtgHvPyfqr3IyuDKPHrGTM4u/mfk36iOX6quFFUIBGAh8PTG1klIyFde3Xq
XVUaCnM/oCSbVeIb6bY0e9NolGFSnJfQqYRfglFMzLejwaBwk3fv3jxc2R+s
MCibg6Kv9r1wYSjEedmQb54KHVhP07VHr8UQp2gE3o2YNOJuliNvCfwVaPlZ
MVP1dB7QLv1hvrRQCY/P39kUe1SHcr/SW/LkG0E04VJq/Zcw1PgoZKSxkIT/
XproxC6S0PThLfP/Hjigru1YH41iKXrW8XrQXCxAdUZzl71JTTi8r0giYakE
Rs60fPY3yEOn2utx7ZuNOHDxpEBmpRE4/AufcefOxTbe/cY2TxrQm/XYl20X
FMGTrk3qwLUStF5hvclvWYAupJMF8+YEIM7tGU+yqwSl3vuFr9xSUWSZbemQ
cTKO111Y7Mgk4Q79J42iBzORuM3A0mNPMxZcpj3zdK8vtq2ZeEuHVSFVvFZz
8VYiyo68XGMaJeDVU5H3HhqR4eWNvs/Djo54pcqppSIqEO1KvyZHnnDBC7cv
Xj/JlA5PM5lPChyOwSefrxI2DmRi4tM3/8x3kFCWm7Zgl04wjgXur/u+LwV9
PmoWXr5dBocf/2kOPO4Kjnc2R/JZWkFesNLqxOtsPFS419tNNxG0h3/k7HtH
RJ4yUGseiATcOSa1KNeIxLJUIYwtA5YxpvgTAaGQMxqidr6aAhtc1aPsJ4ph
eiFr/NJsITZe+qv+V7MMmi58PndsMAQe9xEfiMlmIXVyD0dMeTE+ONPqMVVc
Aexl6UvWHR0oINUWoZkShd9Dq8tQsRqcvQJFd57LgWlaY43L0iTk9RPQipzo
wW801SvXOmrx3VmDZ3/0CHiSIbD09KMM+PSlTZ75ai4MeKU2zJ53Qp27fUvr
A0XQKROwUL2V83taA0xB0zHwl19Vhbm7GdJkkw/oM9dCBpfiW5rAVGh5NVfE
9SIeJhhmhb9KpgP583E2GRoyKkx9WsDsICwMGLFzLyoDmY9joTRb77HrMTjB
lZIOIW9dTfb7m2NyJEVQphaxg3lB2Lk5Gdl2px+m/5ENh/s3fgrRx0D3U8ui
6sYGWFempSwotcJpyoRWT7o/ntSrD1yrLASTL+xM6meyUPuXYtLT4QaI7S95
v/ewF1Rsqzv67epWXvultZkaKNBEZ7AzMLENMtMYo318nXCHX9N6inoe3Jcd
ulf2Nhte/LWiF1ovhrnej9qMck/hybhXh4xmDXrzjF+m87JDwfNPFx/bW2FA
pdis3KsWuHTv04v917NAO456WoZnq1+OixzT2Jqrwccjeos2y6Az7+TTQYUk
2N+h3b9nBxn/u5OzLnG1HrMZZg34TRqBznKohe45EY2EK9VHErb+15g+0+Wb
uni4aaHQ7xEFgxInubTN0sC/+3C6TB4Jy4gtrZ+PVCIvX3TnuEEOjMgsW9fS
JaGzU+GuBTFbpBZ0pob3PQHDrG03TLTqgPH4Ox6h9w7wsvrv6h9shk6PDzET
WAhn66yFPkoVQbzsHlf9Zie8aPm2jiO9GpnyOHUJdwnwsH+x7bdUHhJWiZLE
F9X4Y8WJMpFbimOpBxI0nAjoTs/qE5+Vii8PbadnnIxB/x3yNWzqfhDaM9Tz
qLkWFFtF7IsEctD67dyHKyxECOx4QtASK4Pxp2TmfB0i/n3kfT28uBifqXk+
fytZiA5+R99vQh2uMbS9XoytAFfhn0FphQSMiIhpI6eEwj8fzt2uzM5IPFC/
19KCjG8Uzpx3BAo4id/9e/cXAY1reLpOapBg+7d3wpdmo/Cyo2fPrS1fl3fq
aPN/EwknmAQ4zfdGoHzgwIyxaT1sl/QUNPdNhPzsMYELEkRYazzlX3s3EVaC
36380S7HDWlm2eZLeeBLMUw8HVEBTGd+Fu58GAVuESa1XhZF+I5BaUw2rBPJ
+kdfn7ENBoFfXg6CdbUYtm2JMDeTgSVhfzrPD9Whc0OP7ujDZ9jTND4lq9EL
BYeamh6Gl6LI0oveySpzaGB+EhAiSMEoYxMbbqMGeJVueEahPBdMtDryfdUp
QNg8+YlkV4WsVlJdp94+hajMhwwxhzuAzF76uPyVF0aKjRhNpjWgpKHiRsyb
fOA68fHvPuU42MU8SWbmKABDNUbLkY37UHE/KOqRFhVulqP9h5NtMGScEmSr
kg6Cr5/JtIwS8X8UnHk4VG8bx5UlpeyJRAqhJKFoc1dkKSlbUpIQJSQJ2fd9
33fDWMY+Y8bY3cgWIkuSFkuSFlKEpJ/X+9dc1/lrzrmf5/v9fK5znWeEisOq
zfVgVb+S8cmCgt7uhb3z1xFFl1QVJo2KsbY9VC7+fTGsxziMLWyPBsczH/6V
mGbgwj7J1BVqAFTnCXoMLyWiotetOeNqCl7/MCZ13yQZX5YtEG6+pODwsyeb
smbioOdcyvpVWgWm63oxlMsH4F0Ogd0s91NQ8YFfmJNDIqz8eQMtV+moeKnl
a65JBV5YvKssdaYalA6lFZ0czUZGx/L5w5CP7/SEqKKnc2Eww/1htkQBtH+f
+PuyrQTFZYiviwVKoVe9/u72bjJcC7vdTd1SCQmqBjJql/JwG6cYz6V2KpJb
dI7vKckH41gifdqBAKf3fBgOe+iMJ3UGDDSmCfDf/etz9Xfqgf+s/ELnkyyY
Ff47ZKEWDh/ks5/fS6VBrPPiv94D5Rhom89qUJsBOkMKO/kS6zC/qmybUFgB
zjN6xDU7PYFXuGvPyVcNQHa7oR1QSIM9DIOXJ5fJ4Cokavw0ohVjB8VchSpq
4bv5vh9Dt4vh358vPrcJJHA1urP78uY8HAoF+uSLfPDcK5jlJP8Yezr4Hj1t
CoLJHN62X+EI04uvjpwqjgRSyrHmDiYabtv26bJYWTbMethta/tDhxd28ass
Z+jYGSwU60NNhJylK8ZXu0px9t9Rk4zZMhQflm0oGO6AgMmmVdMLFPCIujOx
b2cbtiv3e69yluKfPJmqGX7EgLnTOZm3m9Hp6zdCxxwVqlefb/lFi8fLP4VX
eQqaYDXsYkrMtib0LuMq0JG6hEp79A1CPpKQ8zfvUaA1wECJEYO4KgmoaKJK
fF4H99jPmQ4FFAOfJt9ewevRQJINvCdnEgB72oPqpE5X4euzNsel06tw4NVH
wuuPAbBz9A2P6LsqdGBheXGChwx3pCb7HWzyQOnK2HBGMAUe3yhLUrJtAu/D
IxcSndUg/R0bPeF3Hky+v25E+hGGvZSMgaTvjyFqWXR/jy8ZrYkAzGJhOEgy
j+OcjMO3TwXFI7ILwIn3uNmUWQOOjTWK7q1NBs/KL9qhEVmwpTCg4q9mOgZb
+FWRubLRvUZ8RlsiD5/dPtgmdqMQvRpNonRyq3GIw9UqOtwPJtNaPypylyLH
YeXqDz9KcGh8gpWUYo9HjXw37ROkIF+zQVLopmQ4IRgn0xyTi4RYR7uZvmoI
ZTeUsUun4dnCfKUKl3tokqzxfb9gAMxvN7szlpMNL/8Tlk85ngKP2MYV/+76
/3fMg2drn9/EWT0VrZ1xucB2bv1tuWwcpqgf+r4uSYGD31JY16+lI/3r1qht
0hu8fSz+uI5UMgRFONXmbyUCc7Wcb+ALApZFMDKd/tgA4sVzA8LzaTDlql36
Q7MCuDynxYs2keDnka/dzzm6cPRir/wJnTsgN3hSRLCABHpHzgRclG0F16tS
whxNCcjy2+Ag2sWCPXnG5OC5GowwqPOsONmCvI73vdMl2sCdX+TTH2o5Vij1
XufSroS35tnKMhgOZoqi7HG+2Zhs/oiS75oIruUNP5XjMnA5Z+oZgxQNurmu
Dg1rZeL6OWpm+J4KXJilj3LTI+E6q6GeaxsNMq/uvqbgnQPvg3jPHjtGBP8+
voThpw2olCr+RbzYA+KzfQXPHW5HOUWzJgMkQqvUtdkUehX+2xpL66PUo82i
aMX73xv9f1bruEq1Py6OOQXJ3MjFn42GB/qaqqE35Kxrq2cyvrrBWuh9vxL+
GziTrSlfBaE6935o7KbAmQ7538RbFTiUm7z5eVoRmDXHv/NzpaJchke+xkQx
eCXR9Pt4vYDfziaSxSMQYpsDlo07WjdyPStpNKcOW+IYTpvfKcdN08l9D4VD
QMwoub1X3RtcAp5E2AY34fnvBw5t+l6JEoZSo0MhdHijKu31KDUPAz+nUM9V
p0L7YVLnDccgmA43SuyfjceSzYNskgaJ8NjUd5nyOhk6WfPUCiKoOMNmIbFd
qgLyCesiaYercM/eov+yjpEgnaC1emmPO4Zu7lkd/hUPO5lCjtYaZePlyEH3
mZcVmNFlf4x7jIb1Y/Vtj54kYjVRpFtItQQYlHXS/jmUw4NR3RESBMOHj4Fu
ss8TcIG9hJKtH4Uv46wYbGPdoIXhzabjPwthM2+PRdFILdCOMkdGjpXCyVMq
J6wnK8Be+g61aKwAg62Onudi2fBVPheNi7wEvEbVChmSIuNbg4oL6hs8OVWc
uUK9mwvW45Yh+XzlKLntrsRXByKMmXH1XdKhghudt/vdYCiKpJs4ZL25jvHS
CQfbeSioOPvd+WV0GkKBu3zR5Vac1d0aQBzZmLO+xD5G8STYThi5X89Ahymt
StrVpGzY+f6xp8CtYnjE9cOO/pcOqckztZqDEVhZXrA2lu2DfNbVhlPGRCw2
tQnJbuwGJmFOuqhNJyzHmBuyPs2BFurV4O8beSrLHjPEKBMFZ2049TP+f27S
xxTdzeI1cFq04vLbQ/bIN23rP/AwAkW46h59tYqBX+4VIbveVsMDxYnDynOV
OOuyVZVygoiK6ifOf9iZhidF29K/yDRDtbDBdlXnPGx9toXItJyJ3LeJhhkm
MUgr+vdJtboUfs/J6l/ekQbDfUu2PhxU9GYXnNcrj4dHt/jfzPH7geU6C6GM
j4ykPzwoVBONHO9FI18II2xdTGMgJZZCyCbSVrfIUph+bOO5g9aCU5G114SG
02Du8Le5+2EIzBn2UzpCJRBRve9wA28V2g8J9HS+ysFvg/GKs5LNkHU7K+2E
HqJ3dqfA2/XH8Mtr+vIxj2ZIyNgtc0m7AG7s2J48spcEkhPa+qPPboO/zKfi
ltlnoH61R2CttRJW5CWUb8lloejKW0H1t3Q8fpGxNDmHiLbC3besE5txIPKw
et+NIlRF8+0MU7mo9Wn/dx2JFHAva0s+w1kMQ/Ek76kLBbAtvW+mFBvQKZyr
kHqiELIV7ibPk9Ohq5nTy6a2Bs8x8++STS1E47Zh3ZBVOhS+TxiI2BqDRSyM
C/Vrtpg7yKqSq9AE/FNhmq9+5+HmKWGPlFAqMuWeV/qpnQcXo60eOcWXo2vi
TaNMHxssFPjL98YnG6ofyt2s60lFud1vq0v3UrDjqO+xnm0peFlua2BJdACu
pGmzT6waw/xyTj3rRi7zvTDiTaihQ90zRvXOxUpQQvnjbteu4YDN0AGJ7yTY
9ZLvU0t4Nig89a7kGquBTh6/P6Ua/liX53VYOiAdxTD2qldHBLRmf8xVuOkP
73q//DDiT8dHfYxHr/MVgXbJU1+9I6WgHVetMZdOB6bKjuV+v1JobY64xjIY
jQ6T+XJbGHPw6HgGpamfio6R7vt3XsmDtcCrCodeNeLa4o4bvTMtaMHxsNN7
IgVMI3iWGHoqYUwtS7BnrAq/mPjd02Yqhvtfd5uIccWDSc1erU1VNbDNqKV1
sx4dNMzj779azELO0EdqYU9L4V+9btapMhIQ9src53tfBRZpyQ8SjiShwjpT
iOP2jXX1W9Je6QoZOk7tmqPerAc9ucYXCqdoyFWb9C//dgIoURgy/UsysPnv
PinyUD6WaCo2Nt0tR/Uf0bEXnlFAsMFHJUmiBNxCsrkNZAMhWOdHtbGbBSim
P1Y37ymHL2+3BfLIkiHCNSTm486X8OtI4nMnvQC8lf9yUfxAGibmSotmbs+B
FPkpqw7pbDipeCbXkpSAH7ppuX+uBaKDtJ4Wy510EKmK3r6tIxtS/0qj+AoZ
3lj0RXEWECHvIrvhwd9JMG5yd8+9v62otcrnVu7uA/oxfpYPRpqRj7LLgFGa
hvJ3OT26nxZDzmEj1/uHCBDF7/de1bMWWKYEog0WytCxMNiaeTwILeyOjuwv
LMbox21rJSdO4y99kQK3QxQI9q4mnXqSgjI7pG4+OliNDPt2yq93nwThz68t
BAKd8d+NoVbG0EqMrjzTPDFBRc9t0Up1G3we+/PksepOIl6aTS5nfhUBsfpq
ayNsQUjT2DviKF2BwoKn7Ofv++KkXwh1zI6ALezXvow65ECJ5hGWH8UhYOTa
7fDu2jPsl1C4HMleAbECOnoGJYX4r+POerh4EjJ0CUceYc3B1wsn2DhcK0C7
w56qJZaAxg5GVO1bUTAVSuAc1c3Eclf/4OkjZXiebPwvwLAac1d2E/f01+JK
LtbL9XvDB6P+b5Ye5bAqbhl/dX8sTBE/0F4c9sEs4yrin4hKMGT2OVn2hA6y
g1lKHufT8dbiK8bB9zQcFw+23rSXDteULD/tScxEs6659WoKFXP/HhtgDm1G
/crX6VQqDUradUxZsqPQjtClMGtYhsPGX/99uhQGFiYesfd/hiCvknS46RkS
tgr+NBx/mQB4c3ruhnAj4IcKsyzxShRV2XeKm4GMxSJFvGyaTfjnJhf1yBIB
ZfL/KWx1I8Px85Zl43tzwSFgodmWjQTRfeYr8YRyOEtdEo6IOQrvVgVj/1qX
46e9F78UvciEA7uOXzE7HoqqwW/dPulScaH5qcNNPR+kedcIj1c0ogwPj8jt
qGY8cX3eZPNkPsguk8bq6s1Bmpc5LGqCju0cd4QagjuxkFz+blU/CwRdU6GF
jQrrYSnOm+cr0KuhjqgZXwxbY54IpJHiMHGXi8yL6mgMOvYbCo5R8a2Q4lZu
6sa6n7xY5RRKQSoxTXiXVgHQL6sqsr+vBYJUFZPMXyv49Dh790hGIQ7wmZ/W
CSai8rd4RdEvJHRadxQ+BK4YcOpLLUUmH1iXDo5WdznAVTPepDRPOuYfX/Mc
qKFCX/OHY0rCzXhu4ZGGfEkkzqp0RwTeS4VuzWQqO08rQvD4Tw2LLFx0r37Q
nUHBnbJ/95xoIeHBHwM6S383fjc//suuRkeJxxX3PzjQsItwwVsp6CFUq7TZ
Nu2nAxunZ9X4UBV8/GhweKGuCNO823uJPqUYQ1EVWq2uQensGcZvY+ngeUt3
om5TCeb63OgR7yzGF1Ph/sPXErDW83wnv2kJhhev/2zqJuEztcmZkO1x2B6y
kMj1Jx69L/lr/TV/gj1R/iK8W5qw3e/GgRPlBWBRIsYi/YCMf5J767nOlEKf
zpW/VSwFIHc7L/VGOB3tBQyFGbZGIae+33eFZCKIqGZdtv9TDq1mD0ktQmVo
e6bDnv1bIeQHh9NPXaFhBmm1clGDBtNgUaXgWwW/0ueYOndn4qep5CqCQAI8
ZtMpddyVh+x4/8F8kBVMHKIzWV3PwIcPtkaM6zVh/ov0CZ/SKvCs7bl/KSMH
DsoUD92LLsBjVddS+nUTofXH0Uy+TjL+u8D7jPFQMnA6vjX/72ksbovA11lP
S1HNMKS6co0Opib+elwxwbiLZfPP97dS4Sxh7LL3Rh52uYjmsl/3htjR7TVd
T4rgvwPTsU4cPTiUzJxEEnMCpX2TV1oW8rBvL6dZrwsNrcNfD2RPUnD6nvdu
o8E0bJfdHVVrSMTM16pND5jzQHsL3W/nnko8k8o+UrGUiR5Mipp/dj/BcJlG
jxrUgX2e3U3a+0pBvYabQ8ClChfT6maGTMJR3WQ5W6q7AlYXEpyIB1JgON1H
L3IpGDM7ClTTXsSA7FHu460P2vDvomjD+YtUfOPvU0RZb4D3er8Nx/5lw/tU
jepB5kJoD5+r7VgLR+P6XJYK4yps3L6s+L6xDh26xOaqLhcC861QZWW/atAK
FSjsierA7ZORhDJfX2CiPuE6diEDmQLOvXdbiQajyRsnTkmS8W+AJ3V0PhYT
s77yZ6UXQ5OX7Cel3AC4Zu66O3GwGb5eEfFSKiLgqd+LBmaP8/AW7Thr+iQJ
73Jz/vTpTwO2F6ay9GsxmP1mevaWVigyHS0w06MWY/7JX2sm12rAO9mrRjS/
GCsIn6ctLyVC/XRDZjpjNtYeFXN5IF+MtyZfJC6fJ4BIRv/AdgsqBi7c1r6p
ng+NF1OpQq5tkPgstB3nypCzOiiA4TUJvi1abd1VTcbI0dqrpjOIUJmhS7lB
g6a7IU5riWQYauEeCN5qiXZ24fpfGXMh2u/igRFiBYbEikXWDsTCw16PkuqX
hej/sniYd5q+wecJf2ROW4HwNyelf+t+0OPrwezUQ4aSc+u7PNnSQOy8q5Hl
nRJ8u7ity1i4GLs1ZcOefM7GYMW9PjkrdLSVEPTL+4lwS8p2qvhrLlIe68Kl
F2QUKxJd5rhQCemroZ7fpXxx9n3Ev+TcMjzpcnsw4lQZkm5IMA7kEfB87Vt2
4VZfCPp5t/vstUqYfktK9Eva8HeXZiv5r2U4dXCbYNpoET7UJz03PRQDBj3b
HmxlJqNI2xJD557buJpzdu3jkwpgKFLtjnAKhW1V0hypQpU4wigexvwoAugS
kuMZgrGQIbbIJr3xfN/VWKRuv10Bng0SCudtCmAlveWnzJQJjPRamUcerYb3
R5THM8WyIMUuNualYz46/NsqZx+WC58u9UfKPAjGPQciPTU3OHCbVlyv7LZn
GCeUMqHjRsRTft45isklcOWR3z11KzIcOJTw5XpEAEZM+XjNXinBVfebpbOB
VbDXmScl0ZUAkf0VRNuCYjyuRlXR4SCjfKc3g5dgNfBZewzJHC6Gbyzus7nM
LUi5MhIic84JRdX6bSgulaBxedAg9yYdf2TIcVd98YELObeJvlWl4M7M8EDs
cz56tG++PHsvEu1tWmVfHwmFs663VTava+Ckl9XkchEFTJai7+6pzIVUkerN
i4MJwPKuT7vXJRlCa4u1H2wjwtT95dqhY76Q3nv/8+3JRiDG6rcN/yhAkxnC
Sh7ND1hUJ/LK9tOQ8Ka00V2VBEVXhofAxANluAbV18fq8OyoSvxb/zoIEYsq
CV3c2Ldrsldvz9mgmWrfzNNAMrzcPT99TNwbQuu0vuZBCAZ4y7AqO9eg96e4
CjVbU6z6o9l45SYBwgv8iC6nqtFyhsH7yM8iLOh9WCorU4738tYlhEZzkT7k
I2paWoaLH59ESUqXYeC5A4UZ6dn4YJ6W8OZBM/zSXT+wyp+4kXN2154xZGLh
k6ZCC94yYDV7WRTOkY2k45zc0dZVoLTbiJm+0aNDIrP/nQPEL/HRxx7ElULC
w53blbNK0bUn7EuBYgwSTdEm5CEVViI/c7dVpkOA74fhTy2V4ERZDot+kgQj
Wyp/mOv6gPf8YZLYe0+ctHxDiOv3BdP6e7lmKc9wRVHnV5xgKujtmlZ8fD4V
owpPLQXx12BJv8T9nBUiBv87FmcMzZCtsWuHt2olnJYoz/giQsLq2yWkTiZL
sAkNT6V9IWLv0fevjp8ho72seJ2FdTHO2T+7YH8vHke+f89T39g3RdwRHlKW
2fDOYKnSPM8Xx9b1hY7UZ+GcK643OsbhQfxtF3WrFuu6YpRMIxLQINx/Siwm
Bhl0Dih8fLDUaPrDfJBruhZurCxpuzZT0UU89E/ZVC08UllX/8pZi3r3vfvC
A6PhFzuDBbN7NuZxt7DfFIzFqajrV7NSatC326gx1qkNtdOheb7bD90nOLvD
B0ioy/OalzTTDHMD0QWNqjFQZ7RrSnQTBRacJeciywioNM0tvOdSFdaSvwbH
/9cMI08agqZmQ+CTzvVnQ+lNyGL5iRjSlArTmqPMx2YIcGrPzIujYlXotk9e
wWPjuiIYuC/pJOPLP53Pn270crRG1ckR2WxocA3NL/IphpBfCaPHA+ph5aDM
b1pEDiT0b6q4Xv4YeWOcwt1W4nHT/l+KHeQ47M78aimlXQxrF9j9rynEQleR
Ue4ey2eYy6uhN/v7CnBXXpQoZw5EikOh2HWHBiDffiFROVwIw9Gs+o5W6ejE
vW37Wf1AmJYUMb5WT8Ba+vnPEyQqxm3+MIN92bDaf3pW2IECudnzovqqSXCc
RWxb7nEqSJeYy5EflWPHoEQZqbcJeE4p8xhH0XAk4BQxJKIGclfMf5k45IP7
kRsZvw2ScO0Ul3Pqo3x4f2edK9AwFu+I3TyGV0KRPTQkXUWnBEr0xS20apKh
orXE/pYoGVaztxze+9MfM3fN8uhKPsHE62IsgSfK0fg1WV3ycQv4nZuKFtqf
iiaaXTNMTn7oZC+o8WQgDocbTg53ZfngcgN/Wxx7Eu5gC8+N6WqETP2SCg3X
BtRWef3i58YclAckuE2+EfD9fzmkqIli+FWgGukUXIElQbormTsyMMd7i3He
Qhay7Hk8EbUjEWaVC+7GRBVAftOTv7/e1cG98hO+p0PiIEB0T+XIeRq+l/rL
rV1NAIX0uPqBHQnwI+nE0eKtlVBUaLcyvzsG8hszpjdplKGO5PmslefxGP7b
9oFzGQV4Kl9KtIllg5K6d6qrVwmOB2Ub/Ww1wZ31p4ssZpuwyFnwz+CdBHiT
Z1ZrdJQO14lT10oeBsJCbAblikACckZtvc7SS8TzJ0cLV90IwKgzMqrEVoEd
1Vft6lQ7YfjZTJ5JUAKqLTC3f12shS5i5EzCej1aWC53DEeUwlWubla1nHDs
d/JJmnlaBtNdNS7UOBcs6R178lSlCew3z7ETT9fDzZcDfSe2VuDuK7o5/xJL
oQHEWnClBNn/BD4suegPJ3SNymibaPi98ZHtPVIW2NXhRwm2SEh2PRIauXPD
h74S9N+ejAcDCwuDqhtFoOZt/qRSIBO58jYb81SHAssp1/rQykzwTjyOB7xy
0OuEa+vucmdgXfX73HkmBOyz9FsOK1HB9vHqlPNiGQr9x3Ve4FYD/uIcfN5/
MgOOf39z8OhQCTi84thrLUUD4PQsWulogpf1bsWvnEPwuN676tyrBeCr9OPR
03dN8F+tQ2tTVD5E+FMXzronIT/9Ys7Ry0UQyKOSfP2dH9zor/8lQ22E+SG1
7Q9vWUGbt2nCU0kqzCc5m52954h8f7pMZ8sT0dtWJjSTQQR+24WYVignw3yl
L290gBoYvjvAvO+uFdo6xPysWafDSbeQEOvOTChu6A2NV4uG9EHmSJa2RGDl
rNNdEUuF/YVGGZYxSXjlNNHN06sZV3fEvdJMJYPirrCmiBwybi1WneiUf4Za
30Ni7JdKoS7FJu6Jbi4+fhf9pFQjBT84MUdPqlWiw4mTly0dm6Clb9ezP/6+
WP95mu+KThUq7VhezPpNgPVtc4Wyb/JhinHJWCogFYwGP5wSu1+ENDuX624N
CeBx5z/t35vo0DxximXhMBm59bjYwx0bIDCI9SDRrAzuDfupHTFLQwlOX4vU
jiLkPRrxc+a5K+b3TX488jYYOvg3H9HTC0DXj36Tj2i5MPYmXeJndSnOuy7z
KYx4g6KkZ0H75hIUfyDlGKxJ3vi/75z9HiBc3SluoPYgC/uF7tw+8z4Kxq76
TySMU9D79aZ3+tQk5GN3/Op+vRhI5x0DfHpasWet22ouORikMnf6DJ5OhiuL
Dj++8WWgxuHVyisPjqPyyTXmzoslsF9HiNvmdQH0xM/3mX8JgM+Snt97ijb2
WxB7krt7NHBUH/xuU1EK5SLaQwOyubhz8PnHhT1paMFvR7MmJUJC4qOrHQzZ
8Pb+8yMe9lRodTvv3MOtj5Jvet/7khtwLfqNde0FJ/DIHR1NVy6Ae2nndVYY
yQhshqPy2hRItdNWi9zgIMdhg4BvKhawt9yKevY/CsalpCgIsd3GbUb2x0OT
CnBnpc6FY73eeMCuhfHi5lAwI28FTioVXrrcXmHMrQDzQ+cz4hTJ0KQ+92Ml
7irwmfQZPa4pR+8s9+8MmhcgnKAmP6iRjSKT747FkGhQd3JTDe1EESynxgme
6WsGBWPTJ9yEfPzttdSQ6eyBRQeenznxrwZaaswOKMRkoktaR8+HpRyM/Oxm
/9uYAoacp1k54ovx9XTiootUBVab59/ZecEZ7IxfO97pLoCLzc5q1qXF+Cv4
Mm8tkYr61+1fqqt3QMlyeeVYGAWbwqubHnzOAA0mF5WCLTXoInjxxUuLcuwd
cMib7yCittteMf3AEtzu9/pG86AXfvixXPb3eB46OEe8VOW0R4aivndBJRQ4
cPJOVfsHCsRbxyy7bM6F+GmB13caw3D0YPHzN7R6fNVbIdy0MV/vQlNbsYJ6
3DIh9k5Stg5emp31l/h5HRjDYqX5x6vQKWPWuCDJH5+KzfkF0xBVJCpdeKJI
sFrd7FpNoUDfIK3EXqsM95oTLqsJ0ID/ifWInFMv7pYS7gh+7Y9R5LcczzSz
0VUjuufn7wbo9CdZTa5XIN8rywjvmhzYquuxU/RKJYitZtReuZuIxtNnv3Lf
tIUErtWmQW0L8OBqU1DcS4MHJUo2de2FKFl1iWehIQSkl5avfpfxxVKmvcph
9Hw4RDJ96BWVAdPHjXNm5RA5jym6NVq3gtkDlXb3AgLS27+0oUcVfH3YITem
kwnVE+kUy91luLuCI0zOOg6qHx6JTG81wJlbor2sMfFw7OxtYs3VVLT2/9Rq
3pqDTod4uXmuU+DJul1d2q8UWP4h4SSTHQ9jMrfjGvQL4MG2lfo5o2joFY7+
YMwfjqye0gHKBxF5SVZmkxJJ+CVr+1yjTTsYBv74zS8YDjepbidZ/9AhxJ+p
dJOvP2RGRCuX3MvDLSMLt87vrUO7peGuYMdogJCyrm2MOeAdl6tyzq4CXl8/
PSWisdG3a47J1lAEsdH60WofM5Bsx3o45VIh1K0amQ2bE7HuqwY0/4tG6WzD
R7XZ6aiScphdeVczLlLtyXYP8lG99UzYqcwa4PJmXOtJoELN+9qPIp/KYVvA
D+Lrz9mgS3Hc93Y4BdM1b+zj9ygEx7Dzt9pKItCCfbP7t6Vc8H/yrKPvExXv
nfgVHLRYii8a1gNbNu6TgYXOe0WNhpOsMVxCwSW4mFi9cmN7PMTuuat0WYSO
slyHE14tBeApFcnrOrIEvJ7aq+8emQsG9e+O7/Wsx9YDP4PefCHjx7j+D0Jf
m+FD/ET/Tb5SILv0HOqMNsXGz739DzSfofed21usjtbCNyrT78uHELt49239
/7nk412n80Zaq5A1qu1ty40YdL188e0mHjKUsk6S74Xk4+Mzkmtb2SjwKuDU
qaPGSeBcHF70riYRW2YCzdl/lOJw+62FjgcksA36N7TakgA1H4K/8U1mY7T/
eisV0+C7rHHk1Z8EWNpdqCU0s7GOp3+UuYWU4zXbHPPMi6Yoz6ZhuZxSAwlt
Bw//SnuMPJ01h4Ifx6CLk/TZ3adiseLYkMgh/gqQPaQ3Kq1ABlJeUn+8hx+G
P/o7s/lFIA4s0zc1PCSj68GsqxUTz8Ckd3z0hncDHJ2z+fY2sxYbbk2wCZBa
8EjfW/J+xSI4ZP6235klHjI6g4595a7B7XuG1b3MgnBt070i48M5IGCSTP19
qBwPP2QQUAqpRL7Drx5tJwTiDXFh+ZiaYLgSpxt8UbMSRmrsD7v4lkDkmZ62
X1sd8IGiKNuWulx8pKe2xfl1MdJybSWcb5fjqebXbWxHiPDfu9C6swKFoMy8
pZv89Bmy922XIJiSsOHQ+F7lvnA828jr+1r9ML46qSJ1a4NbfL9LSzhVV6HO
4juLxS9xuKR+h/OV+wbf75j2FbiRBJ7Sb/IOfSgBocm79yNjE6Hw1a2J3osb
/v6rLNnhPgHsz4VFHFGk40QiIbzwWg4kr+VavJaiI6563Ymm18I8+UiL+r7r
+LMwsHWlLBb2ftOkmT4io5xvzbrrjhK8F9YWebKZCJJ3By9ShSh4l2coyf9Y
IWadYRHbblsG0UHBvT/Xq6Fpn7hL3+UrMCyl+j3UqgZbF7Zl6QRSgVS0J+pr
QR1Mc33MFFArRo7DBK5R1myY5lT7USuZiTbbBXZX/S6ASem2mYkNjw26j/sz
05NQb/fHoF2NFFCaKRCtKyjE8cCkovn3VcCgVdnEsXwaGml8vzW3U8BleMc4
H28zZDzSUHr6ByGmvHrbZtY6WBwhiNx3soSRF68fmMhUQKFJj6z3nSIQuMA4
/lIqGiwzkgWmJxpQKn16IMmSDluK2vsHjxRiF9cTfl+edPhnqRmjsiMUxbnS
PGS+N8C6i3nbV44i+PydeoCxKQ8OBk7ZV9AKwSyUV+bWgwK44nfP+HRBBRg2
aNrsJ2ZiFr9YsEo7CbsEb63x2ReB6IOhMGXLUvQse9e9VFuEC0/lFGo+B2Os
4UEVJr5SbDVnmbtcngdMWwzY3jhngeWltECL6TYcVxSsa2HUQMHumTOhpAqc
vjr3ecwvE/U6Cb/smOJRsz7sW+PeCtiZ+uSPuEYdODfo6rb0RePIfZ3HtZPO
IGD0rW79PgWqT3zBzR/S8OK+CybpTGTQVk70XC1+in9cn4vvlCJge5jch10h
8Th9fHfFwy0poGHeH7zIWIulHKmiAiK5GC6vHKbbVoSTsW5hn5xbIVt32KV9
Pg9Ou508pn69BU6wr6Y5bWoGR/+g9zKGiRDfFRzqVEnF/7Q1mcglZJTedfWr
t4cNjrsR3YNuGSG3KD3ebykbQ4zk/PV3ULFpYGryx68U5Lt9YJeNXAvsmMty
NRYowvQsqRTm0URceszi+uhpBlxr3c9Rg4kwX7j8/eBnN9g2QBS48j0UCOrd
gbGy9qB88ehA77MqaHo4Y/Vd3Q+e6+/OPz2eAnO7KAljWWRk4YnxnpuKxiCm
s/f//i0BEwbxvlMhVaBbFPwndCkfcU/TjbdB1aj8MqgitLIeIhcW+eXEDSCd
fkfFxSAF5XUVBOcM66E63of9AlSj/OZLw2Xfi7Bmi84/ff9CWFP63CjjnQ98
qDTKXh6DJ+cK/7saWoKmZ7Pq3zY0A0W2lLJLiQCcd9cMpY57o9J70z2rR3Lw
hexzV5/IBJwhFvkfdXSH4J2EnqKn+aAdv010E1Maauox5HZ9qoE5Phrnvh4X
bHmSL2w9X46XVBX48x/FgoZkjXUCJRJeCBntZbevgZuq+92rpn3xypmc4rte
1TDaax19ilCCrJvXjkv4t2CLrqRQrhkRGQYEugfH7+Ot/+Jcr4ZSMZLm0Ku/
kU8rF49+PvggD258mDxvMpQPBp6vFr5t+JxI6889l/6WIl9eemZoPAkFrrB5
DM83w79XmuLPNPLQetPvg2pvn4C523ztrX+FuPJGsbk+jYo1AjtZit3z8M+h
zS5vHuWjvcNkwfu9/ji6fvbAH1Ie9NQIIa+3HSxr+WxJSyyClS0cQ+L7avEg
M68td3YjVpRtF63f8PrNKVe0Sv9rxcUKmXiexFoEDkpE+UQdip54u7yLuxFp
DE8OnKHFYfar4cYjt+k4cFgpYPlfDmg9PDYJzHm4kOlMIxIrcO7nRNOIfwa4
P1S/ckexFj/A0D0udQqcDFV66p5WhAQFT28p2dtojLX+FhUV4JXxBlk28vLN
CLWkUq4chS/u/WDUkg/x0cI397fWwuEP9yI31Bf+tYfzaExU4eEsQfGtfWUg
Y1LnZbBUjTtGN38KrWuAiwy7H3Z0lgCVmPApYzoNXaTFeVx3lqPPsa/CQ7UF
MOIteXtkWwS4KO9S/zpUjKQ2law7LaVgrcUUv9JJBtG50crAWjKaGbEOMZjH
oNHbB3vX76bi8vbvn9TM4jG6P1EtMN4BKg1mJAcKkoHcoHPE6bguyD/sSkrK
JEDox2YXrw3PsVTvmAmsbMfNMe2WNzuKgM9vWzftYg6kekr95usrQ3ePbq0r
eyrx8yb+75wi0TB5mbePeK0Sb16O1JMQTwXeM5f3uRyigTshi7XlbhFU/R4l
y5ZUI+f+nLfDg4GoIDd+VlI9EXJ+eB903/cYlrSH+DVEasGcw9LrFX8A1tXl
JO1gqkOMaqYnfaxDyYJ6v8nhYmQwWabaNxbA0ybrjoW2QhwYnui0AE/k5ivq
1JbLB+6InerZehlYsFR8LZi/CE5ulT0T//+e9dmXssxDBemPa590hmNR8mNG
HfsffzS3Zp0KZiKj9Yk4Z++5XLRIY5Sgf0uBD+4/tvF0pGDre8dgrX1koHZa
8ZxlyEa7b5W/Ei8RAf3EbLqkqOD8S63+dFYDGhhciPP4RIZoY92QGHUa8k+t
rJ6RigNaTuHmYxF+6PaHh/79VQa8fCXR3dFLhqu7BFK1vfPRJqV/mU2gFPJV
mV68sKZBqozp+/+qAiELGw/Jraai2cCzi5cfZMJp1013hH6TwGKpW16czwJ9
cygKokob3Jf64MbvpjrgIHFL2G14bYbmfPY27ifof7j2nElDBRB6dpe1Clfj
eFSYRue8FtTeddj/05iA/gkvCiebjbDqjHK0dREVXVkpEcfSffBjBuvzfZ/q
YaI/olBgwz8uWmk8VdZKh1YlUc9LMXSwvq7dUNzdBKdkf3HajKUA0MZnboT6
wOI94qE7MrVQ6Wd1OnLwGYoP/Cf5V6oEz96az0uI9sDOV2yqjoaPMX1k6GLg
Pkdoa84RTZ8owBHCi8Q2BgqqTXVdLg1tQKuRD59luiqgezRRYFE5B0aY/429
sqvGWbXwQ82Rz3DRnWWG5U0aVltHkEqFadChqKXIwlcJ7O//rV3XKMGZ3SMO
JWftcOpl1eh+7yS4xvDqUwtHKmitLp05FpoFxL6g1tNvyjA68GBi6UYuqG5h
mmnoiUbeD9/sGd8QQJOR8MFQPxptv59ZT8rIh2kLZeK90+UoUFUhTlzPQC5B
9qtqxUW4dpOWUV4eDu9Kq1im4nPQpEmF7+hSGMZY0tni/GPgx06a/uhAIeCB
K7nnliPgIffR9VpHGlYWbL7pataMkqmxVu8MKKD9jUtqWhRhVG88keEPCSRL
6hh64svBU880a/gjASimUkRRJxLANYGi7TuTcMd/s8e/7KbAgOKTnrDyLLC5
LsxuZRSG7odXSI1i5hBuG8x2+GUjjpoe9x6pzsG983S69KkK6OSk1qTIIzCr
5DUuJBDxwCj3AQcSEV4ZKqf5zObjrnPpiWaHYoDn+9JHY81QcJysk7qxqwmY
bVdKWd9RMS9r+tqWlhx85twvIftfDmqxJzHqny6HL7w1lObWKhD2klqLCSbh
aIdd8+BsDr7q4O23+/+5eF5rB7ulLbD13tffjbsQTnskxFz+kQZho54drmca
oDFp7sJ8Yh5euq/CMWJFR/sns9GhXn7Y+MbrU+DTGAxX2TT3I4oKq4/9Wjh/
uSIHq9e9zovVSJJLiU2pyQTmpUma02IVyDfsftm0qRymjuZ4nN9TCUw76iYS
2srA6nFjkrNXNSb8ueD95icZeOaFeE/1ELBmfJddwVoCdm36ffLmjQ5IPf9L
sE+Riko1ZEVPU2tcyXy5W3WYjDYc5F8sLB4wKGK+v5EhCtgdOE/sbqWAYEoW
IXEkD5BQ3aOjoYvyN3jaAprKMKdm17n9kiHwWIfXmb8uF5T+MJgFi1RCxZJs
Dno9RpOEpiTylnw0S2ZKbJ5ohPE10brkQIRrIRecdX2pGE/f892cQsfssguS
peFpOK0zey1Bxh61z+vHBaeGAHgz1Lon1CNRUmj87v0A2GPjRctg9gAGR8mX
xGvqENT3tobhbgHarPItlAY04VXty47FkleBkZfYxr4zDJOylnNPr+bDDkh0
5/GPx+dXRXNmzemge0jjCZNIMl5rjco8dbgeXIiWOg6bQ+DsTrXV73MXcX6z
2blpURpItnnv8nEpxmsaN65P5+eBA6+K5FX9HJT2fwJZvQEY+orx+A4pJ/C4
Mya253kTSu7eVDzRnwEHt3e0D8clgzAPveTiViKeVq6Y2f0oEbbwpHLntuXA
MQXrEQoPHXqsP6h+ltrgot/nTq9JZkJuTNpdPmIthNt8Wu7dFwNqEfymQivx
ePJrpF+BZj1wX5w6sNu/Ci9PbDmj39OBvFWF7INieSjxu3t+jaMCpB3Fzhq2
JqIKJa290TsMPrtzPNO3yIMKv1MN6r4xONK6MuRtSEHvJEYoYNdHo8ieuWrT
WBxfHYxPmo6HaeV/jzb9LYVfol/PKeYVoOkLPZ7vx8px/OxdC+cnrXit9yJz
/1gOdMqJWX5lygfKZFCsz5V6ULKVDhI+QoUk+gBzq0gLOhI26SafjMOKxYIX
b8oTYVmzteB9fx7SrmnpkGJKkSvJ375btAC7mi64GOyh43uJ+0mbmArR9INA
4a20Styf+Hyklc0Hc47mGRXlNuOj0wH/GgSrQGOKVZbdiY4HTlTr3w+vA5kv
7i/rGemYv0fqtzvJCT9/tZVp2fA1NkOP1bWsWmTe2yTJkU+CmjhJtv++B4Br
BLOYeHssHH9Vd75+w0/+OOebNO4pQtbAr95vGMrQ4NDOj9suU5CtjlCS5pUH
BgFaO1i0KNhkyWJGKm/E/dN6sS0HUtDaq6j1aXchyNm13puhJMOU0HmBIloz
tBW/HdZ09Ic2WjI9oS8bxLtDLr0qLwOO5Pevd93IA22to2/3dhFRvt6oN02H
htTjLQJ3JClIOPOfzyZPF/CtjDJJV6jA67+Sfg+dLAPOfTKV9SOxYHrefAnG
HoGLluNY0UUKWt+/+UWqtQzVmJJ+Vn0pwPvLTaHFNjRozZvft00hBjl8ktz2
c9TB2WUdEVvJ43jmfel+l80FIF7xa2XQkoqZw6/hfuAzVIp2e6g9nQPKGpz2
LaQ4JCupGumMJYJc7gOnPqlynFzatD/tbhowOZHp1A9N2C2kTksJzd/gs62q
E+pJ+Nxfx1D/YR5avW2nNt8vxE/eB+5tjvIHEfbQxPxPBDj/Acsc9scAl5Fi
xMcwG2BYIFITcp1By2CguYfRFIyqfhv1bCGj6c1o8CS7gwQXiwUx4jnQ+n4/
M/MugIXer6X6ApkgE5ZGX8hPhbvRN58eM6ah3E42UnltGfJ21vwZWEkHrphv
Of3e7mjK92XAzU4BNkUIB3MwJuJ/XXLimSZ1oNEa6H1Grgoq7jdI6cfmA9Za
yKnsLgbQVPW48awed32Sn/FcSkCWgVcWH1dsYWIfi0n8hSaQG36d8/xsAjyX
tN1C10uHdv719DdJyXj69ZX9v/oqsX3PO8lh73Q80DTHuS+nHlrOPCxMfJkP
bzYJs+bdCYL28ZWu64Ib+bKLRFnW2eg/iZtmJ5rjsPV0WOf/3x80MWqnFcue
xZf9Yus/AhuxvoN38WV2HBod9TE/ABXok/euicM/HGc9JkS7gkow2m41XDI9
Eu7Nf/s8LFcEv+hatIOdabBiNmqbw2sDtpZNbLufZ+Anr8+U9A3+I+8rOqfp
RsGsux1REgIZsF32rLbSbBW+fZ55Z42LDNtGzj/eOVsP5VMRjQzDicBn5VRa
VJICLy997Wfg1kJ6yhU3klka8D1KE9seQMD5OGqfxmou5BizDwlcoGNel0Hn
nCoVfxmqHPJU9cGrT4UkB+SJwO/C4ufYSsYX51VfGOqSQExBeruiPQ2brO9/
/rauiWb7q5xV2yJQ+6NNjp5DB7DoSb/pu5MCphT1H+26Nbgz6DVh+6U8LJAs
DbpQ6wrp08eMk/qCQejzKG2/djreP3aU4cTWXLybFiL1TT8GY38EqNmub/jZ
rqwkFbZCuP2xWdP/KRlfFpPlJfbngo/BWU35E83w6e2xracJ8dCU9DilaI8j
5jDSRPYOV2LahNmZfLGN3K3C6DEOErBvJV90iSwEBouvcWbGC41B0p7oENAA
jPG37+jcysXtSbmFfl/scOcB+Z9dj+Og4bev1cEpKh6Sp/2SlI6BwLCzfwfS
SlHQ+sxVypNKjOe6WhS9UAOei+dctr17gjdfCMhf+kWBVKk3R1K/1kJtbmN8
/4t6uGEum+3yLgUYOyLPe3wj4O3siBafcz4YWFR41V+3AhgqV63rPt7C3S/0
SByDYbhfk8/k9H95YCrJ8uGxWTh8fjSgv1fCDEJNd6qnmueCCOeTPOGUXKwd
GKjhfJoEjdZH7q9MloDtPd1tf+7noyWbPNnpPBl5Sudn7z0thZxIjc7yHALw
boJM0RkizN1KU7hyvwq/TFynW3/Pg6EdPt9FttfgFb7F/ZJv8oA/dFLYSzMA
Wm4qWil9i0L7t4kyGhVWqMzrcphMpyEhbIei/9ZwNHHcdLN0o3/dZY7oLnX7
Qd38IxmRu3lwObfNIeNCO/5r36s+zFoJLqw2iz93dWKiqcUFFs1iLK5Ov9m8
wZON7ChLrg0F9tj+0lLjMkxYl+/5JlWBdMmsJww2qcj/rGNyUTYHtjQ8F+1h
p2PXu8Bp1vha3KtW5WfGScKtBaz3IhaKoPFHbEMYPRUF5QJ4d9ZRoKl3dA9/
WiH8lzgjxWlZgUmPAr2PsNWimfBPTVG/IFDjqvYup4UiO2M0G+GPH96TZ7gW
7WuNtjKfxd3XfSFsb0l9p0YORou1buKpqoHulzr8tRpEbBJdu3hGWgv/rlDN
DfTpICbp3SWzLQhuNP2T/mFLgi+rm2VOXCvBYJc8u4saTVCdbJM0LLPhH/7x
jydoqTA1yLqgYEiATsEg66k+Op5n5fh7cyIfZHg1mCluaSCUFhrx7kwMMp2b
vJNURsDTXp8+2pCJyKLVbxjpSURurlrXIJ4qWDKQNG8IisN/eTr1TwVyULLh
o+3+8lxY/i0s9cO9GcOgxIs/JBs5+A47mxwpALP7z1d9LRLQxs39BC+POaY7
R+83DW+E63dH+YonkrBsQPLz36hmWDrRa8J7LRojXN+L6Cll4Kj3JXvzzelY
eY8SynYrBJOPBU2rrpZgTUfxblnuTAhTLUuR56Bh4xNDzgK2VnR5f9EmPdMG
q7UXRp913IbXl4881Aknwctpw/p7Js/QfSr2X/7dXPhE+y/mhV4bfjJNKh/6
UYLuUu9SdhT5YNn5t6sHx2NgRkO2Ie90DFxXMQTnNW/YlU1Z+2uaAyI3v+ow
sfij55u0Nf+6GNhyAQSSN/LHd8LjgpphALi78kgrTpSj2GiV4PRMMrz+UPq2
6VUh5nbJdD/krgB5l8cweoGC+kXOu5r2+EAq3nujwlADZsmTA4mPssAufE/5
Fo0c8Djm7HHuVh3CTeL1q0kpsCrHbKt7vw6uqsS7fozIRQ6FLxXFtgFo9Ohi
a+SWOnRWmn0hvTE3i4ELcg8v5APfw01E7x9J4HLx3OZ4ZTqEcO31uWxFw+Sk
pdtTk9m4mh3ZzeMWAh7hW2xml4tAXbBJzNGiHuUT36RmDVNAdrAgVzGsFgms
z4wkFfSAdQv/w4cy3vh2ouGLZW4mbg/e837eMR96aBlXL63Y47n+IHrCcArw
c1OKj9yhoez5pv9sfM3BduRBht5nMjb9fGUZZa6LPqWcJ28qU8DK1VJl7BAZ
pUrNUofOkmE8i2l900bOPTjKhGwmRKx+z9onPuoPff7xfz30K4BF2DF9e30W
PnWpESrSb4Hx8T0aYgeDMCeSqDeyrRwXxS8dsxAhw45AvdBvn2kgViDVq7PX
AliFSF+ZLVKxtdGGOTmjHj7qjU4QZ5qQKFGu3BjRgLQPRu7Mgl5Aa1PjPx8R
Bk47nxZ7SlXi3N6A59xAQxK7ShiJPxkD2mdv6E36guNCVdmrrDiMPuSgyXqz
Ah8kyvOH0PPx9XbXAE/JVGhjOLiU9KgKvt+w4dr6loLdxc0PixmeooCKbNfA
p3rIzTjXVCVUDWvnGwV0/0Wi+G1O6hobAVW7eWYzm1PxHM/40bWkCDCubqTt
3UKB/4yO+8525+DBj32E/47XQxXPwexB31hsmszivqJSg4xeKlZ8X4g46i73
6YQWEVp7p8NoPRT0VNWz0Rl1AU3wlnfbQsHxiAE1Oy0ymJUqm9QcJaHLeqbc
rX9UDP/Rb6D1pBCbXP9QP8o5wcKY1v72pAa8VRZJuXGoBqul/71WuBkBR1w7
Tt6xTIHxYLl3ewwS8HaA1+B2QRpafMy00M8PwQJlpbGpYRJKNIu/Omidg5MR
htxtZ5qhKmCCnnCMin7nf/g+PEWA/b37ml6sEeAdv9uKxHAO5sdfcJJ1CYBI
TplzzGOIJt8W/aw+50KwdpeJtFMMVO8k3RLbmQ8MFHLhWJom/noQZdw/2YyT
QjtYf5LSgcVhOECsoBY6CVdWbK/UoXaSFSvxWwGOds3fC9YphncspKNNgk+Q
dvzDYUdDOrqIqH1VOlGA6XHw7JtQBSg/L7/CzpaBK7Odut6cRIiz2ucpCbn4
u+RhaiUmQm/K5E7xlGrk3SXY0xNgipkxLJwHuGNw99lSNRZKEzjENRUVnd7g
ZCa3RMEPsVhS+TOR80MDXPuWZXTncibO34iNMhmzRFlXkcjDovEYzyFgkq9D
hQwfPV93gUgId4p1thguRwPx58VnVTzwsHbZ7YuBJSjvmambsZQMjmTz7JyV
Jij9B9TH4kUwFKNVfMDwMdT6E5p7fmfjEKYdmXWqgW3aed1HP/shl4Kw2KWg
Kgh8vyyXu7UZ2Cz+GUfZVcDKS6kzJwWfgTCH8cTDoyQQ5qNMKRQnIl+t+S1B
oSJsVu3+ZniYDmxBRz14j6XAls1/Zw37reDNU2jP+RsHnM83/fkWYYKO2mV2
DOeqsVH/Dan7AwlEAi70kE54wUTGj4ypKiJk3clOvvuTACXG+39dZ2/ENx+X
H31rSsDI+Bq38d0X8GeLEWGeQsGvO6SEuPWp2PJj8PX990mQubTDbCw+Bv6e
MG0YtG4ENwXfmsd3KOA1bKkUUlWIwgvfon/eDsL6Vk4Zm6sUeL7av1IynAA3
rC/MKO6qQo2gb1+LH0Zh3FeDXOZb1bBZP2c/jyEZlD5m7YmcakETStF54w0+
cTwYqsR7qgZWLCTit58rQY+ep6WVWIHfPvAeerSeCj/Pwuqmula4ZrWzxuRT
LZgxkL3zBrLBQRDudX0tRunWEqfCHQmYPs57IXQPBSetFtZI3+jA1EjvPj8f
Db5HTRbq3Yvw8bN1Hq5nCajMHpSnZlwFjvaam5feO2M0/L0pl54FE48d6i8L
1CGP+jv5M9sTsTb0SOf49hDwGVI41RFdjtEJA00/W9Px9MyPm+wBBJA9Xn2D
4bEeJPsc7ReurECmX691x7hJON7doP7ptgtytfKt7d4SgpGHK55qTVeg8g5P
N++FWLwa08CXodCKQYHOY5/dM1D+vYJEvEEdCuTeuH7CKgGycllznZzJaDnx
KHgpjQo+sWsTaxscTOcVWf972xfdd/f8ePXMG0wLto7rKt7Fdx//rphUhmIw
95qnxZF4XKaIHAuWpSG4tC1wnyZgsF6LDEeTKfyJLPrSbpcIvlddercfdwE2
Xn/5GZF28D4nNHRUyQ0ZrunvO3LiMNjaRsi6k6g4c+pLgfW2HKjfSeGN9KJg
VOI1Q5WWMuT3ObvL07McWc5goG9gFu6O3lt+YaNPAjPXdTjDsyBbPeh/FJqH
PxX+F8YlWSkjKqIkJCtJSOWgMooS8i0po4yk7L1l773HNa/tXvfa49hRSKSQ
1VAklaSI8vP7D87rfM7zPO/n9fqckbtKxr6rf2ROb/PFxjMXx44s9qJDk/FK
Zns1yHO94X4wYQPakv/I89ciYeS7poO2WwNaO4rqO8pGQZWfNRrupKCpLvW3
YzAJOx1033V/I0JkmkjGWGEChNFun2V7T8G83fIMgWl2eCaM5qMDNRfTyIMd
9W5OwH7EI46TPgsbSu0P7IpphBp6Y6drMrlIjRKcaxYxACmNJTGZV43Av1PN
8NZ5H9jg9pTZ++8xNL+UahWMIMNG3qntFboUUJCl5bIll0HWf3XHNjdz0DPE
bzchqwoGLbTPHdDMhyZIYCcr5EGAK6tZjGAKkCJWk2hzc7HacGIvcV8r7lwU
+uiG+ahkNLT6ADMwLvQDm9nBanRGBVnbr65oW5SnaRaej84vrUSkdCkY46Gm
NCRRhAsKuilMjlU4FFn/sOYfFe104+jP/MnDfMlOL02FAvxK09qOT1vBW/66
lNovKvL+FLoTrUyFfUNav6RNIpHuby/Pge3NOPTEjb3ErAJf/GGNaBj2Bm+O
ecklrnr8JDAtr32tCqJrBjgb/hQg3THD03dfUYFu8+htUV8ntNplb1x7vQRG
TS+Ke1bEg5SFyDEiNqP/e9HPcyF5SGK4oxp1WA35OiY2b269zyGde31WosVQ
cqz7ZkJvCayLK5lJ1lFQavEQ4Wd4IWQZNsrRvyhCqX9DmR9P1CONZ84fucoo
YJm021yfC4Al3m53CMgHpeG4uRtPHuHI8u4LNzRaoWCze99mtjOUcd7Y7DFp
Aw4OB4tkzhzYHqnscTKGBKeE+fJe9TyAkM9Hj5H+kbG95ZCR3t8g8Ey78HnH
rxC0SH7Ve29XLN6QmBky21mE6zfyCLrHknHgSGfGLtlCDHNybDtvTAEagSE4
/FAQm3r1LIPtzDH+U+NC1asa1I64eLx3jwsw7tYmJd4g4MslaUFb03AwolP6
wRtXjT9/iFkwqJSh2vqOZc837XiXlr3+Th8FFX7VOU+5R0I3RxfN+IFC+Nfm
4W30tROLnvHcMr+ShPj2WCw0eeHP9N+n3kw6oW74st7Mli6j0/s+qg9Ugd5i
4DaBj3ng2Jzbec+aAKLD99/wX0xFEDzmqLG1F1XCRNGVk444U2Tzo+W2G9gx
SFizPejAK9se6t9JScXZq066M+fLUDaqufA/wxikv3tlNe0ACRI9optrZckg
0VdgWbUaC3a8GyaWb7e4zjDnBftkCNjX9EaaruXhANl+52spX7yi892yz7cF
ZTPf7tubUg4Dkst+969EIs0Gl7yGTTN4LK9YFwQlwJfz4hvf/6sHj0C/6TJv
Es69lm2AgxH4bLRSlZarDYxNaHWu8IjimH38pLF2DHYtsPzHlVQNmiuKBaIf
O8C04aO/jmoWXtKrspp+GQEfQgQLU591wqnyEp6DRCrc83Op71RuAKJz4NHy
02XA6Tl0X9swF5Sr3MiysRkgEPO+e/IPFZbviJv90qzCMUJdjqhdK1y399S5
szsHpByWBF0kXFC6Zf79oF8RTvVP0dxObsewczq3s+KaYML5Z8Px/Mqt/nT4
x7kfRGBWFH4Zo4k4//fV5DazKvzUOkxt+kuAx4VX+3dkN+B3yyASnbY3vmp7
apigl4WnnzkNlB5LhqRB1lnBxRo0b3DM+mZdhQf+BqY4H6iFKMELz6ryyFgt
1ChkvbsEOyvfnzY8kgudd41+H3tRCJ1rXn2RXqW4/m91z/EzRLDMkvIJ4imG
xc/2WcyFJVDWXMJ3Lt4Zxu5kPr2uQcayk3HSKoXlIPm4ZYBPKxdtxE/G7tbe
4g6dYO625WqQu6hzX/tAG3CZvrx3kjcH+Q+ZnO64ZIhPfcIMppcSIF6b9x/T
Nh0QL+g53rrVw77uhrGVbcUQtUvUXrEmHbOtpaN8aU2gL2ubqC+5DF1ZPFe+
M0eCdf00+6GFRkwNDTdqGC2HGDrKMdudxtC0U1ju53gThgs0rU8XF0DVtcy/
WrxdmPpMJoFOuBWdevoMr9E3wZRqlCazLAkNbR5UuCXXAGvanO+UXRFmcw3f
YpUqAfqFFJuW8nhQOkyYOjuvCOefZSSwspDh4Bu2/ClLKgSs6Ew4CLeh9HZF
9VmmrdyP0dZw+JSB8u/z56MdKpF2x9Pz4WuZYDS07dORGCLQjIUY8H3NBA+j
RVWJt7XQE9Y+PttfDOKbiYzrM2UoXXpJcS/RAdm+eO+zDosGQkzXzvurd+Aw
6+Dan62++dNrNXGUOQM/NvBbX7xZjZTJU/RfdVLAmqq8yhboBadlJKqdrcrR
ai745UnNTFBIUC2xDu6ABONximhzPtbIGA++Z9/yt3955xTe50PQSpdkmHYz
iqLK1/oHbXD8y3bTxxFx2Kt4/ct6RzXqyJi+sK2sx4RsGl5rjmTk4D7alH0g
F+9VGBHMjnjAFTfd0/Z7KZiWM9xmvp4IKVr1QbnfCmFPpoIFW3IbSGe8U+JV
DoSAYhZXIAbDi4P40dEiHWlx+Fnq9hKQISa89VWugWrKukK+SDZwSrymd93y
wbduCwuyEhRkFql1nNiRAq0DPru7RqmYNKn0SZlKxZG4n5I7InLgpKNKubtV
HXrejjm13kaEvG1BBcf8cpA9ooqxm6cORGT1+s1MG3Bjv7KAtrUHrpCEOYPT
40BG4byU6hciPCnnamTJLYfYiNviQ+Nk3KGcfTfUKhocZ8I9xTIqQGDDf8Kd
LwOfM3BVPcsvAM6Fv4oOFgmoXWBO/izcCjOX66KE23OActXIM0U+AEXs0xj9
psjgy0ifd/IPL9iTvlySVMgBFkPbl1oqHiAQXHfD6xwBlGYnHikotmKB2Mzu
pfky3GNroaleXwlq31afo10Nlpi5TfNQQnA0lYPOTLEdumWGBn3aquGeWova
gz8uSNHsH/3WEwNLZj8Jm6X+sEbqfe4WWAD+rGZCdZtZ+PR1Y68bSyOGKDI4
SeiTQNMqgOm1Qhlc4a1JtLuA8EKH5GzqXQDm7aFcFsskEPQW3Pf1TCl27vDx
Xnxsj6668QuF++rh3cydJ/eqEfWO0yp6NjUi/w0fjXefdaE1c5JkYn0S1Ztr
Yo7fKkf6148ExYW64fBZ3vrX0yQYMp+YOihZBfv7WVsKPrTBiPzvH2H+ZeB+
mtPvuVkh3lNqCMt0LIWBmH23um8l4Eyj25Dxlm+RxplmKAFx8PmZf1mCcCEM
vrj/xzr9IbD4On054uOKsmpGwYGsDXD8JkVpxKMO//1aLv4Skg/Dn5LOaZg1
I8dJ0vnygACsw9uanGtmKHyUdKjWpgLd3RVti9kzoelY661+mUboc5XNaXfM
xcTdp8uu0degw8Ddq8KLORDQq5iYJrY1R/iO5p/2iDJh1sJNpc047mhTelTR
AX/dubfjVUYgJmcL/4j+U413KvaR7QeqMb3BmnX5bjnUaPca0anWoEsnW/wu
Mz9sTc7aziknD19+Cx7pH87GQN7m1tLT9Xhj2i5NhkJGq02eUCXLOJjhEAwK
i6HA65MaZzdTyRDh2jX1OOoR3OFungrxIqIvtWs2+ZAqEnz0u2NmXaBYu2/u
6G0iHO29k/DjHgJrnKfK+54yYHzCfKFviAybU6tkk9tkNLWXsdoxQoSmXdfs
VaJzkSFurTL1QhOaxOa+pKRVoV92rQxxRxgMhRRr2nFl4Gunb3tZikpB9L8Z
zbGEFji37XzO0bgU3POi3TbMNhzeCLCx+AQmgZLyvR3NxKotDv/gVqzXChHr
16h24c1ouzgncD+CjGtiraypJ3Pxgk1kMflQHLyyf8hgRipFZ/Hu2CbDcuzI
tRE+6FoII82cjy0PkeDpT8WUNI0sWCM6kK24I/EH+bvtPeZCLCLsKJK3K8SA
c9RfLU05eNA3f7H+CAnflzMIMlyI2+KQR91H9lXBjEbeohjFHOXb++2PCDqA
V1Gd+NHMRiRZ2KaRbdNR9r9ZAYpyGRQFpUsfKrVF4lnZJ0OrdaCvVeZ16V0i
/tNeL763rQbz5c9fWB8JhYIP9R9Hv5PxC0x4iOsEIZvtae5ybgqO7VCtOeXZ
Cttf96x831kI4sZZWuetHcGUOOqwd7wCqxsm88KE64FdTbuuhLscWXZUvRXV
TwH29ffvk8j+qO3zzVm/PhcEnwl80297AKHbds9eU8lHRSmjEbetPYTRmwqk
rDdifFqQoVlJCULdB1WhJ7V4ZZS34cSbYuioXGt9xpcH+mwU4cJwF/hwYayw
5HAmeFYaCzorVsN4cvv9cMwGGtH5ysFnZOiy/S0lwViLBmWDDXlMHuie+SvT
I6sIBN21Q+bKG6Gl3P77vYBEmP4hvKE6s6Ur+UdMcXalyLGW6LVLKgfT5FS+
pVyqgLPy+9sfl5Bgd+ktwRGux8D7XK7v2WQ7LOYsHs8AKm4XuGkz1xCAmzOG
dOGGecilfNCUdKIZHH2tRvj+5GB6H0/j8rsEyFW8I0m7rQ3OupUz1C+VYZGd
pGPYlv7kb1L/TE/kQSlZVZWOkoe89NmhwzbF0MnA2MRdVQgxv+481eozwcP4
9bTvz1i0GxI13Usswoz1rxanswyQo1nKyqnBHVlkwhvLpRC4ODrvSp2uhV+R
ukFBeXkw3uy5zlwSjF0161y8S80wQ+AyPUaoAp6dUW7vtvj2VSFv9y4/Ahrt
nErjI/cAa8teVW0KEVhc/H+nROTjnd5QaX/1eAhSLBlpGCnBfUGzv04dzkOr
cps3FvcytnyaYZf0RiYU/L3RbUyTBbs9H3tmlMaB46zi5xbRaFAKZPN00kuD
iKCku9OxBKCoeFSseVbhhSRnk98PU0GhuKy1cqQeJ9WULvtVE2BidLlDIdUO
o6d1RRnzcuDAk1BL5j0RoPlsU8OTn4oDt1rukE0fQ+5jCyaTT03408NiKdS1
CL5vlvZM8BVjYfSVtPdZXVDG17XY0JKOxF6OEzuNmlFI20d+Tb0EvX0zHulK
+kDffwIatZQYlJ1IEdA4WIqW/p/Zox8boaXR/nlVBzJG8nzZt8FHANl91+r3
kt3wJMFbkJY7Bovm/upr2fohm/aR3z3RD3Eqs4BL73QeJj9RyHKt9sOm/l6/
GqZq8D2jOGr4MhiCB0TT6EoKQLxGZlDpeSyqnGQO0RWowWOh2lWBbhRQkbYn
0jqQ4VXvz70sZ4ngce5JwQuDajx1giuKTi8OLCQC2IlFRNz98biABHcmBCja
fTD9LxNjpj1/BFyrwQ5TyY+LCltcvHelTyeEiiF8fq2/LW0h4uEN49zWKqx+
cTbIeyoeBMKV3/ZeJeAOoQjpm15U/P1GbPtyUTSa/vg9zXsgBMe/rwTYDdsj
V8ha11IKGff/1xgzf4kKgusDdl4njGHniRnS82QK6g/oBQ751WLg8MAfdWzE
vpdHSmaLg2Ew55bs7Wu+KKLB1RPKRcBfmkvI/aAMfYWnradWrgKPLv+9ALYy
7GIhvI50LQDtnsNuIs1m0PtKg/Ka2obW2d9EWXQosLe+8Hj65ULMe1ofpnyK
iPsJ/uIra364XwFDmSqaIJzT6oPjsUKUEjp1QJH3AQooH45OIVLxPd8EV5Ix
CSmzdQYiZ5JwD48qwx4yFSVXcwS7+Cj4Sfso95PlHFQbu7PR5JAFMbqeX8k3
vZFjPIfz52gNWh6SdokZCAbLp9eUNcqrIPDetnnx9QBk0P0i0ipTjWx0PszC
v8tg5+1Pd/gJSTgn834sRYAMWc1s2zTZWlDhyFsv8+hKVJiW1vA9UQC2Ax6U
PT4X8a5ZsJtqShqmeFwccpIpwe7j33iANwVrBX+KRTs3oXjaecchySJ8oh02
Q9pFQma62bpmxXoojazj53Ztx18/zce1bnvDqcm7rYPzRei4HuTe8J4Akjz0
afu7/fCKfmLcBz4ysHX3u1vM2aPnw48hGxdLsb75X9dn0wT4u5vbl9azBvQb
X1Xdd3fBwc9+VCDVwwX6HUcZvEgwD70j0xMUHO+v2nUyPRCa7hifAbkCvLpD
f3xoohDJ3t6t41O1WPd0NNZHoxBPtM32x6pn4H7Hvb+urGVBYlJ2jcnlBoxp
2PmI8SsZnCa5967R5SHPhuEeYa4tPZPKbOUOtIBvpU1pp7w7Wk1nWXwwqIBa
+3VRVek6CHtjKOi9EguHxqR4S77lAoHUuAHbqRDloPyAVj0XerJHwvNa42Hl
k2+p6ssmPNU8GX5/phZeJP6z+OhPhI3Zw++IJ3zBKtHg+XxsPChUjF28yxAP
eet3B6sv1uLMnVJIHsqB/XCX76msOioVZPofTCODeEsFu2onBUaOXhJjNyTB
4RP+f7dtVqNfTc7bB42pEJ5/+XE8LwlCCtkHX4hXwz73JsELrQXIOXE8Yc+X
IrQ68Hr6xHA7pmgJ1RXtIoIm3VSmE2sVvmHdtrmthIJsU6ur5k8tQLn0sKF8
Xz4S7GYeP4zd8j25+uZH8kVoVj9eSAksRP1bz4lpPS6QdTrslppkLfIlJlgP
jJHh+q03N8yHi7Z49KJcgzIZomZX3vob1kKiSp7wcmkL/lPyY/BzCsEErrH+
13dt0YOzTEylMQdO1z774y2aA/6eLxIVPYqQ3OEy8fJeEthuf/9zPuoImHz4
I/9bJgfNL7UxVNYX4P3wh+9f7q5H4QbpOupWbn7pVtvD29WA/j/OKieZ5WOH
HUeSKy8RjJaKn6pY1WOrPPWUS20F/Mc1ebzSPxU0jz2QaGf1AlOWVlv9JyGQ
OjKmJCabhi7P/Sxf0cQB9+/kBuJoCijaMR716Y5Aet9FN/HzycCoWsrF354B
SaMdVwTYs9CXq61l7mI1WGkXqQ2aV+H3pHaae2I1ID3K6HcivATyF0+pJK/U
goV5Y+KzLe4R/35ONWXWA2S/dWa99aSCgdEXDQXBdAzLdJkRFiyFPcyDv/U4
qrHi9l3myFUfJLCN3d6cI8O2dxZPXyilwVf+O2JFfbFwMVuteMkqAwKkZ8x6
VklIOqJXdbDXGk0qX0/lnCRAI93N3jOBFZBAuOa850Yp/steDGQtIkPku4Hf
5w9WwWK8ogftXAXanpAlBIg0g2bJUvmbgDzQ+bexKXcvE0t6XKNzuVIgZeag
6lG3KhzYfemXhQ0J3c63HD8sUY1nKi4+cNBsBmOFw0J3uCrQOM/6F+3YbShm
Xt0vvZaNOL/qu6pAgstMD2Vi4mORicM8qD86HRslYmhlhLNBfJ4rbTm4EDUd
fmjyWydid5UUybCgGNa8Aw7U91Tg+C2nSxq9caDDHUvDR43GCnddL2XaNNx7
yH3B5w8ZRWMeWHQv1cHqwC3Hs7dqMZRdmvr6RxHU7WK3/dmdjx/KxTQpPUSU
aY9akvukBQcO3uS46VmJdUkuHoe3cmuelHp480AXeAlcDSa6ZuIQy6RBAsSA
0zTbOq8qBb8faLw6sL8JA3h+PVoSqAXFA8+/G1hWgSBlQDlaJQVFSj5LnHyb
iN6nmgWzTz3GN0rVfJSpHOCc8mEu7Q+HSJ+jviY3SjD/Hd/+VJZSYAh2FnPi
yoKRV/YyS2W5yO9qETTllg/CrM+to7YHgcsFY9nmF4ZwcZ42v2mmBehivR6f
+1yNkbb5Dit+WciSscgiPlsO2h0nHTmphRjDffG94pEEeCnA33YpeKtXGdI+
L98ZhYM8XyBKWwNzU5olWpTjYaqm46LJySJMgo1qDckmlFf+u3rzhD9at5XJ
qQfGgyceYrFd98NuyXU6RgESelesf2k7XQyVwYq3g0eo8CE3erxsqApXnntw
qMckw6ty58EKqzgwl85KyGorB0PW7Yen9RMgZeRDevGxOGA/dq15gLLVbxnX
Y9a187FTO/S9ZF4S1DEdq/jxswE9l8TunMglIuvzFYmLvVvz6trIqPj6oU7F
g8jl8UbUmxt+y9uSASF1nEdpT2RDmF/L9xaxYoxZML9+9OfWvV2Lbdrv3Q6P
t7kkvSGWQ/9r1h6hk1lbvC+07/r1LT6SJSw8tyjFQ79Fif6ELT/P7sy4/yoB
FtUqu+IsO7GFabZ+QYKEtJaXZO47puJ+E0s1upcJoBxyPFXrUy32VL5jFHrs
haahSuq0tqU4KOquw7+hAzRaHdsPsfBA53wYjdztEvxtf/ANzxUKlrN/0ZDo
KEL5GHww/zwG52z26fJt68absxuxhurxaBo0ltixuwrvKF42ySmtBE2W3n9e
uVs+2cjvpGUag3cfXTW+V7nFC8U7Yov+eoO8rwXL+rM67NFJYu43SAP1saPW
STcyMEo72FvcvxFlBQ6zvzVvABf95YJXfElwxSOVO6UxDnT/ni2N0KoBmjnx
0c1bt8G33fD68rAA8sh3X3jI04qSEhVM+5bS0e7BfZl7BmEQ/cSrcCqwGk1E
b96TGiOh5TXH3bciGpB+HzH2fHgiTu6Vd+hizkXlsGDPN0Yk/EbHsvdbfBX6
LIyEpGyvhyl5ZXedrXvTYfS/d7/PE4ihfwxvTcUAd2hBK08aAUgal0q9V7fu
+0r3g/2VubiWNr/XOZcCjFqcKZl8ObA87HLLJSoYRdkO7Z57GQoXvvw7Vvsf
Bc86VEm9SgqA9RY1x7vSZSDnsGOUiVyGjVNn7u9qT4OA6ZvfHo10g3ZMRr8C
nyP6Bu5rWuKoAl5nyxKhpyTQVmPMZZJpxZ6rTAel26ohYBd//cw7U/CU6tHS
XU1AbT3RB01nS6CqPiLzlmcpKhm03hhw94cw/yv/nR8pwi/72y83XwmH5I+F
nA9LCpFks8PbM6cepq1UAtNM0lGgVWEpwKYWPucr/N1cq4B/Nkv2+8XqwCk1
POddFRXpxGl5dlQi+Lsqf5i1jYB/usYLnacz0dHNbC7MhIgbqvYX6rZyIlJk
ZKSV2IrNS+xXKGskYLb89B9TZyiURzw9RN9ZBScDTf+8iafg/tRzskHmSTDK
O3Zh4oUnpHme8nlzqRBWzpMEPA3IqFT+WG5oIRlibXb/OSEaiz1Vw36tvC0g
c8BvW93LILTXHeEIPZMEppf/aXuzVKBJHb36yrtWGO0UO6W5dBt3clVnJxg1
QpWN2YmbrRTw25Mx2/MoDxPoTMIv1ZFRWtyYV9MkH7MlGwqKw7NR/WG35aMf
xbBzpeXyB5ZumNCdJudlxoJB0NH9L3TT0Xyue7ZZKxG5jifwprBkoOuuG/9x
EEJQvTEnlQlzcK/87CPR3gwwuShWkKVeCXH5ra+jnnci58PGI+XZ8Vv6m/Hi
Ls/BcD8vK3OVVmihHrfQdCeB5OsAzj8juTgvMbLO+TcJLHPyDA65++Kh9DKW
0bMU7Eu+mTK1lg0EafJEqFYK3Pvhf0b+nDOofFiyv6xRAiST4d/Nu5txMPg3
62oqFTz9Gho/LhbhaBVHqgtLM8Sk/Fe0ev8hqPhmWT5oikTyLs757c4kGDXu
lSvKboKXyvYpVbYJKH9+WTK7pBSOyPQ/L1OshQN3Ke+cvxbh4WO3blRMVmz5
LIdOoUoEyrUZ02SvxeGxd3e9xxkSseSGDsGApRLjdQtijn+LQ6cn+jSGjyqB
FK3smzNgg+x76m14yeWoY1gXeLmDhPNrg15f4v1Aa/U04SShFKy2RSld5i2F
V8ksC9Zntt7/t7tOjHY+vE35urPjPgkyvS9LOlhQwZ2rU4wtphNdrwicfd8S
CZ876DLLj2dh2f3hc2ZzMaB1Y8MpkbUMwl8IO082UkBIiFvbyLQGVBumyiYN
SjCl1kL0smMslAx3icnRpeCfT/Fc2+XqcKow+MiLrZxnFH8z2edQBzpBzE+S
ZcJgUKfKnONqMvT+Dqp5NdmKsQZEcfp3GZCx6+eLK7S5QKn8rElezkbPs3f/
tlgi8jEtvjR5kowiF3VZj0nbY9ZaSGuIcB2W2gyfyPmcBu/ejJViBxFWvNrW
iSsluKdV7sD3AALkux8USHlLwsAPjWuzppFoeFy6ccEuBwk9Qdx7VingPtT3
xP1LLb4rJyt8zyDguaCSzYascDAe+nVEePIOJmaPvRSwrobxytrA0XJXPPH5
xTKxJQAFPfJ+qRxwhxRfJU+lx+Z46U+wjfUQBRp/7rhA5U/BrzsOiFQo1mAa
zfHU+tt3kWO/xW2z7fG4oE98I9idD9L9JwvCDifhrpIWmqxFY/wa/5R5QioC
BvIrR7h4KFD/gry5JFGE+w5yij4ya0O8vH7jJeSDhuyqV5hGJezmd9/k3brH
gmvcEsJM7VDky0C8ZJKJKvvrSh0ouXDzXQzd/fOdwLZMCekSigd7//bL6mmF
KJRDe4tGOw/+MrYYvr1fBJ3qFyMPbel4x4VLPPTn4iC6K+rfVzMS7OMNYry6
kI4xa1+dXfVzUEnl0sDjaxEwq/538feWzzPGe95mG0jER8rPjyXfT9/K7XYP
p7NbffXJ4mz+tkzkzQhmOniFClSbDhr9smy8xiJ9/ct/2VDeumxzeaMabwzs
UBvkCEZzxt/a5k8KcceO5ZKgRj9o2hUjnX/ABd+LlVR41sfBJdr1PCnxbLw5
39DF7BAJmv6aJg4na+GS3eqlv75l2K6Y3ZW7hwhZ8dEahgv50JpMua51igqM
JdmCFublUPHVeZNHuQBG4w/ccT6dAI3WmSzT/+JwIO3lvcqcUvCYe62oopKH
txZvHbV+1Aay9jc/bJQ44dkUzn3WSaHo6ZJ7v906C2vtrf9euZQMZ/8F3h4q
8kPrnZbL219TQeql9MsojWjsT5s1u1yWB/oSTQU3X1IgbY53fGIiB7VPOl66
fjENh3zy3lS2JoFeQMUVg4xK+FPubPtUvBCEJ/807nSiwtmuCua0vhhQZLfa
5BUrQ8u+X67DRCIQbmzQvWggolLwZm1TZSFYuizdeKfohcHneNdZr1WhfN7B
lO861egkJNj0ioMKFtXns/bqJqIE8P75pJMCF5bv3CskkFC8oWxpl3EJ7nLQ
ovPfU4QHsjcFnmz5yWq9hWkEvRtWd9Y8y/+PhPrcMYpBK0SMaO97I3G1CvbP
hhyIW6dCLsMOh7YXKZD6/vT7VwlUDAuo1GkVLQSDyosCHjMUbP2bkv7jhDj8
zPgrd7+xEP1mfjOqTZAxrLZ7IEnCHYtGx3j0xAjYlxhi0fHYB4g+PNsM2FNh
/4U9kv5PKTAVEHIqcJIEIr2U1ALdJmjd7KkO2qGOHiy1BSZaRUhoneq3MnsM
Iourrgcv2WPa+/5XGQINMPCaznLnfhL4t2mJuy51Aef1eHkHuQqsyB/S6ErL
g7gvP6IGS0pA5e3w9Ld/JLRzMmzWO5kIBrGclZfsSPD7VU3E62PVeBYvTg2I
mIK2ga8aob4YGZre8PMndoDlrOzPgthc0HH/8un4WDE6J0dSube3g1tzLFPM
Uj568t+N2zAlwzLjrcOLylEY1uRlGDXhgo8C/Jdfb7PH8hCru98qMmFjLn3z
Ql0abF4X01g9Wwe8Jx5In31fj6m2fBns2IQir3RiyUnVOG546NWbQwQwFJP7
KEVKR1NZnrgL3wj46e5fxpPqZDx66jDrratkMBDjLzr/IRf2H3evTmSiAItD
eQd7dx3Q0abfP+yajdvb2E5leTbBzn5h2TdjycjseEZh0Z4CByxFHT8+C0aR
hZt338Tmw/Ykntm3dxpgMK5Ws92/EPgW6H9uU3sAp9wd/uoZpsBv9hiB8xq+
YB9AajN/WIWSZ7qjaH8VYGaoRfebf/no+ub72c97CbjEUr3j/MQTOICHJ9zY
83FC/SV77N1CdK5R9Uh8nAp0nUUpdRtuIDRyjuFsYxvU8bSM3L7XBMbF01YT
+13Au/lTditrDrzJsQ004SyGGIkOs9IkQWSo0yn+8rMU9nv/uc1AyUO1yUdk
noEInDl/n+1BjTfMCrUbXNxbhLzpD3vyX7sh/yqjkMj5QHSll+Bs/pqEowzq
eYcXrYBmUzlJ608uCg67+h3ViMevqfruejkkfJ078vxvSCXMM5ueOPw7FVwF
r/Oz+6Wjf2d85yXPAPyobKP05UIrcMwnFLJ21KCBZOcnno48aGDpePVNpgy5
iuoEnHJa0fiWmvLmXzvItTDxVGdMAZ09rpv1RiR4ULr9kXx1BaaV8oRF1KcC
zaHBCd2gTHyrJPVyzTsHWs1HtK5w+uLRQs9G1hPZ6Pv9/j+f0FNY0Fg5cgXb
cfTh+RGqbgUeazhSmKdDhRGpgOCB1QaQoWhSPgs8hsgJNGH/R4Ijjs8daCzI
+KcEHsY5lkOpWv+p53HFWF+Y12ezt3Arz96dSZSqwetJRx96asdhV/tDko50
Dj7oWsvzNHcAlzffF/g3IyFCnvlm7J0gJBO5jNsvBsC9cvZlYpgzvPwsODZr
UACXDJ+FSZW5gPTtHMKNw09A7ATn38X5WLjWUD74x6QZDg6e6HPtDsLX5bdN
v6fmoupJtuDjqkRUrfe1E54mowf1a85xXQq0Wj9IKSolA+HBWlABqQ5mBr5+
jlavghjrYbaXU9YoPt2eSrgZj7I7GFM314vxuc8i52/Bbpj+96uNdmcd+I8O
SA37c4BMwHPeKSoBy0Z/vQjmL4bD3iYHll/VQrSUbqQGfzYylxzTzqVG40fp
RW0aKxL4WWqWhAfVIVtf338fTMigF3TpmXveQ7jt+bp2mc4DdSfoXz1wLcEf
wT0/aBTL4ILIWXoamRw8FlmZW/MuE+X+5vu2XqzEx1UBVbLkRjw+XG72WIQA
T4cnnjgKkpDwjPN8PHs6Ds49+8dPjcABXb29J48nQ/XPYk8uhiqgCz42H9wR
gZ138+dX/0ahjJuf3q6ibtifLZbg00MB58orn7NPpMBLw7ovY5ddgX55+twn
/VbMde4h+AvGgAqPQXSjdz1yO9yftysnASddgIhGVx32sTnVulOTMEz79a1+
jhwYbLo5YOScguEhHNNGkySU1xoW2pGHSLujw9X0Tin8pEuQk//PGP+7sac9
3r0ctNMCoZHQgZqpYuYXGlJxLA+id3VRMXz1ycwEUyYe/xo186QwF2jZKU9m
zyfDvQ32fmr6lm/PMQnl0eeBWNU27VHrenhRMyQY+zAeqrUP3YnYrEbPb7y4
Jl4GP76tMb5WakRdd0eP8HN1UO7vV3tEvxD1vgm8fAJBcPrA/mNGRkTcyzx4
/JgWAaWZ5Sx3HN/KnZd5TuktNSjVEtq/+6sjiLz+93kxpRQcFSRGXx5sBKsB
4S4LJRLycxz8eMvrIY7WliTKc1KB+9bMu8r6Jpx7tRZwV/oBfvrLsjj2XxKc
vVx6QjnXCcf5zuj12iTDldG4IcOTpYizzNrd2UUYso14LmA8GvVO+Nxg6KuD
4lPqmW6nA8CN9smL7dEF8F7nLA1kVsO7gVPMVkPJaFlcENI7S0Sq0U43pil3
DAkT5vG/GokK1pl8etZ1aNZm2DF6ux5zvbqEVP8kwYvkjst2XSQ820FRmLhB
BDrWFyfpqnxxn/z63UmdEqDLUFxcKaPi7eGQz9M7qXj1Ys/PtTOlQMd+wXfu
fRMkvckX6ajvgKk/t6otWYLA4/Upwb/lsSAlu9/F11UDz31n7xlOjkLrxb9s
TBfz8NnXEXbdA/V4+TWd8KJiB9JkeNef3HcN+h/cvyEt3o4lXG8MmsXCQIYp
3HGorwI1nm3kebJ2YvZX9k7Rr6GoV39/hmnQD6Yt51MOc5dDq0ZnStCGAR46
SoMRD8h4Le7grUK6XBzOC3fJfOIH/BHDPG+fuWBrIeY82WaEBjlHUt715+Jd
wyvEnzQkqHHSeWagVo7OM7Tvi22LYGTx6IJ+bhE8JfJNPm6PAcYDa1MKizWw
e9bkxqeorf7XsOzOxdsK9MdsllRrI1CevmDqRHUpujf8/PvNxXcrX+1Lgutb
cUrP0tXx0yNIobKflYgqA5k9HhG3vgbC2Mm1sdRoKpg714beINXDv9hNWjuD
KFzyuC4/cZWCN9erZtZFQ/DOZ5LYdWIr7PfivCL3sBg5iO/a3vYU4/6AUQum
5GzgOO3Wo2tcClqhox+fHkoGrkcDxi9ycuCs3JLij8Yi+GLBvK11vBFsswuV
Sq+koH+poLCOehjMz+66dGi8CmOObW/PVM/BOzvYmA6KEoH+0OFf4wVN4M3k
XXJtBwXF3YJ7aU+U4FPGnRJ1y1vz7nGl6kcUIIfxz30BH4kwRqM5GDCBEBOZ
n53znYITxJBvp09WgrSXAN8IPRVzGOgy5/QzgCQoHFNp4Qk00vU9bG9J8Iwa
8nqjqgpUUxnSpf3b8HXFQ/LQrTp85v/AaPpbFmQlu65t/ssAgQuh98oEt/h5
1o+iwGoPN7yNyD6OzsAcFV9Zqp0IWfSCwzJ9DVh39c5dtuck0C9rGNzQysF9
3KX77B54w/wNWvGLVfk4qiXaLN+tjQ0mH0wZjpJA5t2AX1twI/JzD5b3HiwG
pRfVdaR/BkCVvt9cNE0Ek5WX2UJydcAPcmkDarkoV+mxzr1aiwxP/5Nlk25A
8dn7fr80G1Gra8nd7VYtvOwN/yp4Thl4tFYci5LCQeKyEzVHrxRk3FtP9L59
hO7PfAXN8yqBx/P1NrGUIkzSvzl4O68ADrc7K9aeysfL+vlTTCplMDc8XLDt
qA3OBR99OhZRCsa3ffVURfTRZc8JkgahHGRInRceLyTgK4u18fI95VDjzTUZ
nZ0I1FOv5kwcUnHjGyFs7PJWz/ykmVFFSMechwUlMyYl6M9m3/voVBGKoFwe
+WAYSssXF53fWYIzbtVhxitW+En538LMCRIEUAOT19x9gLQ9n2FS0gN9pZ6r
7vTKBNrXR4QCJyLRXHz60Zu9VPTgsyy67o/Yt/RnUJihCB/eGiyuu10OAWOJ
qdMnbWFe8dQH2f+CcfCyb9TOA604ktd0xPZnKT55OrJx2KQZbYpEbVOetcBB
+cnbdtG5wCWQHNEYRsDogMqzVXu27u77cddbX4pBSnMtTejQQzBk/M8gOZmC
n4yTuf9eKYB/QVr3q7sQIlqMBMYqKPgmXfLBi7PBuG4t185rSsATpUadh2tz
UW3u1TnjGH/M+STia3pti/fsbd4rHHTCDRsOltidOTAkI+PzvqQQb5Dmvhjt
bUImfe3i62cL4EmDtWhNYBzka/CMOw7UbOXFh0Ny3wrQ9U86k9O3BFR+0rv7
rkAdqN7UJGg+rcH1JZpMvYYAvEVUW7rfHwt1wp7uk5Nl8P3FFwb1QFPkTxNW
MKwvhtc/zX9dM9vyu9Oy1NUAI7zHtSSk+uQ2LoTxP+iSeAwf/JXSB4sCQSZX
fkDQ0R6ntjO1nshOwAd7aRS+bPVrV5W7J3s4ktGgnP1psWEJnsjd7LasLQaa
36vp49n3oUs2JNFOvxT6Av95fKYUYIay6t+2W77w+tK4hpTyFkc7H06e7m6A
TtZWdw7/eHy1MvSMVFCA3y6B5thmHNQcjlmRpWbjGDNDhsKjfFRV/vin5N1j
zLbUuj1k3YNRmzQfc9ybgc3oAP3O3iSU7m+xEa7IAkYOUorcMXfQyFdRknIo
hOeExtvn6vPB4X71jPXzNPy6zyqI1Sof0k6w/WwaKgSmKVKguj0Z0lmP3VRS
TocTb9tF13+XwM9rJPGV44HgavYmv/BVHYQJfT0z+oKIq8Ve/gsJDcj/hYXM
FkbGu6lhHsOzuaguuSE8GpEG82kVm73jOdA2vHKuxb8S8gR+t8u+y0XG1L55
nidE1BtYfOd+gQQXHZKsn3+Jh0WRvWpDWYXgyLlJM0WlwKV91ZbVQwmgLPrr
2jhnC2pyvrOSSQ3DDp/50trkVJi1HzzD9CsVcrMzdF50eoDsnSvMVcUEHDbU
l+roagCqlFY+daQcvHn3zGuwR+DXF/RDvjQJuJFdeJCiaYf0Rk9fdjYlosxQ
p8P9p1t9Nv0jF4t8G85JiriK/SGBsc9NxwOxOXCG3rPgz0YLJqvRbURGIZrr
rZ6xOeOI3596Sdnm1sB9717e9gUSqNg6vDF+UotFL6XUyr7lohXzwFgiVsDu
/X7yuWOhkFnldGD6aD4cKaChT86qxg9vTO+lnm9AypxfD/+eXLS0Re/erBKQ
XaDRgwtZGMenFveIOxdC/h5/mPDSCQbXLw9LiyXD8VPLMlR1Ei60a+b1TeeC
oadVToVaLPak89FNdjmhfGA+UXS+GEs7b7xvKiiGg9rbTZRT22Dg70W5c/Q1
0Oj96JFsQAVm60XeFblCwNzUZfV0xgQ43etZftIhFWSX3Md+RBKhUP1qdSpd
Ae6rDesNVMhH35U2ocRDElBwJuLst1+F+HV0NZC5LRJNZDhn2IXjsTvT7J/M
jD8KnPe4rPqiBDdokwdJBuX4PWXEqqIoAVdvCqjZ+BTC32rp2y+Ci0CBr9GD
qpaFEZ/pElOooejnSD73nS4Bzrd2DnlSE+CDLOtOfn4SMl+PvF/sl48ut2Jf
aRyPgo+zKl+5zSvggpxOWv0PCtTtUa/9MFGN35vpVE229ug61X70GZGCCzM8
c98U2tBLudRrUbYTG4Suy9M5FsDDlo3E+II6HK3RX9b6ScVHmSZee0UQCJb2
htvP12NS6MHRmsRkqAWte/H1JOCwK939grMQVyx0CqQdipHNlSZl3LAKtbOO
/7h3/CFEnbpOM/klGsdKVnZ8CE+A6iN16zn6DRijX5i0WywW0z6eeCj4LAUv
f9Q/6TiVjL2Jj3+tzufB9Ocmj9dbXNYZI+CTSd+BNheMLJ0hFfnYok1EfEsh
VC0wQGJnDVz3fjVFPloMxZXtz7WOVcCQ5LOq7LoS7KM9LapYX4PGkivec7tj
sONfVaLB/QZsbacZpFw9D2xH/c70GiaDlIlob4VDPShpVTYI0OeD1ff1/2oe
56GP+EqQfmU10NnR0HQcbgb7gQsByapbnO1zKTA3qw41i65Q354MgI/bXWyP
ej/GiCsyz/V9PRCu2Mjx/EL8dSCOc6UhGY6KJZl/lfbGi63D1cwC0UhnkI29
Y5no6eMdPX6wEbNOmnRtdqXCo8/R1+hMypDTSTYlPrwBBsuuXXhEawoul4tZ
6vbk4TLryf2BYlv8dk9jiivMGEetjnjhPiIWDkSH1h2iggh3sRqfeRaw9Y6p
pXV4I3Aq7ckvr8cJ2v3qT7ZTUIj9mantTA20LM8ek7OOxadz383yw7e4n/qp
nVJbhuVSC1mKjgRYvWx8zel0HNboCb+j3V4HGaHzGYdDK/HP6VpFIf1keIt8
29yvkOD0z8G5dZUCKC2sP2H0uw43XM24nNnyUCacQSivLRVSxou/hz3ygwU4
0h3RR0Lfmk+1DRdbIT07ZleKZRmQ4mnp+JtIyM3udbLkajXqF6c1HW0oxnOV
k6d9duXiwalhqWP2OWivoL0JrI3Yd9PCSc3OHQjysoeORFtg0bar3NerCjBE
qCfZm7Mds66IHq1oiEN6D+3QEsdiaGU9JTR4vhjow1XGxdT8kS42Mv3wZDpW
KNmBkkg2zu3cN9MrVoXu8UZH2+QeQ9TBhTjNCzlwg0Zk2SMkCGkfum0jvXME
CZvbn2QfkOHCtL2rqVcOzGu9dw8bpkCZx7gEuifAmMGeL5c1q8CzLlCg9bYL
ciiju5MFGYhCYgoWZtX4O5k3EIpzkDNe/Xf+h1wc2JZV0/M2EpKtS8MnaYpA
CjhossxyIei755qGKhUyFyRCM366AL8wA82CRSSwRh32nWWtwFC1gbeyuyjw
5kryeD1/PtbpBx5yvtkK62Fe/V/Di3Dnb1a/xDfpwMrbkjtFrEXi0qKg/5MW
tA89wM2VZw285YRQT8sKqHj1TzmBkg5ao4suu9XbwIEv9P6Z2lAwGaAzetZL
AkXNG+Qfr0hQdKu99vhiMWg07i5p66rC0z0LnJcTGnHd40ZXkSkR45trGi9l
hUNoy/NO5v//y5O4s0D9ucXJHCEvs7AKZrdfSzduigQu6ysPTtfk4gcjveAM
/2D0N26TtJcmok+q0G7F93kQI7lP0esfAboOHJt36fFG3ntj6gOBBCiNONLs
MRaHB/vFPAozc0Fo2HRh6m0MKj4S42c5XoYqfGaeth+8MVNSYKLhSya0Fh/z
ZUpG2Dhl/LiSgQIFTM0s0S+IcDFN8DoTUwT6XbjPQfOcglUXxFp+aD7GBQ6t
zst+JSCgvt7/4BUZjY+P7NMb6AK/sWYcPOyCTl8e5p4zLcfF8f64c/uSoCrg
C0tHch6EnHJlEX+OKP3gEo2yExXr83aePmtRiZu/Tn42kVQG0R+je8d3NyF9
h79zTXctqGfe/7v6cSs3kgRYXTJqsJTgdShevxjOpR17d3OYhEEB1tFDJyLB
c9ftqxq0ThD2pOSj2dk81NzvYbl2txg9F7zFEiS28uqX5vfhaTLYWwxwSXjE
g4/mseG8CAJYE0PTyJMpuH/7H14uo04U6014VTSVAPJduaRvrcVQvo25+mFP
Lsrw5FhaRGfB7mz7dDNrCvSw2QXGbE9DsfrCb9F9RcCp1zSddDgNK6bm4fds
BspqFZ03Cqcg+ezLXWp1tXC5XTSEhVSCBuoPFc/65cJCcfu7jgxPeFY/4DFz
nQo6R+ZSF3cmgEHQPlnOeTK2HYjiHjImQrntt+bcP1QoedZUNlacjaqt9j5X
L5ej7BO6YK1Pbqg++177kGEF3BsoLK9g9EMWt1VaPeNq0CHd38Mf7Qsiwq/W
f/DV47mys2Nu5SSQNVQ/W727HoZjkwy/yifDvc7txOpdGdAuPJsuM5GB96Ja
2c+3JMGyHQs1UbUA407fYyrENKD17DmqZ1SH2/927Ui4sZWH5OFg05w8lNR4
uqxjmwDCFQES3cq1OEMoCjDRyQDGw/3PppVaUNCmrDUrLwjUw1qCmdO9AMsy
9y9EtAP/7qYHJLr/0HXa7/svTQr6pJxz2XEqAV9e4nDKzXQFFVXnP+85ivFW
nSlFvSENHnXz7NzDRcVk12eSx0uykG10uu12mg+6qPa3/DboBNoV3b1tV0Lg
07de5xChrZ7JOvT1Gm0rLgdnufVXFaMefSspV0wbt/MRSj4sVoD10IpD+lwt
jlM4L5/KIUMdA5uOzKdYYPz9vnuGlYJRV0vv2L0lYcS7qz/3kHPBLkFr11p2
B2ryGHowiOeAuNYar51gMsa1jS/ZuEXC9wtmXpImzniA8p+GnmcEUv2cfKr6
jfHbvZfNBkJxsJE9q6OsngGZBH2rGxfdUJtH/JGrWx5eEDULO7yWAYfvTLf9
vZ6Pn/d/unbTpwRYuTYfjrgVYou/8MFQJld0YzdN2P4wD7ddyBhQNUgEKVY9
CRWjOPBWHYPS3/kgsMGlsD5fhLY+ucb+vQRgVg57H8AdvtX3cs8zSmZAlnav
938cJTiZpyoHPzNB5KBkurlNLBT5XTey4zZEw0Ah0Y9jZRhDu/1Lqk42/Ig8
eGNfex7KCdRw/rcWAX9TWEJGDYuhL+VQ9jXJYmQavHo7ct4SkwdFlHL6yPBI
6UJkmVUcBEoUnZmVIyFD4sNT7EvpGD3g+8MrpwRu7HDYZXG0BpK3nWFowBrI
l7jeeGa4ANb6KRH2gzWYmJTP/O0hBRgk466t/asE99AgLfqsLvSP8Dp6kbUM
PJ9a/5twKQLSR4roZDQBbYedic80iHB646jgzJkanBq6FHCcsRbVm/r3aVwi
4gnpi6H8ugVQpp3O48xXjiYDs7slrjRDk9BHXXlqEQyKb0jTX6/BjLDNYNnS
Gtx+b5SDRf4hct866qV9Nhl1zLfnqVmnAKu5wJ/owETgl/9yznVHPBhEigdv
C/fCkqh778Z920CJU3pf3lQu3r6ToNx4vRJeXBbJau9pg6fGur0ylRFIt3aQ
psLuEWzw6C9HHyIgKahJhtagFoi2jw4puSSjiCO3DleIARBOe665Fybijo9v
9hbfKwJj5sxIDfpyyEh1+i54KAB+3qjj8GEsAP6o2uqhuypowXJJtXVji0eO
JJ96f7Ea7ujOSop7eaNW1EeHwdM5OGwmxcfzcUvfn16Vtnw2x0xl4sunkjkg
PNkSU8hYgC36njWucY/hRkXDSNLBDDjx3rtT7VwKTlYpSr14lIjfb1RMf/oa
AXS8V0con2tww6Ul4jVNJn4KPKT5nX7rvg7eENlgyEGaS1nthKw8+B7k3d0y
WYi7abg5I9/7ovhyitEHWl9gX3/GUCOYB9KL+yU+RZfggBVfjDgnFdsffxJn
eF6L5m128x/aC2FzIUQkU5iAYXPFL1To4vGbeWtNlEorhFbu67iW2QjVRd+0
D3g/hjuz7/eTngag+Gm+R0uvCTD6Lf/nff1siFdRfbs6XAzvUqN2nSTVITfb
pTspdY8Rxx9dSHWpwD8KEuSbNK2YJK1Q2fs1Bo+8rTc1EifCL87+hM+StUj6
OMa79iQQORu391Q7NiE/rXyychcVOsXFB10MqtH83tPMj5cJyPtt/5ed5ZVw
1NZeqONVNZi5N52l7qCge0Xok7TzJKQfe2C+sBAK5n3yCVcDKtGjdi6UQbEa
jM1axdILSmG8ty8n36ka84UcdvV8rISwBMUDCpUU/Pif9Bs9k3r48SvsALN6
LhoQHVf+2xsJvcXZVzVF6tCLIvPZ/molbHQ6K0eeomLF4SNaK/rZWKqt7LWp
Eoj9d9e+Tcuk41sC8elX9lw4x85pu6JFgiXxhVTT+WDwa7rYmnymDmMOFSra
y4UibdTfsbDXVSgVJnejLNQf/XKjNhk1auCgrjDj69IG7BZ9PUvIygDtOjrx
nykl6Fg1RqfyNwN/jTXanS6PBy6zgIbNE03Q5/nnv71Xg/HiMb4rObYIUn/6
PxZc9Ma932kvWGcVod+QTUK0fhwuG9zROe5XD/0vq9+4/E2C3VefplzaIMHD
fgKzhlUTur7eyya00wVYONPc9+l1QWw56+xFmywUe83GrXeqCu+G9GYaOuSA
PKu+tsWnNPAT4pSvm2wCWrujCpIxtUCqe3cn7rMHlPhfdrDaUQsHGfLmZs3j
IIZirEnv6o7m5lYOS50FwPjdaDvZNw+JK4Y7IaIMeGjtkq8qlWPLNpecaBVb
/LJ9jKDyJRHP2DLquuYT4A63km3PoRgYX3GSTg8ggOq1VZ1q+XIYzmrrNdjS
n9Lch7GI2NMwVco022eB6Pw2Xq1LIx3mE5sYD1b7gXu5Ah8huAbUG8+I7i9y
AdvVwTjtHcbo/a+pQoCjGmeGzDkceTJAsURLL92hCfL79Sb997eik9KPXHJK
Hrq+Nx7nvR4B++y/J1C6iyBpUL+96SsFlGr3Sobs6YJzItqt0roVUJdYt2f3
vjboadz7h+NdHqbGt9NHXyqCmCOdun/jr4OI3kRF6pFc0OTWEt9vVI+hyaP/
o+C8/6nw/jiuSGYpREIqOyENKryVXUiRVTKSEEIUkpW9997jcs17L67tbZeK
aCBlJoRKUkl8fH3/gfPDeZ/3+/V8Ps7jnASfvHLQU5YU9H5GBv1HnK+X19Kw
p4IlUP1+AXC0/8lyyEqHSm1zVYzPQcaqgeVeT8SU369//3vijcXanFltnTGw
zymkMbaxFFn+CXcIGTyChEeFxdr1uWjNvxA2Z14L3SHb1goupuNer9Ll8X8l
sDfdQ1/nHhXajsvGXpSNwRUJG0Vn3TrMGxTO7PFIRrnnP+Si7EugkM6sTrWL
iE32Fl0qVzKgjmzKkltYiHUUobkby2kwOuFDL55WhwmBZ5UuPQwDgev8ivWv
w9HnUGolfuiEgbksR7M/BTg9Yfg2eocfKm1baF0ob4bVlJ37PYoKsXbPrWcO
WzlS0n35VPDDFLQrcNgVYVsPeb097IdY08AtAQw8l4uxcfgcV9vhdJybVk0w
a9MFpRya9N2SDzErOeCQsGcnFLBuZN/5ng+v/luSzpQswTMsX0t5uZOgWje5
Vv1LCrZKt+qYeKdh67LbR4kriUDjnOSikLwdh2jUPuyz3FqXefz6Un8w1MFg
TrkFBU5amhUHvDGBJLHks7Q/GsC1f7N8SDsWDnz9JellGwgmNFU10vaVwLIg
17TrTTncKRVL23MsDSQOnWvToS3DLqCvlqAWY5HRn5sdZYUwprd8nutEDo65
fbyd7lgJaZGp3V+7ykEjeJUndVsqen8RNlx3CAfBfRKSdMHN+HDKgKwg2Ai3
kmcP8h8iImn9r0DoVA7QfDN+yJLShLH9dH5uLwg45t23f807B45wR5iFnC2A
W00DvOc3WvF2cxn1VVYhUoxkGikLVRgSYdGYXdAAORrG926LFIMPfWbGk/1U
+KK1zKZwphjcc5XiK35Vo1qbi5lhWhIo9+y0/PY8D25Q/kqed0d0PCMf+IqP
BE5jp9LEi7PwLZPG4dOu9ch3lmlje1cOvD73NYU+jApa9k/C3/4j49jVc5+l
D8VifnMzw7UDregukZ5m3V4M4m20HXOXysHV2CzN3zEJ5ypzHL5mW+C0+Gbu
Lm4y7tCs86oTLYXDe76Es66Wo+glz8q/JjWwIuTldC23AesyJOgEvjdiSFwN
epQ04qB9YHvyYD6+vvgrSsc2Fw8Mr4hNSRXiuiPxtIh2DkS84v5rr5gLHtMZ
TEp7DCF3l8sJp9l6TO7sWSTzlyOLwn8BnGZduPmxe1X0iB86+RmnTifXIlNW
YH9huS9OXew+pM5fiYqe1qqr9vVgFqgv9oclF1s+aBnMLmxx/1By8DovAVbz
mAkW0Q8hRZSskyxNRC21i9nP+LyxRu5lVlAmBV1vaYpW2j3CkFPmdjqPQ2BM
Sc/nygwZjlSx1ZrplwDNT6ncWP4OCD8akgXn01GkV/q29Ho8+Eo76LF9rsGH
ORdjRg9U4YgW+YA9mQKnc4K44luiYNFne+1FtSBMvnHFZjdnBTxh8WgTLsyF
9fwqK1YLCvbGvg7T0qjChi/Tsy2xJHC8DtafLZNh1dlT85xtKOqKyLxnFiKA
poLmUZtrqbAyaTQaxlECBwZenRaV3Jo/DyaOVR0ugI+ld/7LSMpF12/NaZb7
M1HncUreL51SXLoRJt/yPQczTkinxUqVwDzd0tDVU8VQ8SK87P//tF4Scftq
aJuMmbzHfMK7y8E/jlAfti0d2qdP29T+qkOeC+aZffQJGHLbbNceYh7s19ea
2bPFpzu7d9o6lmWi4MP8J6kNTfA8sa0zI8MPSnN0EzYCLLEF64UWe6IxQfW7
mllNFGg91Wq/1ZMCkU4fipvKYzG5erFOzyoAo2Zs3V1FIsE+ImyYYS0Sztsb
Rm23jYIHm99PGQXHwWMppYL5fXEYLag2fHp3Edz1fTt2JDkBtC6Y0m5jrkE+
lu9vjNLrwZ/skrT+0glfjmy3PuTUhPckZmbXbrTisHWNmM/mfbDarXHtwLcQ
UPlkqfa2xRszJM7u/jGSCcfLFlH4wRO47wyxP1nTcMcFn5C2o1S4Nr8ud+ld
E+iV/JB+60LABA1VkatB1Zii9ip3nUiCSP/W9SmnTJAxef3+yFQuerUoHaeR
LYXdVZ9mFS5GgLeHZQX96yY87+hYR9b3Q4b7UkLl4lXIJ8Ku45mbCxc9++kf
h+eB8BOxDK4dDRincvBx9dN8+CbSyzzaWYLXZf0J+5pakDt5MeYWfQicNThl
qsCfgjST3FG7T9zCGB/77Ro0oTifNb45d7INGsqjJeOrEpE2+OQBu6Z2cF75
MedxIh+8jaOXx1dz4RXfQ66hVxk4L9C3OEJbgS4Pg42qrxPg4Utp7vaYaPx4
Vrzj28EqjPT5POmVWIPCDjrcAmeT0fPTgSB2EgXf8smL6M1n4etH/25pL2YB
7Hawr1Og4j9tr0/dB0ohXkbdzeB8MhSZdZzKpHdG/p8JGdKK1cAyG7EZPVUG
pMMaTarJ2XC54v3VwXttsJirx3vUohJ1P69mX3vpgkr3K14wrMRi6HRgMvvx
YhTq+vRLKZ6MHxTMRmkYSXBImC/E/bwfiFa5XSN4PgYh2T/xY9QaXN0bzqGd
5QYlKn+4RfflgnnHUJCMoSJ8C7rCGt9IBoN9VhSm3FQckbcTU2ath22GlOS9
ozk4pf7rekpQMbgIf6itSygA2+nodxlnKXjtI/P3b0mJuKl4gmt6pAGz7ulc
c1bNhmyH9Mu7csl4NEnsrAxNPvyjE9mh49YAX5euam2ON6MarchuAWo97N1h
t29zLgXpjHKmunQJ+Ho8o2mDnwq/ww5TbrNHg2Tc5kHG9Gjc0XsvRzsqAuhf
pyzzPKOgKfPn/LddJPx5SsZf5noh1MTD2jXDdug08LmVEFOJr0WvBGRFZcPr
70JHr6yVQtONlqIi92JIOGTZvhCTCwZSbgzd1HSQEMq+fv56AviyabFrLVaj
yKgx10oFBRUNchluNgfh0xdzAod0SPj+v4LEI59jwNftX73w8xQIurEzJig4
Eec8TU5TRjLQypn3j5lsNtx4Bf55Sz7w8IO5X4w+GZ6Z7+f49bIGqp5s77zE
2QCfkn71hrJRQLDkxV6CfTlWRLFpTwoUwhWLR5bB0IBsdT6biWMPcZGR7cjB
DwT0t1BdO8KZAsTaXvHqX42Yu9urdLtyNWoM/D7pY1wP1GyZfh8SFeW+hDlb
tRNxYnW3JnO4L1zeQ+j4j5YEC6HKf4stSXhmx86gc/VE0GC65eabWAX9X25H
j+3MBckwqePZW/knnMIWfSqeiJ3uZyxGdIugOmlJxSQwAwc2yzgsr5dhrdFL
rwdpFKC0lV80pW8Humjiao5SPNyq5raW8suF82xnx0POVoPA6Jm7+f988bd/
Nq0NRwGwlN0SUZ8lQmUGlfd9STIIWcqAwTsyzgmA5QfDG/hNXKFEzqkIPx//
S4yoS0C2WW6NJukCvMldbaB3vApzW/YxrZwsxWlq2OxT+UA8AgIJJ36SoOFc
fn+BUQzEKjTSCwrV4mZdLjGEg4I6C/bWZ/LqUIVJxTBv6CkYV8jpT6hV4QvC
zPW8f9UQnWL1Zfo4GSoKOuxjhOrxrEjQdyJ3Gk7ddPzoE+KDPzI+S5y0L8HL
D9tWrPLTIWzy8Pl7p0uh/2wY4+MRJfAtqN/fTO+Ksf/2jo58K4UrzaWt8sqF
kDaFT41Fk/GXvYHa8NcszPHZfll6hAAikjRHyTrFoJuQdOZCdCJoqCy2WjUZ
4u8Sp7tTnLlQ1z+zktscDNIj6uv/tJqR8ng8t9isCmKEPL9KbdRgE5ddywnJ
arDas1tRe7QGOFIlzpQztcCMnrrvjecVsN3FR/zNQi7yV/bb2VIqwV9wc3F9
ogqbzticvXOoBrcJlqRzlVHxG0nG1Vk8HtbDed8sTwRjyFPT1DCJavS8+a9R
VCIP3dWX9aXUivGClM/fHZW1GPhnpDdXtBwuvm5UihW7As0Fvg7ag8UQd66g
hMs8GfdyHf5ix10PI5V8b+LZq0EmQUn4ys8ITDpHvOVdkIj+2gOMH35loPze
O85HRGuRXrfhYnRyNDCHhp7mFiWiqfv8gc/jFAyIeBMxc8sHWlXshANaqKiS
rJpzZTYP9gbvVatcqURl0aGkGmoLfCxZGVOJr8PF5iDeoYoUtGwtdv1zMgqu
f3UnvlcJ2qrTfwO8AekwV9S2jeNfHbbyjV3+OBQHnHd+HzjiT4Slpke0nese
W+eASUJnLRUCEi5cbxHJxx9P3r/3yGiH/y4m9ErwlsMZ1RjGeJF8yA6/r3NU
rBGszr36ezuTjHnG5XfeCwbAx/2JOdpXayEivu/NXHQYFFmyBelW1kHWYNWC
rFEFcOyucAiQKQIhzjNCmrqVOPeuok5akIQaF2cm27rV8dznsl8xB2uBTnLi
eNVsBvLVHi2u3ZuEqr26ux721eCe9EPK70wyoME+g/1BVgUumLeGPv9FxNYE
Gv117xz0F5YXUDGg4qLE4qEn0p0oyBLbRmKlogZ7kcrf8xSU/Geb13eiEFpf
TQUxWJTj6sRx+kXRGvhTVxYPC9Fgea0hXjUsHl9nxOxNel6D1YuG8rfyqeCe
Re/unFmOnsyJ7Ue6qcDILHmUW6cFBXY/ndZQbkGd4E8LeTF5+GXCvNHQhYIy
o+WMp0K36qDtf/DOcB2YXzOzoxUuQNrVvADhxSQQJG3XK6dtgV8br7b9NMqF
W/bXjr9aK0S3HNkQsQ9E/GvelKh9lwBzwzLbDN1JoKSLSZNfnwKtG4mT9pQ/
iClNbk+6Q0C+SE2Rh0ZkzFUyU8+Zywd5hXLxTj9LWP6WWqeWEI8sUqcp3RfI
4D6X9kAxLQ8jN8s4X+kH4d4m6ex/C2Qk+MtuUxyvhprI33PBX4qQKOE3dlqr
CovCJGY3TWpx+SeYZP6jQLNrzjuZf49g6Oj5PgO2ePiXfi7oeUgVBnPE6k3P
EqBnZ2WKGG0H7soSqztArIRTQ8vB/gI1SAsj4fk9FBR4HXpn59oVuHPuzOO6
d1vrraowqZVSgPlPSwTbWAb8sSgZYT9BwIl/R3detL8Cj2sH5t0VY+BmNf9R
uepC4D9xyXTjdBOMV88/e+hVCxnkSZvut7UgF32oSdiCjA5Gqec/nCuGNoHZ
LDm5TOz3A6vnGohsUSOaVxMbsB9q9DJv3oa1MbFfTzkLkQTd2kJQDC+Tww/R
5bbA3PTLliD7XORuYWEm/S7ECKlDqjzWOUCgzJvJ67gC013mupUpCu5rXJgW
MyoFggAmwQUKoCdrYsSeLW5PETnK3ZwKvBEx+gPyScjbFLD0+nEdsNRfF7B1
CkSNd6uvXhOywbIpm9uHJxMrj1bwXDpMwOn75+syiVX41J/VfLI8DpaWChPi
uNLwldrYTOf3UljXMucT1I4A13/yL36W5mFv81FFvxuJ2NDZx59QRcXvH90q
pbPbwOii6cXb3rGonOWhsL67BAxHPntbbXG4KDNLgopdLE5lBD6a2KhC7cq6
Y+43SaArKxzmF+oKN66pWF88lY7nLU8LZll24HCKLaH2Uw3QVKzYOaIopvib
3gxwycML/5rJdDczkMbW5CPfs1vA3UHD8Na3Hp2mP/3hig7EJ2ObPH5vKED3
Lqjmm1cj/Ay+ebHoXD58jxZKUW9Mg29mN0wU3lfjap2p4nPXGnj79YmtXl4+
CjO8ZF0it4DNSPutT8QYvKjxyJNVn4hLZ/9OqgoY4ueb1r2FhiVoXHXWK0ah
DKy2kYtqf7oAi53M75CSVvQOWxb+fj4X3uk8u8OVXon9FRZMLJYFaO/SvOLc
2w78EfeDR07448zRs1JaawmwNKNS/X4pBb0DB8dnAyJQevoynamHCdronHvL
uVmIn44rfX3X0oCvXgnK772YhzyNQ8d/8kcj6euOGtP/KPjw2tes4S9UDE7l
HB0aLkVB2hvjrvMtcHk4mSpSRsT+N2Mnf3M4os3eMwva3xBOPjlD6EutwLhX
A3J69WTkYJeys6MthbJL+/j+0hegi7fGtsDReOAu8NfkPpUIN5a1Dzt6xGK3
27Tus9oSNBT7cuZgTBH6Di009tZYwIXej0EN7GlgMW+lfaIJwarS+9DdXyRw
vvQe7+tXAkOE7MMvLpF4PmowwXOxFoQ7PORCGyjwlqXO1uNMM9R9eXY3NjYT
EjSpjr/iS/AZRz+N8aVA2H7pF0EtMBkq616sFO9wh1f3Y/fp7yHD1RfC4DJe
gOLstfCfayMm2hwOTbUlAU2fovjpu9b4dsZ0r+PJKEzxequwcLoQ2W/KgN6p
QtjgTWJP6CyEAJ7Tol3/tQDPBtvYyHwqyl3e/sPhuD9SufmTZLOIkGFg9WHb
8zQ402POUMRFxQs1nP1lCgVoSWhuf2hQDK/+Y11NDY3B7WZpV+7l5EOa7u2/
1Z+awGtd1wuOlIF+wL0H1wkVYPQv8czJTwQwPJEUIVBEgZfhE3oHm+ugjsk1
7ekNO2w+x3p46Q4JHv2zMRcfToRUphHpau9wcLpErCqfdsKECgftPebZYF1Y
o8MQT4GTkiX2I1tetrBhuGPGNwHimyyPLx2qhxshF3Jydwbg4zc+0f2+vmgT
dC5bqc8Z048dGeyhCYS5t4pSeiU9+Os3m1DGzWj4sWhjI99VC+472EdnZOPQ
P+TaxC7REjz97p6j2UYp2veVMlpGE2HEvMK/qKcNrQ5b74s4kw7kSnE23qZs
mPDQif87VQ+m4uMNf4+Uw1m6/s9WTuW4p358+QVdMqhRF3Kn+P1xPTRj6YtI
Fgj8m072OHgLGKJjgx49NADZ+en5rE9uYGK177r2nSfob00UUch3g7+ab/m7
efOxXjjda8KECMol3/6xTWdjce+e1Y+TPhhu3XN1cIqKC/ku90fla1BDqY/2
9p06LGs0MgladkY16UBDzndPwO+6lIuGZxpe9xr8tKxWjdZuAffO98fBOmGB
Nl6iAk88n39fYpALLWI+CzeLk+H1zN/D9+rbsGWOw57yggQZYwdpin9HYnaM
gYqsHQHrJsVV9XcX4MXRZX3OxgaIvXL0gZVmFY59PJ+3/tUbyt0Ppop3FeEu
+i855hlUHAxOzFYnNKH9rgcSbe6IRn2Z+jz8rijizud51jUJTp6OUxHmLcSu
5ynGYV0p2OF8THBPejUsLcqmziR5oW//TrsStnJUGRBxBbMi/HKrQrteIR2p
59yFTlk+xAWxiHvprKVQNXjv8jypACs1mvxf1FbD9ytPQ+3PVcP25Gqmdw1k
nIhL9qZOGgG977A03wIV+vpbLTXXU6BFvllLGovAKdLlp+f4KRSgxtxJP9AI
KfULqnu+JaMQrn+6OBAPQTUm51Y+ZUCpadKlnNeVMGVE6IjISsA872jb9Yh6
gA/UqB7bvK3+ucD1OTcR5d+ooJNDIsTse3XonRQV5jo5gk+XErBi2n6W1j4d
/6goxqsnlKLWp49CQYP5OHHiuCGPtDKq/Do2IO/sDy06DZce3qkHUbqjTM1q
W30WyfPrcSRpi+OvSrZVVaCWGx2bCisZd6q/Azs+Ihr7BQuvOvgB2+RR39mZ
Cgj7liFJOVOHJ0sl7MOaiGAy+wbWcnMx6Wv4LopjLWDUCfL1piw85ymVtnSK
gq/13Ax2MTzEnXM6Iq0/CajaGBvO8KcU7V6f3IjtLQHuH9Ji7kO+YHvCvMrp
Yy3a+dcqyT5LgJB+eR+hj0Zo1HJcZlsJwunV4Vw2s1jkueqi/PlIM5a77ZTc
fpaEKweL+S2YSZCYx3LhVZ0brBUOK5fVxsJN4+5v5fEk8GOJS/pCyYNwUh2r
U3ADMiwHL4sfqUJG5uRnR795wk5tBbr4TjLcnZc/f8aQCnwN+oLOEUS8N3S0
93Z3Ibq6iM1/OdaGyQX0GfRaGfD78omVfGkSRgvf56wdKEaWtIMJ+mci0Yt+
T8/hkmqsH5mwSeovR4u2x/286kRU4vgame2fhWr0gzN36iNRKvSJ0w7bNhQ2
PR2uEFsNKntoewacq7HTfjo20roSqvzpps6mUWHwZ3ofI0cV5seTI46Y5uID
HtU3P7Pise55Dw3jsRR8cvOUuZ5SIfoSxgZ7fMlQ8u6vdNifRswZaU0g8Zci
m323d7kj4CT726sOr2NAAYJXw7LqgF3sq5lRSiaQmKKzd5eSITFAJYnJthB8
bU9VBP6RAUPTj7nnt7hbfN+pccPfkcBQNJxZMlAHa54h7CqPY3H1gaafbUEN
LBpNX+qcd0E54pjY2I46NDI8NGgiWwLVkysMh8/k4WjMx1uLCrGoeH3A6UeC
Bx4KrhrX1coD0gcNjmPXGvCZ0tRoeVcpEv/2tHPvSMJ3aaTQzxeIIOj+bWXi
MBmlLytEFK+ewvZPZRqFEc2wy06iZFw8DlLTy8TWyVSQnD38zmxfDBpPJxiZ
v02D0V4m/ymaZrjwZXDykwQFb3Dv2htfGgvqX33cqLRUKD6psZ1DKR9WnXx7
bGNS4XC3me1ifA6QQprECv+zgrndX+bDAtzRzPDN3YTj6VC8wSR/cy0D10aY
pL/IhKHxIxP1vI8paPeveY1qYgLqix5POr+SsH0ypdBQsRaedivXvYEOEBoW
E30ZE4Dmab/MndPOQ1aNKHv7MxKYWfK/DD+y5ct7iC/v1zvA1IF9e/yFfOA0
o3kZIacQ1Uve9glJ5YFVup5nn2wYfP37NuuxsC+aXIzjzjNNgrpTTE3v16rx
y29Dmo6tOeR1wNKWQ64SEzbWoqe3PCsyVHfnrr/V2NL1X5vyejaCIkOXE2cI
Gq7tD7zfWoUyRAs5YK4D70SZuja3GnS7x/+eo7gQrpzUoSO6JiDvA/fxL4Pl
KGQQkpqhkwd3iGIX3pkXYuG56+TVGRJ8Pt76vf9TO2QwEKPfjlfgsGtsCB1D
MZxX546/I1+MUmSZS3ZnWrH6j9hdB986kLC5keq4vwRY0j4cO/kkCDMfepJE
T2fBDdoD5y3GMtF++9we06pYdCrsts97E4tFPbR895rJaFdlss9BrQ4LBEIv
XdQIBd8w8ZtxbZXQPyUldNbJEX1PzY+FEJNAeL157/KuSrgZ3doSk9eA81Gb
ibLHGuDMi2iOOaU01NAvJOnbxmNZ65rXV6VgiFL0pVv+lrjlfbXCOUM5sDYl
8XZ8lARZsqzPTkaU4fGFjSAXtmpgOZFGyu0oQkEpsWp/jxLU1c7NN0w3BBqR
Kj0Xs7uY8IGe06ihBduzjQegiwDmldFtfBamUPxZVvFm7VkwnFHZ8cA5Bway
39NEclXBVLxHQsO1SrCODGFUDm5ER3bDS+NH0/FE5ELqZdVkPP4u2uJwfgBK
pgYLrQ5RsP7Bnb9vvmQjRZmQNR8di1anM3IqnqcjQ9xTnsSsJDz7gjruVZ+G
T0YeyDTGk/A2tePl4dRaPGigXHOitBXZTGsM/juciyoy62bKN9tAkFXeuoLv
BuS+avlEwXY04tZYuMfSgPqJ6BE6mQ5iKR/Ks25WYTRj/8/AjBIs0mt5ZaTR
DT65eX2l9+IgIBwik+MsUFMuc2YlKR20zoWs/OKrQb6Cs7O68qXYzr/X6ExL
BLZTfl8VexYM83tSX1ur5MC74rW/IbKPkWNIk3vjcwde/aWnW5TivcXnFQc/
eOSDzlE7xaltUSCferf+zhEC+NydkV8Y+v/7lIN+Ut5NMPjeLiXdJAYE7jm/
XfIywTtXdm7KiORAw5jIdxZHAopmKIdLyPrA7YfzLVP6DbhvuHO3klU2KKL9
Y8LoA0hT6Hyw61gD1l1aP9TwtxnS+UavQ3kIrMlwhVz6mICOh1Zu/DYvg+IG
ZpeV3y5QT/1n22rqhRR7KdVNo1YULToW4mkcC/59Chw2JWXgPOCTEnajCe2E
c1x2sxIxKprziCRnFQ6KqLUz7itBLr4Xq3MvMpF38w7abM39kKoSm9HAIDwx
69tRMtgBdMZ+n68diMWCusgfCQxbdVryrQoqe4RvZj/9vLWwlSeuA6oD8pUo
na4zySvfCBFRfMy+VYXYd1D20NyDAtgFTNMxNSUo0JZftaEnAzETrlTaVhU4
/WfYrmxbLgz9NJJg/lCDdiaK4lm+5ZBzo2/Xzt4EHBi6IKfaUY2WNxUz2CzC
cbBMDKwr4vHmg7ut+gZFiB2x46On8pAkqdTV4hKCjLsPa8XU1aLNAfWWVxb1
wGuf+Pfe/Qy8xNC/MqKVBcuWe9i5bqXgO/Pbj80rqnHsHme90qw38twrWuKT
KwHC1fvdLYFVmPLo3vfFtoeQXq5632BbKKyqOOl1nsiEls7j3PeYC7FsQeCa
3OUGsHZ6I8cxWQN0j6S+X1qiwLMA1rjY64GQt3D+g8XhWrQ++GGadqMeS3RU
eV/MUuAEL7/CKbE83FQZYai7m4sfuDZlf3yOQaYTHBv8lqnQ6X67K3imDpwp
Al5JXonYRPYTf8EdgLOR8ZrrtDnY6j1wJWZXLX4bMGTalVAOWuw2+99NusJ5
tn2+zDyVKPOjaaElyhWUqLOSkg3HMX8+q09mPxndnEfsDLfy/Sr350f29/Jx
yMn7nZ90AdyQ1TA81Z+Nc+u1YYSiAijZvsqgeTkC49hP2nyWy8Dhm3QK27d3
YIFy9OlEp9toHf8mjFvZDp5bxF4VKc+BpM8nsmE9DuskX/IoFXVipAmOnnsd
j0bnm94UO6RjkpGM+ov7JJCPLH2WEZ4HijzKPFO/u1Hw5+8HJz64wmBCAO9u
0xSc/znHW/kd4cOzF2oDlyhwo5+VTqk4EPlPxtk/NC+EW7f9Ly6/z8K5/ZTU
0eBKVHJ1K1XJuIkhO9W6LE+XAJaeusXIkAJaN6x3jlrWQ8VNiuaT/npcdOge
6DmzlRvZ3gxLHiT8OIptQr5lMGOQnUNUJoK5NXPP6X3X0Wst2b3Irwgu7NEM
alFJAMa0p/pX35WANZVRY6QpEpxuE09wPc/AGwSiuN6/RIiI+fLkV0QpflNQ
Ed57sho9C1leSzAkAiPvfe4VQzIkvLM23LnPG5Toy3/ffeKBBsVrnOlNRHxe
HzwyUpmC6xYeDF0tRsAdE2m5UO6Jl7dR7GmrmjCF+e0dn5wIFPdNfWEh5L7F
/faRI8/ISE5WZ2IqrMYLTZ+oM1eaMWC/wH89l0uR8GaenY6tBVp1M6z7a3Th
nwu97oliMqRxBXhFbPkFoS7163GmZqz9m8yprlmJpfl6cQyFJBwT5suteJAL
LM1enznSE4Br0MZg40gO8F+sV+J3TgSS0HEeRUYr9Fqf3rCjDUONScPCN4Fk
oIjd0tx7KQGPP/WUqzBthFLBj4w+bSWgzD/gwBiaB8qiL6z+q0qCH62z6oIX
C+CK7xmq3vlU3J7qT7j5hQxj00Fx88NkSFGRsH/bRMLfLhcixo8HIFnqq3iE
GqKAQ9khBXIBJB1225uqao0phu+H6q/lAW+L7raHooHg697dI3pBFhqb/tDu
0atBzkf/sgYnMpBUn5xlNBGDavxEvuQzztieKeNwWTMATJ4n111qCgTzOcGb
IS7aEK/QsWq/EoDuopPX+tuK8fDl/vlW7wLUZoxcIwSVwVQAfcx4DAF1d3if
vztHxICbYuEH9heA8+Gvg+EXC+Etn1j2/uJ4vF2TUdjLEwEpJwQWl+cioe9+
sIoKfS2kuG1/5MxRgkY784/6FXSg6X6cSmEphbCIY6kkwXJopc1FjZe1oNek
/VfoZgcwsRzbyZuahJSks1OKWXmAhXqBBzVbYOLBAeOTfWGgW/LUziImAUN0
r9KI/UkFmnbxFkWqHFR+O/uXT6IJdnIeljMOKoQj7RaPNnjKoOn5Y7cehWA4
fJiTg/g2Gi2lD0r+tfBFa5lEWqeAFFz6pMF1maKGpts/3n4qWIDerxRrOveW
wtVeL++OhSwQbNnj0dORhnmj3JvRApEYQp+n0Lfpi7t2zaouXyPCrn+Bji39
sejtd3yQoTMUv9KrRHLtJkCXvu75tu81KPp1KiPjDhkObjA/tbduRi2rZ+XL
tEXIwGtB7xaeD3Yh7Hv04rqA5ot60DndLf/86R3svKSBwSJd+geM69GqUX/D
h1iKgbyHCt4vJeLUS/b0ffHFuGw9LFBlU4w02REnB7rEISo0ltXlDRnVTmd0
00lkQK9HRh91ZybsY39rr3raDTg8zWkuid2HRd1rimutmSBulpvysc8BXPX7
mb3+FWInOkyvskShuVw60emNN8j0+5Pj/Nrx/und7bY763Hfvju8/ubp8FeQ
rfcUMRYe1b1b51/MQ61vAvfIjfZb/prOMktywaTu5KTDpHz8PWZeio3VICF2
MVLtZR20qr417n0fg4Oy5zdirmdjXzyteU96Eoh2t2WnGyuB77wCzfkbtVA8
PEtqSCPjBTkHp+FfxUgMfRJ4M8wXmgazacrYH2NAuvatkaRAdLHJ76jUdIUK
Reejr+MpELk9SlS/NhGl1Ui/Tn5XxkvTcWEfAmpxusLA/tuCB4i7XxPe2V0M
Rq6cqc92dWELa8WOM/d8sEfpe9FYFhmocyftd9P7wrpzLytDfQ7e7ZgvWVit
g6XGdbnQjgqcGhUy59Nyxk5NnfnnNpkoF1Nx671gEKyF3FL7OrvlQR0aZwz4
qUDMG6E67i6EZ6ZP7ioLNMJbSmi02dEHMGE6L3h8jYRstSz+XjLe2JJ9tgJN
c9Cz/nhP6ubWfPzyweRWRgUojmTUX47sgXX29Mdm+aU49kWogl7PHjmT5zR+
NFOhYuCG5RMuCm4Xq3s6aRqDpKs50hrq1WCyd+2C5PMi1M3y9+Xod0CNc7cT
nUTJuMCb0KbeXYsNh65f+jKTgbLr5z1suNMxffC5Fi2ZgBnsb8QOeHljVH+0
0dEE4pZ/L7QMcVCQycFt6pJvAnQnPd2lTS5G1quE3GPXUjDt8mDGrb8kqFhO
SsqdqIZUlF0oWKVCePAmQWQkBnnLuGbbOLqx8RXrqbKoLKARYxpKi/cAgZDw
1T2qDcjWnWB4rEEHJF2fSkk3euEbdd0fIaEVUBT1391na5FweeSP6i7GMmR/
Rse7P84Nn8ofKaA7EwMjZdM/Pp3OwiResxcjclFwrlPRrjW3FCNW6E4uMRCR
MLlvTpe3BP8a8ytWbxYgTYcsqdWkDV/eVNSP0fQDQpTR2h7GWti/m0frgaAj
JOiJ0Ne+LoT/fvMbDeyogZb7npMcpDaY+Y8raM/7anT8b+js2wctuJ6e0Cr0
HxVm9mv+ub+9AYTDpd5Y+pRDHcvPmkszfiifmBgikXgb6V4cMlyQrIecKd3h
iEwiyp5fcrzlRYHwiYlppYNlsIwLHXQ7PHFb2y/afdo1oMBF6xHSUgT0eul5
mb55eMqmtlmQphZZHpkLfu6g4PsgoPbwkYDBiWomo1EJlpTw9bdPAqFjyPdn
9YQfJr3UueW7de6/n735lDBNAekSte0rwkUo3fBd2jGjCnU9JTLI8tXg5LzZ
TYN2UPPKu1nmYAWuxzZ+e54VAsy7J61sIA02nh8slf1SgL00dK4OJMQ56dnf
MfzuyNMaYqx5LRWoIkQbU7caaCsSGy8ZpGDKouUMsSEGsqwjgveV5mB6XOYN
vx4y3KQ51X8sKRHZew252YQzkcUrUqGQLxQnib2NO5l7sP2eL3OVVhr+ElXZ
u421BnA7iTtAswkOON7u/f/9zM684MDnK3kgqplI4ZBNRuFjBaf9pwgg2lzg
JOtdjmXlKkOL8sWw+irz2B/RRpS+m7D3sowtNNV2Xlf+RMDDuyao8oR0FL/b
e013swKq3lx2bFt9gjllPpXXjPJBgW9I+GpsEiRF5Qa+OJULVO+My7dn0yCM
rWyf/CMC3mpW/Af3UrCveFlJe/8TNNJnkEh2iwfzurBTrb8J4D76LCj2cQwS
Ph/3+peZDQknsq5o98XC0bTR+4+qC0Dgp6CZ94/bmPKsMq1Zwxv0to8Yvr/W
Cuq83jGvFgNAfn9uN37NBqYoX9ez96qxR/eoQFNMHaSnJ73TEq2EU83y8Q2m
uah//crtMz/y4GqHhIPYjD+qnTRWK/pUA99iPpq10bci9a3+MLk8EaZKzecr
zsSBzo30w8EKJAx+alT7cDENqiedtX0D4nHYbVVFWcAenimavvRgvYdST9JA
36sMsttXvATOVaH4peyshCB/rLzaz7Z2pwqb+6q6u0fJwHM49/Lm0XZs6TQ6
oJGTA+I259lTvlaA2HaTd++iykH5X9sLqnMmckv3SXyFGNB43XO3178ag7X/
vtkmRcHpLpcIgfBAaKfSd5UJpEAxvf+Ba5+pYJdYxSo1l4p0EQ5T4qRKLKq0
GazaLIbcUltKsFISKNtIjlZVFCLr0Tjt6Y8ZILnP/WzEf8VIl/XAYr0sHact
lD+yp5ShjZ2qqwY1DEKnn43b+FVhGkfRh8ZaO/jx1COB+3MWyN9Zduw/UIWH
tc+PtIcnwdehqrTpfRTk2HZK8MqPfDzWnJNyOCwHBBjC+UtPWmL/fxkMpXuo
QH8kRc4qJh3aric76pk2AM3vpObHi+GgKOp/Xe1QNe4WMtGTwgpobZczW3RH
nNcruFYyVgN1nSX9J5cIGE0TnthMkwnWP9OC2Tkp6KWn3NDen4+hnD1tX2PJ
8KhJOH/fiSqk6T+Vk3Fly3NeHlSeWNjqm1DG6nnhWlgSWHnTticer2s2c8zM
F+ISK88Ibw9Cy8YJfe6PVSDBLXRTUdQOA257Ox53icNd+w88D/8vEv1Zz1+M
9K+GfIYp5vFCb/BirnzE9agOUVbrJP94M9LcX982K03CZ66dhAptL9xmsFKx
zb4F7cWID7nf5OLERas0/20FmBuwvHFyrR6U/g1/MtieBy4hE7wKp4oxhy9u
0jTWBQZDf7xZiE6AU88TdqcZ+ePqHfGPxdVbXOF1oJ1uRztqvWv8zYpF6Eq/
2mM2nwRaOw0G12tJ8H42qOupGQmdaCPTv/TdhqkuFkYa4VzIlnSS2rUSDjfO
SdPFaKfCYvfwFRWBBjznnJHwYWLLj1WHw1RKKeAhN+YuVNQA7XvT+q+bPQFe
mVNXjTT8QV/Qp0vJOhBWLu5LViCZIM2FHQ8YaMRRJ2f62Ls+IsYY5T9i54qA
pvbAy+MTcTCh6hzw2zcNeswNv0Q/pGL/Zmwtec0PGXlM+xgkKPjiJcfZhWMU
XIpU+8KB8YAc96/5vwjDTnWNXf0W1bCf40dRl2sl7OqKjoiwCoSJqNydYkfK
kKfk+NqtJSoannxlZczVDW8b92wOHLLF/2JfvfKwJyDbh4Nkd+nbMGcunemd
mI49BVrxNU/u4Y1mYS5Om1ZY6sUXXLsqkEeC/6rj+xRsM0/48PpjJrL2FFJb
5EgwLTCrVnuiClpPvO0oeJ4F5o9mPI+xPgHJ39+N/Kci4GIhMZ4cWorP0meT
JpUzMCuh5kJMdiv8GpUlNo6VYO3VQLYfUQQkCbXycvTkg3/5JbN3L9OAw9Yz
8pFIDjyvJEsuaEfDCx++2geKuZBnxD00xdQIrXMzXH2RV2DZMNbGWN0b9vKK
nLNNqcbvphVnBURyUUXxocbBwiT4sO1kJ+ElFTKE/9JBGRl3C5oVPBauwV6l
5AjjoVpQyz/QS7Ij47FOimLTcjW69rlvxL+rBsm4tDHJylr8bbBXO/tTJKQ7
wTR3NAX09gx/zxqqAuFlcLBqKAb6mI0ZxXwqPtcs+/horQ5kTlSMenxtAouB
w4f95BuBvqroz+m34XiB5YnY0pFy3FH1I3b0uwXYf95uP71WBB0ZlxyOrNUh
E5OUr29cPZytXxM46lEIu2LSW4rjyrAhOlo6wdgJTCr0K4wzGrGMWFTBFFgO
Q4tuYaq+JRiXJ3/jQEwcnD+hdVcoowQulPJy20fmo37uuGR7Rw2YFPN/TzhT
iyVR6Y/flxbg2f6iuH3/BQHpwvNHt/YR0XxH4Iu1DnXgObRxxkPYH3c3WJyz
TKhCpi+ct7wKYqBbWE5uddIJDr546u7dUoynz1Dcz5RYAUPuG4vun2UYvLB0
11e0Gom76vekKm31zbSakzgF4WWK9+ZQUBH81VE5cOSxE7gU/fYUdm7EPKPL
LvIrvhAzstynaeUKEYzv1Y3CC5FtXt3w8r1cSNN8eEVpNBP7vklMd/2mgppF
ZJK0TTKkPmPYCG+tBaXZi5Yuk0V48UlXnQRXAyStF4tysVJwtPiXxLXvZPyV
yBcg8DMftlld8hPiSYdco8/7j1tSkUf+2f0r0Q04d5mdv1X/Idye2nmmZiun
rj07K+JMTAWj+KkzXueN0Yoo0RGlueWVyZZTsfI9YHXLRPwpdyR2mzVVJv8j
QaitMvHmVwq4X7c74WJdgyMV7AOVlxG/y7pSfTmawHHgEp2mTDyEcpgqKpcS
0XvsYpnLeA12Pbd1OyBbABL0J3gjzFNB+/rV3+aUWvxw98DHIp58+LmLs0X5
ST00vBoI0wuuQksznW+6E1kYwidLvsiahpRG+4UvBjnY/zLzX2i0PToHMS5I
zcYCh9vbMgGmeIwqTltgTrMF/seNDvV3yGhrobOZ2duOr0g/uGyEkiFAcE/Z
K/owMGCN7/mdU40S30QumzGRcJlhjhTl7INBz/sFC4aJQGwqrRBqJMBJd0nY
l58KhkkDbPQNIcDLKVlt0V6EQnz1x3S7yFDPal3ySmRrvwun46ptctG2f7f0
gM5WPrpTtReuVaPhj0NFXxjKoGs6ynEwgQRuWb5urvYF8Mh2j9bGj0JQUT8m
m7/oigGEiNqEW1Fw8PSsKOPbUljBZEqAURbYLKxZM21xW6nbGHnPVAZujGut
E+5n48La0X6vaAreSG6xPM7WhmyfDr/1OFgCUyrsT169ScR1d4tvhWfvg1HD
khxPfxzQVNPfHD1LxAzWmpRr+fVQbDF/Uv3wFs+9ee+z15OKcX4ZCv3HA9CT
39f+ZzIZ7Gf3zPoNGiB3pIaU4rAvsv3m+plIW4Ctsoa7TetSQG8t1s7hdT7E
bIh/5JmtwYx3jse/7bwLCcPkcA6dMrgwdzK7+3IRdk2cT/hwiwLyJyz31pUU
g1JASoczoQZ1SI+NhsYLYVzZTGPngWL0dYy+sTSRBMbfLavlHhfCC99397qC
SKCTwcBYPF2JZtyJ/x471GKQYM03E8gHmSGfQPn4PByzbo1l4Cre8l8JAZ5K
ArbHCJ96Ry6CajVq5eeQZPA8eN/fYZQEeXZSZfM1+dBclJh0NbYdaG3/AfPP
KghSkrEtfhaNQardoVXR7YiZEkRW2nr83nlcqj6pEL6Z7G2veFaCsYxRrPud
43FDwfbXzV25qHWL7z9B20dwb4zXm/lBGbIOZpu9vleDixKdxnflEJWsCEGS
PVXwcJqpobSEAN7rwc5Bz5tR+pcrsJ9rQx6R6NaIb9Eo8GzWtPRnDbAYzt11
/bDlGc1ZY0M8Neg+wrCbVzkQ6uz578rvJMFNag25904u1L7f+H2nKBrKOOUy
T8xVYgvj7e1erlTM4CnR6pNIR65+VYJWZykIkCcPTNVZA/WWyeXA+RjYGdba
lfkyF/lMfpwOoVDhy96kBf7zAch7iVDVsVKNLfOjFkzt5ah0TuzgGdoy4G4K
irwycRuu+ixLZsdEAGnlBH3jryco3F5HEz8diIvn7ppWmfgC3tltQzBzhTWh
CbXkc7HA8uzRWNiFLDx5YNOMjiUQ6+X+1oZsceXw6C3pOZUY9BKRnjftNUPf
qPAd0RwloN2oaaptXQYNEg+yVK23OCjlPwvjcwpwsRn5NogIOcuZm7uJtyBn
8+HDV2mGOPb15LtjQ4mgZXt8gCYxDOtISc9Xf1Kh973SmznDUnCqeRJ7iuoL
tmfvnG7vLUBVLUYHTo90rA3nv3y+rwoJRrR/5lYSIc+qyUvEJwObnR1UjdYC
8cSN9dpvhHroMFUcOC7WAD8PEq7oHuoEr57GHSKQjwZ9SxI61xug6JD0B1G6
fHB1KJkQno1A81SpzEu9VJguiUt9PZSPNCEfulePh+NmSqkr9XUeelXZlIX0
IBppmhl3pVRi1pTrA5W5apycy+/QiSfjf3TZ/xXWJSGbq9M9cmMRjsnfbSl0
SAcBhfT8HxVuuFcv96D+AQ8Q3yBx5y1Ww8bh7/35N4Ih6pSjosgOCpxtNjYb
s+oEBa/UzIHIBLie+vNPIdQBN2P1zUm+W6j/dIiLfaQKB4UDecO2pWCtlEr/
gaR8XDfeMIyZ7AJ9fuLrA9F+8ENqNci33Rr41W84pM6T0ekY03fn/kRwr2r7
wX0iHebudb7+NdcI1M93yo5UJUJ1b6OiRREBZf6k5B6VaIAbn9/UOL5pgwLe
Bf3fHhXI0naWtntrrnv9sLlVmO8FDSZfRnedDwb/KVdRLaNYlD/k9NTqWyvO
Te55w7Gug91HljkZy8JRY33G2eShH4jM5MyWqSTh6b6u6RvlHZgZt8vjTVMS
CqYka95vvYvGrKOHHNgLgNme9b236xNcUQsvrLmzlYd2sszNtHkYxO1A+dND
wZUy5bcC+59AfMakJkdQCN5z9L3heY6E1knjjQrPK1HS8vo4TMRDwXCgJ+lj
OujrjjvuN7JFNl+HAHVCBS5vzjeaNXnB4vBB6pcuZ6juesPOl+YGcdNhu42G
8iFgPf5k7UQ1WpdcF6spzYWmeI8n4l8iMcPhkO8MVIPZkZwdRcuI2/lV3QYk
q9DAzfPyWAQJ/PgYaXzCa8H05uB9zzoKCnhkFl8i50DdccV7Jx83otMn2k3x
BUdQtTHqOOpAwRCLar28Hn9cKw3xXo9qw3GtqcuXFOqh12EgyTSqHWe22bLT
zxPA+fKx36S1Zjy9wsuYwp+P/c/TWX2JFbDXuKrwm0kl5vU+j4zb4oSOvVxc
/c/DgebLtx0nLfyxrMwhEQX9Qet6u7zyi0fgX6odfj0mFHKk7TbefDZHGoZP
CV4zx+DUhT16xb9LQGWubeI/zVIo0NH6Lu1HAIee2SvS11qwn3Vh9WKFGVjQ
sg+OFZCwXPXDnb0hdbgn7vX+pNRaNNjkZ1DfHYksiZuaI+eTwHe/eGKHLRUc
mwVi8q7/fx8T7v/+U4w7FMVLStzLUG6lhPneXXe8I7ngvj2hDnTUetv/qTrh
T5TSvWDbApyKX8gVxhS8MlZD4xZYAK5CVWMLV3PwwlLZke/1vqDgvvP0zrMR
8FNuI0DDhoS/lOP++6qaC3cF6aR+dW556d/AuCO3W5A9g1EsrfweMPKYfPea
qQYOddmei2yxsPPa7LXZ1TYolmHSNhp/hLFLrRFG7/LhhYs22XWTAqdqGv0b
dEuBr+DV6zUvIlK+GnrxWTei/ra8zM/BBHRn52rIOXIHH9ZzNEcaUHFOv4kj
pL8GlrhrVcNfkaDgGfPLVq4EcLC+3Dr0uhqNbRlG14oKcD5f1z1zkohLdtvs
SckEWH9b3rQRmYaB+5qPtxfVwPyK4EwNVyl2X6y5Sfnmj7ZRje5mHkQMUL30
09S4GSmFS/3aR8OhIuU9u+cVInK2vq+TqUpD+ZvyD3KT23Bi8tXLdca7wMPE
VaA5R0JFwcVPKk/ycM45PDPE5i4kqyltGP7Nga87CGHtd8koF1rLnDRcDOPT
69M/7Sj4c/L18Cw7Ca4dfW+pPExGc22+J/c/KKGgW/XpLMtq7Dn3h+6vTBVo
/XHmUTVyAw0FjocM58pg8ULsSrVUCeg/qPkgLfsANI2HdoeeaYQeh4Cxx7X5
cEN+3877NzLhEd+7q1ZNRFBysVTNr7yEPPGMz+3J+Ti4RuTtuJ8Fc0tFn5nV
S8Fe9Hma1HULnBUr8k6KqcblKHZLdR0SGu+RD6FjLgdDh49Xd7DF45/X5WO0
RwoxwKv2pbNcGFzwrn/TFvkE9Z15WXQfpGIO4/o2s2cUVL/mVuWXlIkpDJKO
8gsJUEra/pezuQhLhjYrvnLmgsG/xFLxhHyUMCEmPuMhwG9e9j7RFy5Alxrz
s3bZBR8+uU0YcYvEVb7rrG6//XGaPDBgPpoLb8XVe6z2hkJ3joGiqXgF7PNP
q/2amgeihsIDV1RT8On4vPtuYQpOZFp93XhmAocdjOlmQoPR4NyMb1t3CI4Q
9Ub2SvnjXhVHmegDyWhQ/ygrrywamGN/+nkv1sNc832n67o1aMv2TftQFAlm
PGl3fFJqBm7R8mGaZ34wxr19cnUjE36f8CZ3G3vjXEBCUsCRYvjp/WhYJdsT
Bte+9w4Rtni8r+/G57haLM7RPmKUX49OR/e31BTFY4Wtd6ekHhGoHnnUkJ4q
dFm7vf7IORJo0lp+2k43o7lq+nAwbxa03jbX8z+mgaS5YXex1k64spOW9Kot
GWR09vyErFq8x6dbuOdkMHTu7Df2YfND07iK0KVPAXj8yhPNydUC3NVbN6cw
G4PHfS64kQ6SICv+07bIzw0wF6C8k3k0Fqei0ySyP6eDhud4cPPfENDr9yvj
fNgMDz33av+7nYJCTp/ltCczoU96OPPKlm8Lrgjs49OnQLhGB1GsMBsuMKtE
iqwmgIDxbZ6AW/5w56BByNKlEKz4KtJ/poACVjEXebJWSpG6r2GNbFmEnQ60
tsXtj0F+T8C12qBq+GZV6TbVUA6ctUq/AtJ9McR3eXOQIw94jonMXttRhxtK
dpVSqkRUtPAgR/OSUauY2uLg3ACWtlG059mpWKCUYJN1qAACWBbcctlzwH03
87fQA7X4fInYfXQkH6fFLu4JO1MMQl9pcxYYO+CwomCQ3kIE2otlbr8+ZAth
u0u/uz4mYU8ec6ThFz/McuoOFV+qAzuFLi871nx8vFx2ePZlOyQot/cenakA
AprWSsy4YdzN+5xhhyNQK0qRzExIx+etKiKjuxEzxAl0XgaVqBysVptwrRLu
j9+4kMcSjCPSly5pezThug1f1udMb+Bm2k+u40zCppbiM/yCRaixM1XIW6EO
XCroXR/JxsH+i5reNY9KoPzOEI1JZBWepD787CaSiYViV9d9F7f6XfKa7s7Y
CjyY2Ler6E05jKs3VY6Ox8Cv4bPG4zX5WFt/56PXGT9UF9THgP0tQENiOfGg
jgSztzOvd7qX4+uztANeEtXoKui8t0KJimsPmNIeSJDxi3Pvy+bbeTDvODbH
/F8Wjs72GNikNUEL4U3HyeRySDIajP8nS0Uim7mS2/EG3Hud81mPbTx8Tv39
nU0hE3Mam+ul/saD+VmdvU+NrHGv26P9u6RjgXQ4OtuuKBsnRbhNfop2QGbt
IfpL33KwuG3Ffi0wD8ZDpf807W0B118aN2uPxmMxz8C5jyqZoDnuvo0vphi7
tYO1t+1sgv9RdB7uVL9vAM6WKPtbQqVCpUEqSh6RWTKzkoyMjCKy9yZ773mO
PY5jz8cmIzIKRaEkNBQSjZ/ff3Cu9zzv/dz3da7P+diq99mKqNZg0/SaeTEp
Cnr0ukljCb741pBiqulTMEoZ5qiNGdwE2ban/KQrvlhM3MOh8z4feuqCgn0v
lmLd+Fav4KMiPCObuBWxUQB/HZ+Q2NtCsf12ptt+KIIJPabj8keYUdOg8XhD
VxXslts6EdcUjAx08v+20wnAkPQnaI2hAtv46NiqsxLAITCgOfVsPCT+051e
2/GFQsJJCvhBwpTGahy5TQJFJablC7PJeNnbNUT0SD3WzRbQ5v8Jg5GTBg4n
torQ2oVuQKnTF+r2OZl+4y3HtxMznTnvC+BYhC3fs4EyNBF8clbWPB2KTeEq
+2IhWnKIPug7WAu+9Yvs5xjKcKx1X13fx3SwWHvV1CRTCEl3wtlP+VWhdHu/
odx+J6zoFNt/D0moemEuy/VHBT40fR22TogGrbdep2guxQK1yO+lSkZ9VNLm
PfMvLQ64oixazBLyIV4xW/FXUSyqPXRLihmshwSeEik623SgUtlXUXusCV9Y
l1Jx3U8B5wdxst/oq8F/+Q0pMbocDd5UH/ktXoYH5Fbotu9XYNwd2q8aLrkQ
51fwSpkyCdOCuPu5eiuhjC70gfWeOOS8so/221AHvO7/FxJhXwANRc+XFJrr
sGBhqNw13gdah5iaFgZi4bDUbKxNsj5y69A6pwnF4M3E0aerqZ5w4KvxyROr
qWhk+d/Af6NRsOsJdUUpRSzy8MsM/+qtx+pf/qRXZ6vgIg9/3g2vGhRxeavc
MheCuRYJ69zBAfg+47HO0ewn6HvQUTWpigi/G+Wn37BkAkNzGePfL6lgvvkf
V4hxDcY1hjC2cyahr1iptbxLI6oO+yq8vhUG/xn83N13owk0yLPZKkKI0cU/
b0hTloPV5/U9eopFGFuRKKbDTsS8yr5zpgoFGGrVN28y0ASklGsMZzfsgFl2
/VRzcBO0Xnwz9HzUFEM/X/lbvlKKEaJBNOe4MrE1me7XMoMMDJ1894qPhQjH
tdd5PA3SQSqR2uPARhwym2X+8onNgeDHFVz01PGg6RT4Y3t/FFgyjgsKuJAh
6PHtY//4KvGQ5s/cNBFncDx11Pp8czS2yTnfbbV7Aon3/2jUaxcijZhqytJm
IZyMceEdVSVihtnq9vRONDb46YsrU9Ti34b7N6KRBIerLdnc/hUBc+Q0yxOJ
DLA13/fWT7sUucvSVvTcq+AwfSuNsEEJlmjNUW78S8Ss/qtvfy1lAydeudE1
HYq9b/a2/LCMhj9sZw7b5BaDrjipK6vEHHVePz9ZcLEEuwdktlxeFoPKwJYj
1dk2DKQ2mSdr1MKSd+fNHPYcDO51OB7vVIE6EUcFg6PsQNhF5gKVGxmN7+8d
IpyNBv/Za/b53iXQOd51iFj+AG/R/s3gIvig6tdyj7lVfVykryRkepdibmF0
+R+PNHC6dePgZGMlFLwZv1asWoLDT/VG71NmgVI5Oe2NEGGHqzYvu6fLwb3h
dJGGVSmwiykvNXJXo+Bt9edFe63x+RGdqtXuGsx+v/uioHs6qrFFb1qc7kYp
upzvNtJF4K7NuFn3vAmENmLTzxo2wgX6vcfVk/Lgx6wW/aYDCR/USkWV7kuE
Jo8OmpOvwuCoycCaYk8VXikqa60/kQ2N6waX6PizsNWm07q9KxEvKjNF76Ur
x5niWNKeRzX4JPyiPTdnCuLjN8x8p6vhbVtfzM83ObjrtJmvspI/MBygtLdX
yUM2rXmOmOFEUPh19UfDQAMGr3P4N7M9xqT61l2D10yB1/mmNHV8G2SOqyzE
Ecsw7Lcj1/UyZ5hweZtZqdgGcmdq/CSUo5G2ttn1EzEDBSUMGkjP3WDOuzu+
VbcCBu41ryXa7/gk19vFn1d29shqmuKytC+a6Wje6jpngWdmpBgSnXPBsikp
5r5iO3yKo5W/LFIBwdGduY7TZHh3u+5hoF8smpT1BfEwFeNm4piEGR0Zsp98
utBQm428ZcLNzFqlKGryUeZtJgE2N02tglgc8B1r2XN3kbuQyOGxWbW/EDXP
Nczv84iBNe0/qyWSFcj4PmAXw0odxPTeOdAh0YsX70+qt72sQJsRmn03zLKR
1o7ps82jSrRa3kM/+LEWTDj0jOxNGtBqKi07aaYCz7sW/A7RSATjJsn/drfF
oLOL313JBQJYUsUJECt8cGnfuEb/dxIYPnKMqhCsx2aTsHIb01K4r/aooN6l
HrQ7Y49//VAGVBowf9KoBM+Jyx8UtHkAvNr7fhykc8IzZlHH7wx0gLyqkIRi
Rx5cPFf2kuGmMwoLuyvb5Ofid0gvzb9uhUaLwS+d93vDjY3XeuI3ipGvhs9I
vr0CV1Jyd/+lskXrM61t8xAKFpVcpF0vy+F74XTOUccYfHL32vCbqTTI6LDU
E7zsgUsNRw7v183AwO/1Y7cESPjr1GL0V98s4HhY/jPZ3h/fGqgQpQxy4D/8
5LDXsAIYhjyzu4UiQLq8cI3pw47nnDY4J0TMA86iu1TVcZkgkVUwoiGSB6P5
QTc3UnfuRdEhxr/y2sjEbvvjsGss7Do5uP/f70go3KIRmvvYBXUrku/N64uh
8SB7NXVyNBTeUVTN7cxCxz/f7l+fSgTtqyGhwQdSQPexoXSeGjesK76lO6Dc
hLv4hQMuCMbgMGeH123nTjSx4k9dW07F5oLJ2+KXqrFe9cFd5QspMB1rK8Fq
UIzXOT0vEpxKIHO1snYhk4h7cwIEPginoVLcMYXutlToTPDacDobhh1nXESt
ivLQyXKPV8j5Avx6Qqdu+R8JGUwYtLdknoBmxflsebZM+Jmml8ydHw4rrq9n
1u8SoIyRaaJAuAfc8510+g5EYdoATdWzr6Hg1mLybnPHrzbZmXt+XfcHxuf6
WzGC1fCLyzj595WnsPndcbhqnydmbXEbjzHVgVTt36p3HPkgNnLz3EOVGtBU
+ioewkoE1fI6aQNnInK6VBHOO8SjBNv44sWcbBzp/cLK/rkeZ+qE+5SE/YC+
yv2jtgMZTXyP6wpMk7CTtDJKb0hEC3fGzesj+cjPevbGs90N4MCtVLjpF4+p
ggr3QSgOZjMX7hzaroEotvdbBOYcLA0UPVpEKoCwz5n2v++QcULjyl75u014
/GDkv2FrMr6+xlykVpCMVS7Fbawfc6DdakDXLr8AbY+8mlu9W4mGeh3PXXyC
MWfuxLMtuxo8p1hzrLilCW3/9n8mcsWAX9qn/FSxLJRTzcrWMqyHtoiLihQi
WaAmypt+OMsRBha6Nf8K3IbnQ0F3GJ+EATHkuc8/9WoMqT7jkdpUBooBty/b
6JCAvTCZobKiHNZUd8vXXUpGS934N3dnHqEddfmeyYt5iBo0ArLjyfjZYdJD
8XkRDqwVBK9rV4O6J2fJC+ZKuPX7hAwnIRy2H/543ZFfB45sGfVsPwuBNSrt
+opUPjK5+YYW/JcGlALaiSHvIrExnOv4X+dudM88Kj8yQgB5ud0ct/qaIKpF
8ATFV2fIz07QE0isxLG2N5/PYAIIvfmsOPXDF2hXjn+zZIlHRh+dTzzHiUh7
7y0h+XMiWtr9WHZRacZvSXQCVCWlmClgEEPczAbbeH1Nzw9Z4BCRGT0bTsbj
QiXfBR1y4Z3vC9rIsFrsGbJf5ytoRVlBjjl3uky4tVox8qEqAd8lpVDxK8UC
t8F/f44fjsP6Ped67IfaIevBi7cmJSrAFZ+bx5PUAczZrW95acpB/uOtIHDK
h+FldU3+92FIsZxDTRhswe2lHaXzTYGRVfs9dPWh+GuDzm3kVQ0aplQWr9qS
0JO7S/C7PwEF8kQLX/4tQ7WUOSku7mR8ctV8Yc+Od7V1cd690VAAOrBsKBJt
CIYXuQ6dC4yDOW4JezdMgfThox+jpJ7ChW/TZ0r6cvCSTgdPtn8+TFh3vnpJ
1sPaU4WWHHYEiCpPnw5TccE5T7mrBIVk/PJzOYFH2A4iYvaVJfeTkJpOz8fr
RhjoMQkdgIvOaF1nENxHIGNC81+m9r1+kPLqNpyQ2un7rl53ef4g+GZACj7A
no1iWrRKxS9rUPjS09CZlQYkHLrL7zFcgCT75zXeHi1wRvKtVyJPMfbW6BPF
zpdg33be/b8rqZAmq8bLplSJebNpvQHm1TBt9azz4ek6OBeUlhQjYoUHxlRv
Bf3IxZR1lrq9tqVwynb+1JxxC9zaJdVrs58AmjJp2vufEZBzmpOrfqcHiT6e
YjT7itFTzprvQlc0jikwCtybzcI2zd+9Iw2l2OJ4SEp2yRUEO3QD6GVTsfeJ
2ua9u5m4a35GVd1ODmaMXecOb2Sjdkxchgl9IBq/KhsYamnAvbaLPv+JVmKr
75c+A614TOxI23hlnIX/LKssG/zTUXVu+xBciYKLmc/q+/vIuM+sp+L//3tz
JJQ72LGuDsdaOB3T3hmChqK54sfLURh3avBfT3I2UDgP3S4cL8bksNLv0zMR
8FyXLb//UzgevNzKY5K34+k//9sdoZ6C7OSvLy4qk5A8S4w6GrrjfRKRB3f/
rMS5++p2PqtFsBVEl6m50IgTzZz/rb/zwi+tdnqnc9LwZYRmyF1WP+jzvhFf
dLsWCdYDSU5iZBThPD53S6YZFr5KUE7lkzDZ8RZrdWk+0jsfvbJLmABBvyN1
+fgJkBGu67HncTU+eJmvkNZcCSpd3pae/bnAnZga0n04HBaIuaZ/6wrwss3o
+0fOZai7lqh44FIW6J/db9YzbgrHR4MfqXCW4iBZSmUynQwlt/XVwzPbYd6T
niVmMAeWFyazWQpLkPRrf961JBLc4NJamvgaBTeFqnUdxaPBvG1Y8sGdLJwh
j517+z0IC5dpkhQLDMD42f1fU/REFLOjjB/wLcO44l1Bs0OxEObxMWmTn4B7
k9j5XMVL4U725zL1lmL0cneRYaZqwLsw3X11yhcdr3JFGHJFY85X14hY6lzU
mmumZhXMAvkBe/ZRkRYQyRaSt2Vtx+cWRbW3smt3fIKZn86hHa0fbwQMdDSj
aHXwJSHhYHx5YCAsJ7YcQ/3tOB/oxkNO3QehtMly7Kalur/HOx0sY0Unqq9X
gvjR/X2DMQRQJ34KnpytguDMWFM6JVtks1nwKTDKR4KVgKpu532sevi65IAn
EdLARedYAxlZz62YDMb4QXJh0B5qjyIU6Xshxnu5GmSirfwEJ8rwhPOvAIdH
uejzlfr9YlQ0Sv1pYGfYqkOy9Pu96vYN+K6Hce/X29EwoMHs2heUhXmO/HRp
SVk4fMRqftK+FM8aBst++0EAVbvhR2q6NciTL2O5Yl+AG6TXSveutGAab/NK
Z2cJGAsY5A93heG3+PI5K8Mdb2I2zBo8XAjh4k3F13f8J5yL3f5ZRx5WtZ93
0SI4Q+mdc4KnOerw/AWKSKuHeZDi5K0YY+6E+qwB0RcjGoC3T7J1eFc0+vY7
PTJbi0TWR8Hew7rVkDtEt1uRKx6TF14qi0MuTnm16PHea0LBGjl/uue5MHOT
ubtELw8fXPMfcGgsx6CDb4TXRbNgmG340QdyAxo7Xx70K0sDIYZn6+o1OdjC
z/eujKcCKIUyTmftbcFT7fdNfctjcNdq5s8VghZw56pqj5eXwfZqx8tE1go4
L3uHX3CzDJVuSIkLRQZgmWbyrd+VZJjJzNITxWjsfxV3z5OaBIFnMuw9tCpw
xKORbu5fG+zKGAxN/FMN3rkRfB5H7WFDj0aIaVcOyIp0eq+1V0Lv9mFVNlFn
vDft4NQyX4S7cvgHjxvlQos02+qcZSOkPTvFQhVNwAMNVy83p1ej+X8VGp6e
8agyLTys8iMGtwN/THGfUAVSAe+uxfY0lCnmGHQk7XhPQlHix3kf7E3XYp32
JsMt7eCcO/sKcDPg9bXymXCsjR8oI/xXiJIsoqH0g/Hw63zspp1MLQoL6u41
EiDCuvMRzfsrLbDEx0onNEGCUMo0+rjtLHjSct+4B32xtypLzMPQGrUX5ERl
EyrAmDq+q3IgGUqC7qgUs+ZBk1PGt9N/a+C+8n+8beFZMN63X9w4LgsTWScS
LxmnYmvApMXI3RpwyuNSdZrIBuMTm+a/tOthR6NIHEomoPVyiZOzLQwIz/3p
/7xJAtXTEmkPBtrwZo5z7Dn6XHwglokvw2uxdOudV9hmFUaVc39s7s7GDIpU
dzHWJpRapRI/+TEDDjvdWhDcJuIh4anequJC+HbpTSyPai0QWfiucUbUg8z+
v0qdks3opGh2VtO5DiPkD5DVC1vBoSpUqpsnFDJntoYohPOx1xZulAZWQ5mN
FBZS+WPX3Ew2t14zZh1No2+SkIU48cyuOpkY5Iy3PzCOROzpOvDazbkeoiOo
mGMZSiHsPTONhmcSlL0fedGXkQ6HHCiiyQqleMx32lyOKgCO3b0Q52bZiNHX
WM1ywytxNDInM6eiEmnPM/if0rOFnrj1lPrWKggzZQl9OlQB6xa9vDS0ocAc
sLj7Am8Shkg2U261R+HiyeZYviZvFDxDQ2rTK4ASLSGVb7eaIJBquDl+TyUQ
h/O+prM1QuPwj5xXK6W4dzj5udS7LOjcyKmxXc9HkddXwi5mtKKeVpXtmbka
PPyz7548OAKdzNbrL23RmLfAX7JcVwW+PRbvXvi1Amt0wCOuugxcoh5KHTNL
Q7GrgbNZekR01jXu9JXMht9MnNJcD8rh8xBnUdA5Ei7QTSsP/8tDdg9buc8P
syGsjP1vRc4TdKS5UXK0JQ76+o35r8ZkIuXsvNjCP1+o+f7XZJGQCXUe/6Yu
+NYClcRI64hDCsTMGx8wHSVg66ryzb2nLaGw98nuiaE6bLFrnVpfj0L8MT98
pCIFiSpX3smxt0LIShZdmmAzOD+DAqqxKNh3+OCI6p4sfH9HacjcNgnf3/8S
HDmZA6/raQxZCC2wSLxx5wJHHLrf2WWTJhaExboeR6P/5YOUMZnPxdwAHoxT
Hu4WbES+Cw/nXpKSIenpY/by7GTEe7IMOTaNuDF81qHmxQ4/HRt/N/wrgW86
Lk1lzVl4qC1bkUY3H/7OUGWWFJajg5LJ0pFOEjp5NW3tsq5Hlp7BQUp9F9yf
sxg/m2sOvONbMsOx1Rgneb6wuSAS+WZbSWt/8qHPMS3HxLgcX3FdL5jp2Pm8
J+2e5tn4Y/OB1N3UP5tA+49kd6xaPiQ2pse5vU8CqQn6qwpD8RhDzDAPXyNh
t8qHiblqAk7VAL9Iain6dgY7z3blwUY1734yTTCqHnFkP0lRDgUsc/o8zinQ
bfRB9p9KDPhHhVCFBySDelTn8C6DQvxTxl4uw0tCs7hjXKN9BJhcpDGI+VYE
lpKSdzNdu1Dig/mbe9w5eFtz39DbI8loXXbEt8WCgKN3gF5WoxWC6d/4CwQV
oMOzF638hiFQ/EaVMJnfDK/ZPqcn/iIh/ZGOep87tSj2c6JC0bQATpSWedXG
ktF4fuXaHZ44ICUdPXksIB8a7umvXTnoj6Udvit+PgR0fPbLfW40HxkG9zS9
tfNEzooHg+faYkGjMbu3qb0NrOgO/fq+WAV/TRI/TKrlAmPvhU98DU7YbeWl
cm2n207Tah/cRaqDJYG/P2oTqmHtmHzw2WME7PkVJcP/owL2nlPb/qFExm9v
pQz2FVWh2U3hVR7rcNiwW/AiGRdismuCzrkcF1iMvM/8gS4Rc2LlTrxkJOB6
4T/v1D9EfCbU9yDBjoRv6e5lWNmXg64c6c3rqiQ0z7I2E56OxiZm2uscjJmQ
1Zon/eOFA9qrizkdy46AKN2TUYNjWbA7UKfSL4AAc7Kkv5+gFCQ69Mae08Xi
loyMSPGfMkjweSTTvScWAqa0NG4/jEf6YpHfy5o7nJN2S1oIiUPmIAqL2lFF
fPFY64bSiUJ85bskcTuABNdf5fJqy0Xif+NthaE7HcQf7JX25FIDWjPwaDP9
LMIjt3/I7uIhIllTkO13fyB8j8sL/NGfBTlf9/pr7Y2Bw4fEr1jveMLE81Ol
HCwV4HTsM7PLj2RQyE2gNfZPRNng+1xsKtX4X+7PVpHSOohoyVA6qBoKBFZl
ePEuHe+QNlsG2wtgxNzd/g8LCcZOdZ36bzQTz9UcdDvOVYAPkl8Mk9jIEOgQ
cT2SIhDe8wYF03k7gsjA0UWbkRi4dfztMO+fVjyt82JOQb4Nx9Js1o87WsI3
aitm17wCgNqXFncq6lDVOuDtTFIFnqoVTbsr3gBVTZQRPcoNwH3wQY7WSDV+
zQj0T28shKOnVM8x/c3BtBt/I0Ov1UCOUqoza2oVWLSvUUvc9caZYMrfBjvc
WtRurJY73QCv3KrfF3aQUfoPz3/1JXWo5G7DxdpXiySB7k+Hyiwwx+L+In2N
N4Qa3V7WcE3FXRcXw3pzqjCp5M+W9JgUPORrr9wjTMKOAXrVZqpYkB+0Tos+
UAB3WW00TtS349GXtj3pDju+rKHZ2vguE72eNNF1TecidXetk9VOz9hQMo2V
qTXDqua7p2d9ypE65bBi+f5o4Naop+SvIWElg2pLlSEZLz+sPC2Tk41Pni80
Z/+swWPfmpe5OeMwkJd05w+LEVowkD8uNT7BrVtiR4MKmjBx968phkftuGJr
zs86v8NBK7hMDLVG3wcHDsmpVMGlmp8Kb8d3eKq1wse4VoFGiRvEufWdfnL8
4PH3rSwIiX/IO1Pgh1Hnu8YvEXNwgo3ryVXDcii7sFTbWleBouZ7bVp+tiHz
9d37tGYcQIiJqKmkFocEnse0T066wbTM66o61RRourD5JHdfIzzIvnChoMAQ
LA5KjVk/D8IhuaSbSxqlsCfLYZG8EowGkv3bMv3lkPw7t5H3Rg4w05CsjL4X
gAjbVOnJVgJGbQSEC30oQq1C4g+yVDIE5g1ed2iKQ4FnL40eHamCEdsiG6EA
Mny7sVHUqhAPqvFvv3A756PRCDsx9Eoo/jwyIyan2gQGAqqO36YSgOGv5g8e
xwxwbUoL/84TC+llIhTjZU2gP2abs3YwBFn0v6s7/f95v4mtL4R3O/O2/fsF
T3E6SFVQd0UwleD93lUPa69mMDveQ58iWYG9qvWiVYXNOFoXxOLcVAM6vicZ
b44HgWxndy2dXCpaDAnto3+cAjp7ZNWmWBqQou+v7zx1CGwefhNux52L0pNj
tkG5+ajc9s7xSlgh6tmc2D91pxn33HuSkPKVgN6yT2/LcWdDiJaUu9i1OgyT
GIopKSzF8T+Cj4wmi1D0zXr7KH0BtpdU+QaOJcA1U74PW6RirE+b2r6mR8ZI
6Ztb3gEJwNY8uP+AcSX4t7gdP3S+EUZNaf84/slGxyi9HnXpEvQVe0kVEtSO
CnqVbeZx2fAAasL5SST8NN5Wq1OZi86EV4HC4d4ocmaik1CYj7tE7tt8ekHC
sMLf9CzlFchi+vwFF0PW/58XYm8WTMA0if+oBfbVo856pIXkfDEQnDToqR7v
dL3Mwpw0Jxm+TNrduBtPhq8t/4ZCWZpx0245Sr08HdXoMhhHzbOxoum6rIxy
On7/FFjqYZoOijQPrClCd7pPIb1PzIuI8YHezfkvCSjWWR9k856IHIbuLNoX
S9B9Zia/c6R+Z5+NvmQ1zoGnP9w75PWi4Ptocqd0dQ5qWtWo9nPHgOH2W4yY
k8aRUYm32nnZuLlP7ehFDQe8ab8mUhOaB/sGujaeGFUgw8jKu3EFU/DefKC9
fJQT1/Z/dRQzJWCR56yUpH8EtnqWiD7TstrxN1/zr6eIeKX5v8v0CjFwafT2
/j+7EYadSJTm/M3wTmfrQGdlDnRfWfAxnfXHpT8uvl83knG4Vfl1kLMiKp3/
pjEXnAzj2mXke9E12JYhbPz6LBkdas2o54+FYG8f45Hin3GYcXsoRu5TDTbt
f7TqdKMEPgiSb4g7EWDpWnfZ6d4YZDhhRu+c0QxWNp7r3/WqMPNQntsQTQUy
LhEeOPXH4+YhreV/u/IhZFaIRHGyClqtTVXVfNUg44uo0PqBWrB8/IwjoasM
6RwFdx8xrUXJwx/kHwgTgVLt+KGDRilIxy5+0HW6G9PsO/Nvj5LAV+cm87ZZ
Oq7lRXOmU+TA4njmZIj1M3DjEWIJHUqFiCOhn5IYE6Ggb1uHXdIRqx5srlpp
1UCxphnN+chM1HUIrNOBWhALj310iCUfBhOcri3zJaPs83T1m/WF2CrAWR7S
bYw+/RRBhUok1Gy0M/whnAe3vneJqarG4/NFi3WJk364u7nrwtl9NXhpOoAQ
JtwInE0b+vdUqzHobJLb1cYsOCK8MUztkoWTEcPbf26T8EgFR8qmZRrcPrr5
yPhnHm6e4NjnPFkKS0TVr/tcOyFBcoh2ccfrXQNVU4tTSuH5aZHfe7Iq8TZF
qmrW2UZc/VV/waKxHsg3ndB4fzWoEGzjOPZk4l7vOIO02Rj8q5IXllwbhIZH
5pc7dIJA2VJON8epGANrK5OCsAoXbPvm/HIz4RtnY5CZby7EJvj7FQ7Egaz7
iL3A2xjMEGzLsbYLR96tD32XDVOR4cgeJq4UIrCZri5GzPpBCb8D43xiNsbp
FMqauuYBK4OkDDt1I7yQ51W1YKrC6sljBtKRfrhA1Mg2Dc6FAocKmTMs5dAv
8/i9JEMiBvYn5JUoFGLphdTqp0dS4WJlP5WwUDF8uZybTKkeh9ZGfTULb2JQ
5DMH8UVPAR7+vXp0w78UXn1LMWob3uGO87P8O8oxcOyZzIui7ngQUe4+tt1R
B7aH+yR6XufBlwvlXXg8HcTPTDdZ+yegdqrIh4oTlSjMylvPeLIAdDN3uT36
HALZEQGH/dnboEJOYYJCKAoCzQMu7S3OQs7O+n1Gdv7oYEor7SNijYpb+mcK
JEtRlYbaKdelGGpvxp2eKKmBvTHyaDpch2YRNQop3AUgFz10x+tKGXzcflsv
buwLSYGBck9eFeI7xmtbt4OuoMmb7ilfkUjwvqTc82mhDMVHtkZu7/ir+WGd
G86OnagQNX1Jd6ocNAm6BOrcfGieHBXSSKiEI51Daw4W2RDeM+TesEKGR4rs
R27JpWCS2i3tX5kJWGfD9lnnXxV6O9Ra0L+vBRXxzAm9r/kQKLbb2W0jE99V
+TClXb+IXhThCy9myaB0kI2YkJmFY/tYou9Tu4PpQy4OT696pPgYde+yehVq
tV+oor6dj5+r3YLnfeMg7Vyt+9mkBmzw+EMb1lUEtKtOnobFPjse8CiB5Rai
WMXgwQc0JIj14foYw5MBGzndHnMygajx1WxbSK0asqi4JTpHEmAtSIvoEeeH
NzPShKd4WlHlce9urUOpWFF3pEHvVP5OP2z5Sv+ux4jP99L/i6/BG7dYi30O
kVB//2KDNWURsgyY7FUrrUDu+u3vjOlkPHGHHK2WkI9nHrE6XnJoBdLKy8Pf
ctOxuVxbMJg2ByWNXqgmHyVC1NUvTz9qF8BYx12airY8TC1OVb11IREZpyKf
mtvFgMSfqcAShmrsHj8mn/E9FrloFYONNQrwxV+/8M3xcuTT/nJUU4CMeyuX
9nf1R8PcOwrT38ONuLSPLblcMx30j53g56IogyjXt+qm9EVYejTh5NJsN8xO
m2U8WgkDyZO8CzcfFeJKQsw+L9Fg1Da9edAtLBvmumZ0BSRr0WFyeCHrJxkO
KL37En0yBhXS1m7FXDNE9p9XTJBcCEry7UXXVSNAWzgv7dKiA9A7qWXU/nmM
pjBBY+vUAFMKP8X9BeLxlFa18rlz1agqm/Fdq9MWvJ9VBv+tyQe+A+mPTTWi
0fTt6DITdw1+NLVN8T+XCS3zlI5FznVgkiGkOCGUhTFGOs7PPIvBodJpqnKu
GEfHzWdPpsYAVabdoMkOh/Wd12N6yLkQunFigvS9HKdoNQh5C3EgcDM8nVEh
HHXMSljo6IvBvzic5WtHFRQeNx3abq9BhtPl4pdc27H/l9j+qOk4LA2SNrH/
VYObYSW5t6LN0VGa8fhpjSakH/dTNBEgYefEhztpySSg7J3eL51IxgVeckuG
dBF6x7fNV4kSYIWn9mcPuREKhnnehDMmw0pb4ff4dX+4f8VLk+JLCZDC5h03
q/IwrVCLYXXne7NNYrkq4krCQwLd6ZTGMbDFrt+1+TUNq81Ee6XvZGEA/ZDp
12fZYJqVZx5yoRDuk2rNSlh7cUDqFbXrpDcEq+YfJI8HoCnVXT1K6lbYvvLn
btZvEvQ5exzcz5OAtjv3Za06GxwCD178HRKCN7ki7WdnqnCA8+6D7565UPSI
JqlopgQiXiR9di8kgkslY3j8AgnsDT9MBH2oRi5DovPqoWo4a/iah5GqEO+/
2RQ03+nO4MM8pMVbwbDhkxovSh0Mll/53u69ToZas09vpIaz8Fjey3RXxUB0
GlajXYqqxCKRwwbEMmPUk2MJDDiWCqQs+rZ0/UJMqKk2CpQMAQO6Ly/Yachw
xSs2DQor8JDDf1I9sVV4xFJ1oyLKGuSnK53K69NhoyjzKI+jDXr7n+44ekka
Kdc97aR4qoHrKt1zHu9yTNpo4N88ZQnkjJOmbEkmwNTUe3jwYjbQvNwb3lrS
DkyzK6W5e9Ohhztj9bd2AapqLgjoOCaiwowpUeOiN3hzrmX/DChD9XCptlzf
bLDhevdeTyAfVj9dXQ09S4YiRS375ZRs+PmYkkszoQxrT5ZfmZaLAVangNDD
3QT0X5DPPT9qBxMBLPMO/7KwMfcp8MqWw+MjJ+xWJuJR7N+NGfPWevyhxcF2
xygfaTtyiHl5RKQ/5mZ+SrAK51MUZC40ZEHtWN6tdP1m/K7hZ7s3IRPehHF5
XvjQgj5Fulo/o6uBTU3++ZXkSpDOvfzehi4GRru0LtcvNcHURr7495V8CBZ5
JHbjaiwYZAXyCcSFwNYnyzNHrEqBuaP4glxFHmzkMkyPjOdB3GODx6EPO1B1
l2mYGNMD/GiQTNOjnwFcUnouJv9/71uyL/neUD2eaWVgf1oTB6E3JLKac8sh
qT1x/sV5Q2T0+fRj9JYPmul8u/jurTO0pU/2zownwZ6xzzLv1IqhjOeG3bGN
ctQLKfdP6zeCyQPsOTcN49C7MNfiU5IXuNumpDtzBYB677Eb45W18OsOX2b7
QQJ+89vaOPKkDWtyJSdY6Qqgabf/JYZBAtTte8TH7FkHm1dGyhfPdsDZjqaZ
mZPZKBQ8OvmloBjeyu65YNSCUPJ35kvTvA9c5FR6vjcpB01crQvtF4ngvFs0
9wNHIugzKa+GpdfDZXuLNnPWUhAyO+OppFIJ80bdpu53M/CSrO3J/JRUfMop
KHOcIwrfHhdXGztFhBTZCI5HO/07xs9XvMRUDWqV7RJ9xEb0l22Omg7LxNKx
mrfqA3FoI2WXy6FVDcwPZ/PGHwWh/N0ooKUrwrkl9/N+TFlYRvmahcPGHk9L
KzSKH6/Gaz8eA2GNDOKhP5YEAzugIvRs98u6BOibak/4op4GUVuDq2u1BLwe
2Tlf/DIdVf/K3PebDoSexhclITTRGGN6/P2Wdyoq8vle4onNwoPORQr3JOtB
ilv3oHO7MiSOmXCe2pnfm6ofz5m8CkSFpiiX5s18/KEh09/1rwwzg+R3VmQI
rnQZ9FB7Z4PR/i+2al8zYGHIi2wSHozjfGPX3LmJULboG2EYWgGp2XyZBz0a
YXZRaLdyfRnQH9rk+qVQAl0fWYinOvIg9ntg2xhTKHyy1tBIjoxEgz8inKeM
q6AmUlUmMq4Ct6izhE5bZeJz3dXiw/9ioFOALUdOJAtKZzKOqbEnYInBXp3+
f9Uwtyf3OqVNBD6b+UvoYErBo+VWYKGZhQWpn3W8/6UgQeT3UrBRHWgV+lQb
vI7Dfa0/5Fxoa1HB2sS5mCEHaA8GnQj4Tgb1P5yDbBdrkbpE8LE9MQFF+3cF
X09pxI55gXbfTDvk0xNfVJ/NhD6zd6IsF+vQeNfY2m6JelTf+hrznN0bn9Cx
0j35ngeBO0NboUPC7atGJz7ah8AeitkfWzlEDOj21TvAEgHt+r5qV3c8gBT9
NtKH1hjzagTEUgKJeIpHg7nOKx6uVP39pXIjHTwGGm3uK1XDq1emF351VEJz
9zj1y6VqWFwfpGvZpwORr8YTG6rIuCnst8Z63Q62dstQaXaF4Rlvm0G9i5Ww
1KZSRCVeA5yra/X7FPuhLexz0TOlCtwvfrT8t4MlEJiPjJsxF0FS/auCxZZK
1Hs+mdjbnguSqu8aHgdWwhneX0d3FVdi1EWnY9gXi3n0UkRvrQKUqPv/D38l
SL1J5+mYFwXncugJyjT1wHpemTzImIY3bUzCevrqIXhLe+OTvhT0f89gqBrO
w6XYJR5qgQKkvGHCoe+fC4+DFVZWPPPAx/LSPcqQIoibJYq/kdUFY36N9Emp
NFgsmcjV5S0HHurTVoJcQaDIE3+yuzYPzNfvyHekZMLMneEHD/8V45cJ4dtH
6PLx1viLrEG3Arg+dIC93MAOlQSe0G+nhWFt9lEOJbZ80CX4zztsZYHOoYSF
Z7tbIEXBzM7omz+M9Sy43apPxShI6DEMDoPqe1Wvzr72xhvXhU+NTJFQkF3U
z+pZIChFrrSkWeTBMNWv1sPliDr9BJ2r+fV4+VO8fqJDLhw7anCCl94D/rP2
/qk2WYQOOp9z87jbsfX10906/fzQRdpv1a5BREEdqju3X1VjG69aguX1XFg2
YzIVdstGc8rxwjetyZgtdP6D6kolaqmPkcx+lQCDGMFl7nUWGjIbP+y89RBJ
UmOxq6cNIeHYVdqRo6UQKGFNW5kcBe7R7gXKCQQ4Jjxq4f6zGqcuEsPKwgIx
4EvEZEpOPGrXvzfq/xUAL2JJcpwCWaA5U1pudasARp2eGFO+r4YVN8n57X8F
EFOTzsQlVIa0Rum8PVNk0L7z9sSwUjlOi1Gy/fe4Bbot43dXuaXing9pGkXS
UTBM66/KMKoNrNvLe8UP1yCvS+H9NEIR/mGL8v99rXXHL75FX+qzhAh514G9
D6IgTrWIWNxXAmyzi0Zul4uxNa2M0os/Azr3j0iJduRg/Hn+sfiwCpDuUjr9
oiES5Y0ebo5N5uJhiidqVR5XsISHTZ85vB2HN6KPT8fnoe09pi74WAfX+3z+
O8zZCjrk+siRnTkWGTV8ccOyEtaOXH3mcY+IyU9z2fYdKAZFO9/284NkzL9X
m1ZkTADK5fp520eN2MczeSpwPQ3PUH+8HspHBspGfdkedW+s+0eOZd7ZjxaU
ay52goWw92gY78ppMh5K+C3w8XkO6jlNePEzlMFrrpGeWv8CvC0S+eGNIAnI
Y5vh5gej4eH4XCiFZA4Kadx1W5gNAoM/+3UtvmXjrkdVL5y/W0OrpdK3J/cJ
6OiuovbTKwwMOsO667ms4Zx57cPfO+dj0x0hSkdRC3rmAXU3r8TCmsorsp0h
AaKc36rY7LFEhsJjsxIBT/GfU5dG8g6XSG66t4QNyWg2OGXS+qYT09U4dOuj
WtHpgLF2pGQJdPcoyhlup6I+B49EiUQpoNKNfxlVwdA03GL66xwRfMbJTItL
BTA1eZVH9nslhqa8ndz41Ag1lHNl5DPlaNtfKVJMbYlJYVW/AswLME3H8q9k
8A5vo1wmfElkyBK/XRt/TQ1GbordP2cVh06FVq6fBvLAUe9yZKckEUw1xZ5/
oKzHY1ymDDmiZSgQaXtgT3UKZpXQlR7Ib4Fjz22yBSdygWGYadslPgfaZhZ8
04uLIU6Xr+6sfi0m2PNrDfg4weIXK2Mq4Yfw+5a+gNJZH9hIP2YefpGMYrVF
DNbPq+Doqi6Rl6MIxuw06wSyK8B/sy469lMhHCc8br31tRrCr2ZuMR8qxhT9
0f6spnrw7Dpy4aJeJfCyVojX0sfgrUMfeSNnUzDtxP6RitJ8WAxcPn/uUQ0U
epwpWLatRcNnOqXao4l4nWLz9vqDAvhZM5BDZRQF5v0HL7nwVoE1h0tpyIoP
kM05jXuza4DvZ1DyYmEmDP8Y4Rfgq8Q7daRZHb1cGGUvVOkubcGx14EO4T1V
ECXKT0E7EI2kZZ2PtKtxUDg6KTE5XYOBFZIev1jzkJN5X62ERC24H/rttDBW
i1eM5t7fZojHZ09Uz3J57nA/bnjwH18FaKaMjXlukPDvNR/NCPcELP7U+fSe
ZDX0j+57rESoxo/iSu+/7ssDSzHVg++V3fBUxq7POisNEHPylHHbmUrko63/
Iq4RhcGWo0Y/+MiYsb29ckIkCc78sqDwpC0ABzOKWp6H+chdmluQYlOCJwM1
G2WOId4I//BBRrwW9QqXs+r1iMjEEMS0fL8Wn8ge3vfzURb6neY+T5BMgTse
75rKWFuw5bURrnBmA5dXvi9TeSvIzufdi57KRA3Tm50sKk1AmzQVG6WaCaYy
t4eqE2OwfVyGacm1FnT4p2496cxBF4dHfFzTubj13LV9wCQCAykGVDI/FmDl
Q7W7/KfT0N+WevZbaTZy/+G2bFELwTQL+S+NB72Q4myLdeb+agg8aiiUp1iO
p7n1H/ZdLsOmwiDjhYRKiHHRN4qeboGxm/VLbDxu0J92+UASgYznxOYHDx/K
AwP1feVPvEtx7U388faxJCh7oE3FeqsI9bPEPIONGmF9H3f4IclEXBwLfdtJ
Ew4Fl6KWto42gayjuUpEZyyqu1d4bJ+sxCf3HMVP2gchjSx/jfQLMpxc6bnN
V5QP8iWfmALD0pCSrZ7rk3U2PN3PMUsVk4YTnj6fi/YTYffNB6n3umuAim2Z
LbkwBwYavI44R6Sjo3KEsekGCTYkLZoTPtvB2D+rYBddIm55bdwVlXoKwldA
soQ9CiQ26nq2j4XiiRDa7dv3XYE3ZuOT+JM67M45ER3///emsNwQ+ysRi0cu
hDnt3+nG/MBdruGRxRj4Os2DMzsHmRTCnT+250NjvuBbCb8C0Da7nBnyIAGo
3lUVzshlw7EjHTMla6Hg/fKS6doOP/ayunFID8Sg73DT10MsoeB+gfZXQ2wJ
NlA9GiugT8amfAu/l9JP4TWPgP5r1hqoaHgQeVm2BG2jXa+MMzeh2Whq6yCp
Cvbfyr/RFUJGEjNHUsTOXJy9lm2nPtsCKh++9396VI+9ao8z+pMq4L7tVEn/
2Was24zZpdAWDl/cKh7df5KEgnzeodKpxaDg0eutb1KNt5Zmlic0qlDi0K50
4lFbUPNa7FWyDkE5zROXmOrr4cDKpwKetceY9Xf7J82fAgid8H7GGEAC1wtP
FlT6G2CPrxRRqTwdZ05IXrFkboWzXf6H3H4X40Ty6h5J9mLU2RshuZpri7UG
OpePLjtALd9XleC6IDQ8ddDkOX8V0pyzOWUjXY0SbqpGTsUkJNtLKxTSZkLk
ve13vzlykDay9uenq6bgoXJxYv5lG0xH62uOfCLhfUehC+e6coG0ePyNlFwV
rnIq7xPSJcMJrg/HIlnvY8L0Tb7QS6UoF6N5fNE1F749123yXqoBfjnReOXp
DlCjYT+hXl4BCT+j+Dm5K9A8+nJmd0ctHhfSj0uRCEL1Ko1K5sOOWDV0dsGB
Mx3lpalekSSrgPI/a2na1C48GrhkaUsmwcKIrpmWFwEohF6Ovxclg6PGGU/7
q6WgLNjbGTjpAxYXKD1GrtbB6a46IQGuBtDf1cySnloK4pyFAwPRqVATtSeM
MTIGlPNTNK3eF4G0KzFlm9cbU/yChRL0/YF1Wt7hqkwrhMROKw2Y7nga9Qdz
9tEyeCZWZ/WLtgY+yzDTmlkTMWmlYvCEbBQevXjb+wp3KxxsucLg51aLciLG
F2+a10PkX27G099iMPdZeo18dzMeUnYbWPtZD6eHXpz6ypIKUo1Vs7rCiXjF
9cwlT0cy1lhEbf/HWQykkUXRh1OJMFYYVD96tQbtjtW/D1mJhzYu1m3HFYTg
pHrO5bN1aH9O+8hh/lDcva0hoxmYiyIM8ZlOZpl4JlufTr8mGi1EKsfjVDKg
9Qgzb+Sp0B3+8yiL+xTD5cy/BiVNVTjznzWHoGUHGmm2SO+aJkDEBN+DrzzR
0Gc+/9rhPAnPximHvjq547sy590kWePxvwthDJW+BHi2nhOreIKM4tVsrMUd
9VCwTzffNbQGslr/Bn7YJoOodaCYZlQG5rPZ9bJIJYBzUbq/jJ8RiDlYSVMH
ZeO/IVFGokUmHu+SLZJsyIN7TI1t52kDIe/EpOgBmQIccBSnrqFPggTJzFLl
LSIkxn7XUjIpxBYa/YSgZ4UwToxxib5AADseB8uhF/FYZEgMm69ywz9fbiiE
ZUThcQE+GoscIrw1Eq6VUArCMz0HBAeCHwNTWJzPSiIZm4IPRWUmpYMF37t4
1XpHaKmZuXSwsxBEXO69TBt1xR8tlwzxWBxk1Ova33tIxogtlgotAT94zPh6
P//7PPzFT9A5bZsL1r9k3ttdTQOLwQ+MZ94HwbUWw3uZyZV4b4iR/JDCBbpZ
MkZf+hbBxqYOI+9+Mj6//EIssa8Zj6SfpqduLEfXgMOmZgYxOHlly5Z4joTv
HalXBd2iIYJXkv8NQyoefetZsuHUCOmd0sNs5wtQ0PY0s5KtC4S1dnfmapfj
F6Eu97vqcfBGesnE+XgWBj8nMZwsK4N4Kb4y4xhHWFQhU8mfSwDNE+oNbgPR
kOV1cYki4xasVtoEsQc2YUGGBKj2xsOAfQhR9b8C6D87WBr6pxq4P6X3OFVW
ovRbmYhq5lS8vWSridZdsGV/L0OvlQzK7P40grwF8OzPBIN8Ggn7wxO9NGuj
UUEwXXJVLwaHL07N655WQ2/jZA6xnT1442rR+dnNauR+Sr/Q/aMVa07uq6uI
KwXpTp3JZ/okeHovlO6uZwcu5vbxJAi04uZHk+nXB+zRe/tKqYtpLayfmhTV
GqkAm3MrFBrrZCytWKDS/paAFVWw/YQ7C67McdRyTiRDmEumj/TO/ZYqr9Um
WpMxa84uo2upGv1TyGzBC754PDme8k5SMQhnPzyycSoKHz1TOsezRQA+r797
nbXKwaM7Y36vaxW6a/lfNG59ijmUwcvB236w60rE88jx25Dwsd7p+dlY/J1/
yV3YuwpdG3Ly3p97DO5MNYXj8wSc+SX0r46mBNJPzX42eBiIdIbpcm6TZGhr
EXDcRB+oU2qUy5a+h5wn3vy7eLEKj9LabNQcqEbPg47EO++C4b/EFy6MPfF4
UeNvdaa1D/5e57jtfsYKfY08A1+/7ABFDZG9I3wR2PvBmMk7MQvjRy59HTud
Bb3uNXvmcsrg8oBPVnM1CcuHXrfvisoETUd+25I7dbiXdTLNyiAPPO+6YX1x
I1KeelwjKZSK0qxPJ9QhEflGOdlhuhHHJSbmyrhrUJD+/tWX9I/A/b3IxRej
gSAVFVGzVqmPxy3jBSkP58N74cuuJ+MzQLXPiG/8EREelm7fVbxZiGPiTrvf
/EzAqqfGI/ZvojAiamLB0DkR3McX826djYHWRKp6wx1OhgqmZHonJcMtB/lw
j8ehOx2vfU/1cTGknjnGzXeuGDOO24ueocpCUqXJlJiZH0bA84aQ/lYUueYh
9ImpFNppOF66ijQAh8uTA7mKZOReO7mwr68EW3l8htfOF8OHZXo22bUM5GY9
+ePAeCbm/IhVgNRyPGNvYNJnmQG7tXWOOe503NoFqzbq2AKQqYm6T3ElC6jZ
P/+evpsATXmerRvf07GsovVz9Z98qDM5PuA06IFFybs66MNqca+Q0wu9ajtY
Lzz7+FpJJEy/uzQ9G9EI6nT7n+vq5cBKlRdrS1M+8lbdDfGraobuH12GL0aa
Ye2R+egwsRz9TSLJk0u1KDXeKnZH5RFcN/s6sn0yDjRcva5ETGVBZmdLj8qB
VuyaDzBRXoiHRPLm7oLUJGRw4v66XBQI/F4mqYKrZagZxPvBQaIBoyeoPv/Q
SUPvsZggsggz2Ly/ll/K3wiHb2gwjl9WQ/n1Px8+6Zbh7Tz+gu2EZDhTdaYp
1o8MWuc7g7XbS3HXz5De7gUviDf6Gb3NtsP7he/PPN3L0T58zvRZqx8wzuVp
edVW4OLTT79OUhXCAeGZaHGpapBvfhPsdbMOJrJ110szivA8g9q1cZ9wyPl+
TIpvKhjoQ6yPNJ72QfA+p0AdVQEVCf4DmqZENJTpEhfb8UiQLchRznkEzeck
4qPDq3E5c6d6j7ciqU53QfYnCVUfe4zEpybB+iXRKzrO+eBOy7vJXBcA+lRq
p2v6NPEVE1ORPFsbuDVQ9y2LRkOHOcUuAgsB5sZqSydSq8FCcTlE2bMA+Kz/
rLoyxKG+z6JE3csi6D5YZL5xjASUp6X43/BU4bknX4Z8Lj7AwJKM8VrjLMxU
EE1Ma2oDjV0XKiwO1YGhorEf1YEKjEtrWJa+mw2m2r1MTQ1EnGC0+qJ43RGp
nvBvbVPEwUGPh+MLXhloVOgwdVK5FFJVLWvO0VXiw4KDQ+/K6jG5nfu7YUYI
DjGeciu54ofL0SVDk7I18NO4fyhzsBJVWGleMo+WIevX/vaDN4thZClQrDGC
CNZvGRw+LKuj4V91g5LJu2D8erbsmmkZSHF0noWdAMqZszK0ssgCFz5FVvVE
B6g7S/UzQy8Zk2m2O+aUi6DqjFM9zchOJ794bC9LyIMvFFV3E5P9wflP40o5
oyNypZGKPIILMa8pVM9xIh0EFE3h0tdipP1RW6UQ2Yq2M2K95YVPUOx2j5Jz
QhnMccx8LA4MhKdaSntHqzqBK6pEWWM6CD77EaPSA3KhbyDGnOdoNZRuFiXm
5+SBtToF78mNcjyrL5RG3lOH/w1uz97jJ+B2zeDnq1HJsJw3HTt6h4wSpvUf
aN9UAb/9cYebf4jw7ayVn3CQBf6YEiF/F6rGPqP56LABH7QqnbKy/UZEx9v1
8eu7yuG2vFl32Xo5MtKqMbJej8XWyzHflDbDkXT6xYv+mihU75648+FVGsRJ
DU6qv3gESyY+z5ZvFKHrY+21hbNx8G7OJvpCeTS4tNA3LhSRQaqg3k3YCCFQ
X6Rq51zgWWReTOzDXFAufBft+pkI3tps9DcD68EK9rYPWtTgp3Wdj5X8rRjD
qJAvkZqAD/TC45pF4wEk+j6GNsVgb0Sjx9x8CUoWnY87RVGNjHRWu3NfxOHu
pwJkO/tSXEgllZqtJkOLSkwHx0EiHr++FD/VS0BO6kSBx0uRuMf7D838QCa2
U1pclXJGVLh/K+gk6RJuE7iPyyk0A+0IWvatOYFyV0TmmlwjuDr1LLsE5GGh
nZ9lxedEZDr8Qm5loRJY/7kujNGXghYHid9BqglE+8VAvy4DtAI6fHeZOe6c
c+OPTelWaFXJ42llLAc31kDlu58T/kfBmUdT9XdhHCFJRCqRqYE0EBmStP1I
UShDQhKSmSiZyTzP83BxzTP3uuZpm0NCRFSGpBIRlRLK6/3zrHXWWWuf77Of
5/P8cQ4+yqwXuDyRAj3B5gmPtbd90qy9qe9uOV4LZTzKxl0P5q07X6TOheOy
mubu2xnW8HvMJdPvVTF+kzAz3DYvPFfnIaBaFolXGAxvBmqGgsnax9WQU5Xo
cenzvyhWFyhonGiNiK7AOMHc3Ie/o8A98vapzEoNMHVmeWy1yxJfrWuqFz6t
gz4Pd+Ltl5Hg7SFba0WVjz6Nh9VtDSrwWVPg6+NWsVB/86jM2HgWaNVfnbrQ
W4FKxecGTCK98YA5/dBWRjUWhXxbeelaCvVcVju7Z5tBWPuAioFXHJgJs0T5
HSUC7so7WlYajx0bKf1jkaVwIVbvsXchEf8cqRgbVIiFPPdDjF0ZDfjgORp1
bueOTpDQSOnOXBx94A8XwnJhmK7YR/ZUDerEqEibJieDq9gfB51zTej1+LnJ
loMmvpN+4opq9/GwydCjAxfb4Vf5f+c7+wKQQbCp5BhtJR4srcoVU82FV07s
RVepfOGbyAvPpdcxOObOH8LypwneNibuYhqtAnlpC59oJwJMUtf8FdfJgJIz
z1fP9qXiJ6thl0FKElSuDsrlc1eBrb270ZcdLdh2Q2GAjjkerynf3pnR6Y2e
t4yyv65S4Iyhl3/CrRxM0nzlXdxRiC2Di5ImcmoQwrpvfiW/COrfgucfmkrM
6m4Ief+nBgrkWZKv9KbApBq9kObnXDwSftxT9r0FVpjRmV0TdUfdvRTikYVy
JOp5a5t9SgZJ2zc/3KQpqPX7X4L0HyIyaWhSB93wxID/4j5/FizAjqIb6jfd
6zDGuNH+gkEQWkd3txkbVePoBfW3T4qKMapiZ5z4IwsI25dpJmTXgHWjGT77
iA3w+kqviZZ6HV5otF67Ql8OAW+9HPhEijAuPu3ncmEA/Iu1+BDWXIPsPQnf
fHmz0JxvjcFZ1RoO9TJ0P/ewA3I63a7lpFpk89aUP/MxAV959UdYfiGitAXb
Ft9UBTiHax2iOZKKjpgVEtsXjibJ6s/zInPB4E/p8ZisePj3VTZsjSUDQp4w
7S7US8SbLedH/I/mQvLjNbrn5EJw4F4vf8YZB67c1jx11I1g2SbxfddsPLJf
fHLS0SgJr/lPWEW7BKKOlN+tSLVAuDMg+DeQ+AzYndK7/tvpBx3h34I+HvIB
3gPRF1eVw5Fpd83TCa4nMEBxIkQr5ENlqqBs0oYDNgrc+vEgoRTdPtdScfPX
4/mrS8xaO+tRL5ONeqKxBC94bj053ZYMdL+smrSrc7FxhaO61qoOjgUfvV4X
RwQ+f/dwZVEyFuz6fHrAuRL30pz6ohUVjD3q011vKjNxeoj+gYZ1AvTK5AbK
xhuDwCG2Rs/AZNgXHA4det7IoJRostnWAs15XQt8ioVIvqT6jX2IAMMvk5fj
CS0g22hnIE2bguKX9sRPcdjj1/1p7pm0ZMyZeHfnN8e2jhfG8XdOGR5sJzxe
VHdD1+qWV+fu+4Bl6zXutzIxIJnw6ug5lQocP+bJMXqyGdU17bON9dLwtozC
Vaf7+cgHlAn2Q5lY+/E9RWNFB4wiC0Yzuwmopt7JcuFnC/5mqVFQGyxFTj1H
bQZVCqyKlmts+RbCMx8tfbPkCGyPbhj6pZEFKpsun+g2YkEu9GxW1XGAl1wV
v4v66/BntydngUkOfHnO83LnTDOqKOyvcggjYHUpE1MsRw36kc7FaipW4qrb
neyg04Ww7Eu778x/xkBYPfT5c3gBRBmrjj85m4HjEVvsm62lKB69oLjnQRlm
/tfzn978do7u80j4lRuGI7Rp4zTtFDjd9vdMg1QVTqpy1m2yEME6OPjOpTv+
mL920CP8VDaGvEyYkE4i4Qp31iDbajKUysX7dlIR0e5+RWTusi6upfhSS86T
4TXziuKd+HKYLPELTNNugd0/V2byMspgOEWQaamrDjscS1cZb6ZjmcPeorzX
Bbg7oLKoIa4GPJv+UxlhL0bejdUxqz+ZuJlde5+8mYD+HGG5gwEtwKhVrZCa
V47Wlw7dmvaIRYaDctUM5u34RsrnolVCDDi4/G1RU2rE3v1re06Gbs8nxnLV
94U/0O7lUT18PBUFLNJKL52Nh2eXHE/oWtaBZs2144zvqqDpD+/L9f+qISbw
URRtWTacpi9paTrVjL8aq4/HBobg7QfyF+lqK1HEiKXtRDYFBJwZs74XVeOg
2KjQf3900fS8XAGTQzySPujHhV12Q7OEVypOpylwjKaqRfZiNuT9s5FjtIqD
8fy3pVK/GzDpRqrxEV1PHNUDf95BMkYRJB5c9U2DnOsPWERZ28EgUvPDAE8V
jt3fK+20zx4SX1m8YzxIwcTR9oX//3dG3HCyd/FzMoqcMFyMutIITiRPI25P
IoTM6L2O/d4Oa09sHPqdk/Df2OC3T2NJ+FW1i6vcNxYL/WceBzzNgcaFEmEf
k6PbPd/J2vlxAj455sOS9LscHvT1rWgfjIdb8qs8QimZICckVRJzJAmb6l7M
pVYkgnW66aMtmyyQcz1wWKNku0ddaPxFaq2Ag4dpfuwtK8KHxurCii0kkIiN
WpHfnlv+r6ipjU8xEIaYTp+TzIavzU2lkoeK4YXMf/6UxmqQun158+l0OR7u
e98b/NcPqVv4vibPV4GYQ7eLimgocs3qHJJlzgQC80VqoM/Gh3fazBK6M9Ez
9eNyb2c0at977TEW4oOj3SvFJiolqEVLqyApUYn0o4bGp5KyQPfZ7SG+rDiY
LdnnwbeLhObJqu9WvcrxdjyD6aRqCYZ8s1V//CsTBl1pV3JO5GKLPynwPFsm
Tq6c0RybiQQ/z+GX/3XlgmSshecBjmzsk7+Wl8cRhe4e63NaYkVAPRJtc5CQ
DXwLUwqaizXYVpKy8SElDaazIzrNeeuAuPXbdoqlDA7vDZnvXMxGeQG/KcvE
crR3zdDl2taxz0mGpvZ9lbBXYO/vOvcY2O+rJRshEgAH9mSr3e4NBW3jX58X
ZuPQrkLzu7d8ODb8YhJTr8zFf1nG8rRSYYCjvQFtXiTkmb3ybBhyoPTlnNXA
9r6fu+Eq+ehkDh4Wr/oVykrC1XRzy0tjsaBlq2ieF5GIfF5JFxdG2bFO6lyV
pnExEq08v+XtbkAXv0MyUzGxeKPe6xRlpgr+lP9KtePLwb5arkCzqWQYcFEp
6ZjORXbTpQ6DiwmAQ6oyZ7b3YrDkwczua97Q56NbUr4nCP96aTLdF+sAsQ9B
LTumizFl/cbRjphU/K6ftMSp2QKnSdS3x6lzsKD17vfHewuRCvsUdLsVMJjQ
NgJsldBhOAP+7x/BPRetsAueKbjG3CoxHOcLfF8p9S+nY8E91LdpvNwH9maW
hkRttEOE/NU4wc0yZNjJoW4qHws8B8+o/uMmg2/v/oLjElnIKdjeeWmTghVP
rm3oZuagj1K3w9jfKtw8eiTgbEIJTowU2RnSluPnfvCYfB4H88XTF2kyCmE9
Vka7sLcArAMPin+PKANLly/W+4pLsOvoC6djdN7orGpP2BMfCuWdU5x9q5Xw
a/xrWzhdDgiM5fcU6mShTlSg/NRIK5wTvlxF41ACctU1l+fO1mPUj74HzkuB
0Et3fwaMvXDytnHvdaoEpBG2UjFjKMPKu61lhby5MLH1n8/D6DjgnBX0XzpW
C3UyY7Y/+TPxpwPHw036LPQ0TzQuZyqBMCaHktGKAjgftLG6KhuB+SX8wUPb
fJTYmKSzzzoNFPrvpQn3RIG8/v3dJi01WEVkvZJslY0+U8lpgX3R+HSWQbR0
PQR7HBi/Th2qxTMslzyoLhXhy9k3mlwaDWAYPpX6waUF6Lx/PW2ziUfb4Lz4
7sUC/FFhf7TXkYyv/E+Eb+0go1odYVbxLQH/XlxoedlXgA8rHnSqHcuG4WGt
91H2jWgswlFmcSUA6F+4OVb3JANnMQcL6U45nM/QJi0QouDbl7bzIR+rUVgh
djbuTjSUcO2XzjsdhRUjLEcffGlGBwvVzcMVJXBprmb1+pYd6gd1HKPQZ4OA
jVbv2s0S1DUPUrtjUg1cCh78y65h6EjmvUi3MwnK95MarVSeQgD7qy2tvbV4
YkK9qWBHDsbtos2VMepGImWg6EiVD+4DYnsRYw2ev8Y26ZZ4B+huitxzO0zB
IJnkljTdSrjXNdAQQspGOb1HVR/4ubD0QDONW2EKbA6IpKW8D4GDnpverHHb
fqZ74s6R5UxkaPaTfe1djTsnLDQWmuOw/M7JBtLTx2DHPHh90rsC/tk9Dsvm
KQYa7GW914TAOv9qOG4tBh9wrzk68vqh8rt8zt995Xjp0d3PQ1FEnD5oJIIF
VTB79Xg7c2wRptTEd7NbFEH4bK51YIkTZubzNwkfiAM2c9Khl3lkdDOqXezz
ikcGEY/JjIUU7DsTytu+vwSkTRp+u9cVYKCl+q8HTmSwtuRbSxJIhr+qh7UT
pKsgS2JxQIghDp7+1uf5czcRvu7YPa13KAYUp9KuKH7Y1kX4t13JW9WoufO8
nh0lFVzG7zcQA5KgT+nL2TO7ksBkpkMy5IYDFlBMTUUnnuKln4ZKW9dyoL66
q+qZRzbo9VziN93WzfrqMdE3R3yB1mbxQddsLrQHnB6g2ZsHvV7i0WV0ybC0
I9G1u5OClaHXVulON8IJqsoO9kfVsMYby3DxBQktq/cxa/3Kgq8/27kFu0lI
SAm2OOtoCf6+dY94grNwf1p1CVE9B8vK91AVa+WDr8OCsAxXKvZLXanqY2rA
I3va32coOWFtSaem3EcSqDxttHo/RQZODdOc9aeRYGqk0PntIwGDCr/COcY8
bBYfCvp1pRVTp5SrN6bJEDS4eeftnmq0izegd71BRv+9ckOj2/M7urm3phdm
4Yq4pCuNCgm8ddz3V0b5QX3rG5p9xhXwLqfQskCPhLcY22hXg0n4fs/ojNJ3
Mhhdv7+av81FifevzplWhsLs9+Pqrz+ZYQAzc8Pv+nT0XmDRNymqgED90UtR
dAQYTB858DBCCeyC9pFNh8h44bVHz4h1NgQcirpH/JYPenNKCh8Na5ES8/sw
/xQReB+ITxCtKejk6dTObdOKYgfLCXqD8XBAVV0370sM2vlbvDG9ZAP9PYpL
TayZ6OfBPDz8vRVaLEay5PzscfCbf32JRRus7jSRb76eC3l/kHXuYyFoy019
L2hNQgdvWiamDDJqsPpfa0srAAaJmyepOdMw4ditJTNTMqrKPzTLfk9GPc86
y3a5UPT/o3mCtYeCJ8QDomxeF8LVL+/FLs7HYELpdGzaZxJ61tzqe6jQBAdc
oi0+m6eCpZ3wUz6TQiCd6X/slBmNpI7RBqH5HFAntYSaG+TA9OY+A0GkAPfd
i2c4litwveHb0T+Hs2Bw+cr3vjcxUK9RcyqQqRbG427kfIJ4YH+sxp1KfIp6
sgp/enTKYO1EsJCIag7EOkuQVq9Ugk/IYdM2hygo+HUzV4I1BPf7C9CK+5cj
KVtIz340HrpVk1rs6LKgdCJ8xPJgK2rmlbcfAzIq2B2gKS8mQ0Xis+kpMW9s
ZCzl5T1UBCYphlMHfhNxvyzVt7Cnpai9WlhIX9oMRfx0+mK/QyAkW3Thq68H
el4KD+p/kwceefx6cZpx4CfdWOEh+ATKQmvOMwyEg8hrq8566Vqg/2jEl9JU
jhfMR5KJ/x6B5ME0RcW+LCC6MrDtD9aFdHWGcyutZNy1JvZnULgZui4d9Mzb
9g0Tadnw0xeiUJwxo+4CtyPeEf2VOOmfAOM/l0iaFRXwime5cTeTF7JSf9B3
6onAmbCk63IRwfAv2Tn7uz8ZvQaLHzmqJUBjnEmqmkUhBlHd9N3yCQZy52LP
xHYu2fCl6G98iQTqM9nx/FcqcegUE1XzUDwE7dL3zrQJwbcXKQ85XKugj9p5
Q49UB+KU7uXFUxZ49t/+q74ftrmAXl9Alj8A5n++2TVymgDC4v3Cljso2HNn
sya8MBf2roaPa76qx/SqYY5NrVSc+/nseLxLFmpzrGdf1k4CZ0OulAsWtRji
MOOUqVeNVmLHQ23YW2AiInyP8N8K9GN/wD+RmYy830q+WmZnwF919X1C/5Gh
KLsp0Px9BXpH29pbvayAzwUWSmxFmdBr8Zw5xT4ANpgP9vHsISJj5gU62osF
yF7Oe8uatxju7agfXeOJxg2aBs0nhCA0q6A3VzxcAzyLL75+G0GQI9mlufUm
YNFyFPu9pEqQbsrQX0ysQbfo+OD2y024pPnqB2tVLhxf+FFBbq7Eekr1VJxw
HKQpSsMzGSLc0jrodu9QMd63pqk6/i4D57KoxisaSCCivDjBE1mPbOmmj2n6
svHdo8Nhmp+MYfizh3QsdS7K0ct/Nde/BWtKsfITo0lQbJP8wtwlH04OVql8
4spCceu2qraTmUg/oWhkdIMEY6GJsjNpBsC467mDwZcipNZxn6cj+iB/Veel
JxFxYHmR9PiwWTa2+KoOMAlooJf6EHWqLwNw3srkeLBIxl8DV08n+NfhEVoa
RbcDISjHdWeEgccKjEk1o4d+V4CVBGOvjSQF+w5p6k7ol0DG8o+r6qR86KdZ
1oq5mQBrW2N/62Nj8cJB08H37xBq72jVuAuR8d8VF2nLqxngm+subD+fB2u3
on7nPo2DLdv3h0JOxoBxB39b92dX/LKo9XN+Lh5Sq8dmj6cUQiuhYkfJIhnY
PsxvqSUVgc1vZkp+GRH40DepTKMEX1XJRvGRS3GHhtrq4ZRIdHQNiTi6nAdD
G1IreyLawDV/wafhcjlUmmliJEsNijVmSohYZ6NlzvrO6uZESJAwKGN/1wTp
HJe1+lJTMGm+wblSpQEPajidVLZJAZZfMsqnOCrxON/Fsjvnk/Ep1U6BQNYi
oB/VE+surEaGrPzh6OvpcLfUmJ57gogT0/8M33U04NsAP5aCsm3da6weqW4n
4zeO5kYT6nI8G91dedrYClUi7/01fdiIf2PuTadkFEEovWNqEHUlTkgknJIy
rYZsKeM/k18a0MREXjdWJxFLWj9zF/b6wYtxmilOvlS4aYuSXYb5MDre7lDI
1IyzDHTPu6kSMb150uH5VCW8q72wfNMkD6MH+ATzNOOh2Cjm2M+5cgxbH7N1
JCH8OybhncNRBHWpJs55rQSI1Df4/CXfEyKVd5bqKnnD4e+761cjCFArk3P9
RhYJzv7kfxsukIwTT9g/iXWVgOGl6CBH0SCU89L37U41weDig0pP0yqwtW4k
/kFoMZjPCFypqA7F/mEFK+/Aanx6bIp6V1YN0J+jKp/JrUd9es4ok7Mx0L5r
8iF4pUAb/PizrJGFb6No6pWy00D03Rni2/ZKtB3/frT/aAGcsRA+2MJIQaGe
JfsM1XgQl198Qlgn48DQzhe7eeJwklnP6kpHBc7vfXa7stEBp/ctcmqzNIOh
wdhNDt1g+B4hlyC1FY/aXASF67rFGMRxm7ntSx7ctFK4anrTHzu73fokyURM
+DpwiXssH88KMGyGLRSAaFrAa8awBqRtN92lKRqJOyWuf9XrTINJ7lVKm6Yv
ft60eGvnmo1HLejPvfjTCPO3G6vobMvwHUd/2pRxEhw8ayFbLN0E8RoHLFpG
ctHgPu00b0cC1rxPdJxvzwGl/MyUqyfJUPLio9w9/mxk1sh03shrQlFV4h9j
Qgi2EZXS53eUwcPioEunkquRklNRYFueCENnbTeHr5Dg4sTJPYwBfsD4N8jL
c3sPvb7rWDTSZIOE7GlTSmQQzn8dydSbqYYVRopzMyECxmtTq3LcI+FTx4aT
8qF6UOVbWtn3ogg2uBikdwchUMfGVec0JkIX0/OXW0NlwHC1ZM/xuyXoz7r1
VHysEtde53TnbfPs2LM3QT4NDtCnSn6nEEuBd5Hc7E5aNZD8qXQj92ccGHp9
DxweLkfh5/UfSkO84VL/XfcbGXFQkK1pPvQyD568/rfC090MD3Z8GlAKrYFA
4rH69d9FoHxerOfiQANyf17/sOWcDbZ6B9zTxqMxcfeBy/26Lbjz2o+Jgl2N
qMFJTw5zjQRh62F7O8d8nN7T9hKY8kDt/Oc2vwNN0PTQsmbIPQfXuv8RV2/b
Yrr4d52iPf746k+a8K+kQBz9wibpuCsHH4lKfHbIqwSBPXL7+QVKgc+gPPX8
oj44xwXepzpQgUpRA+FqmAKvZEJWJn0NsdZWlT7iVyUG6JRc2FAtQSm1r9rv
mANR2+qOyl4uL2ge0Y6hbaHAzf+uHbqvkwz/mA0L3J5vc2ne0M7knEy0qxiI
9A4thQifSPpR4UQMex9oSt9fgQ4mURz9z7Z5mEWjsF6QgKIflqTSeqqg0fCd
CLVkPoDMDl0R3wqsufqMmqzQiH5Nu+ZUr3vgOfoFo2d+uSgyN+Gx+sMbVJlP
w7p2Ks5HXDMFrjos5aST/aUbBQ+2ToimmmWiIiRae82RkaibcfpQqDJQgdbh
Bk0L+LIS7GL0uwhLXSWy/5in4ImC1eYbpmUoJ1cWmCtpgtZuf2nKr/vDD77m
mb+euRjgnnSxUCMTDDRf6ACFAld0301VECvAhEnlo9AjHdzba1L7a8kbTZWO
XvQWzMGhmE71w+11KPo2ujj2TiBwnFQpfJpUhVRKa3fYWokgZ2jMd/K/LJjl
r47OJLegmNVJS7vbieip/ITPwDoeZtSeXbp6rBTXhcLJh3XqwPMKYamQZjt3
DJpUR9Ji0Y70rvCDwGPYy2bbQF8aC0FPffvO7CaBIZPC9x+vi8G3/lfZcB4J
WFYLGqljotH95Qu78JBY3BpTa6XcqASRO29tdCADv9sQclweNsIRV3aLXb/y
0I6ZML3W9Bie0Dfpdo20gAblvyEO73KceOnwdOZVOVJ15lRcO5QLM+x89GuM
JLQ1eWmYnJgAPqYWZPsdOUCUXf2wO8gHzdjOcBlQMvGh/YFj8V25uM69Ltlw
IAYugMrAU7dkIMzXOfYltMCiv+TI3dTt92lQtDevpRIYhQxPbGzEIIXOte3c
VClolyk3rbwggxJQjIdu1cFcjNaj6ncluDQas6AQR8HnObYaIp4UmBFkCX9m
VAsCZdmwWrbde9xlLeKDM7Cgs2Tv1nAkeL/kah3fKgSfcJC72+yLB668mL4n
7QnR6juKO16UgXb+9ZBBvkpsM8rNax4gYUg336GNTQrasOSz7JNogKtLkfzC
sylofpq2h7/NFRSlf9KHqSRie8Ol1vhzRIyfyP/w9FYAONQzLTdoFuNS7VjD
oKAdiAvmJ0vm2mLPZCXXOZlqKOqNkvu2mIsPym6XRm8WQ8to531WmyfYf9vk
hWwIGW3y88Z25NQBo7Npd0l6A37y2az20cqChYdv54S/RcPyfZ3o3ZUJgHes
Wsv2RGH44sH0mXt1qPSBsflpPAVLZpjs5XWrQXLsY8CPxCLMWtIsqcirg2S7
Fz4NlAR4x3T82L0pcxzIPD9xy6gRIljCGZLeRqM8aUVL/XIA6MQMKfEUk6DH
9cQ+3b9k9LTphDcHY7EgaMrlPzMy9po7dFdmJKHkmUwVc+pMFHzPUFP2iADv
30iYXN/RCJfHz7XenYnByRMJxs+K6+B8U0Fe/fVnUNuRtLRjzghNk1WeRa/G
wtDhn1XVq+kgmHju8aUdBfDRIuSHW2MFRkYwd6UbkNC0vHVddCMJ08eOO5+U
igEf8T+nbiZvn799eZGsRzaaVXH/ifIiIFUFj8eiVhuwiVRO9UhV4LC77EJJ
Wx0KfXSLXourxLpPPTv3RlSj5wPDmeLWJrzMbqcdpeCFi6oZXWx+MXDDci+8
VEzGAs63LIlaZJSjnnx+39gd+l4psJ40yMP3puc/jm37YVMuTxeXeC60hYw0
l31qQqsmw+gH1VXwy1id5i4PAaV59Ds/dmcir5nT3yfns3CIpTr2gBqCiUbG
+IvjZOzOuXCPe8oBDEcqa/vdyvFYNL2y6q4ynGjOlfobRUHaiV0vn0UgKl3n
Te/Pc4Arq5v+s5ap8Pd04f7RjzWg3aAj3l5mCzHU8nzPb+YDD/ncSt0dhN/h
XR2GM+Fw09CbDU5WI02qpLJAXAowM5zuH75CxPlegqmybglaax5Vpl8vRLfm
azbHHYj4WYRBcI9oATym+bvRcT0fRSqMTxiOFINnHeGy3vFYPM/lMdqeXgXi
HlzdxZkILeMPftA/D8NjLnJs3LlRIPsicU7eMw+8cph9DvRlQ/7FzUyHAl+M
PHC+m7DdE42MS08d0cuCGpY+izIWP1Bj2+Klmy/G203PYmZ9qzGpV4j2zXgl
xmcEsi/MNQDtxRz7LHcnzDdYU/tC7461rygcmVvZAO4018TDklGgl37mmlEJ
XqfbF5sxkguMn3YJ6FTHQ77KUk9PQxR8V9dkCl6LAj4N8pXJE/WQcJYpQfFZ
Ad6pPBItT0NBzPgQJs3VCXxrq25Eoh8ONMf/y7CJhYPsDk6NhhSMajqynNVZ
jGY8D3J+bYSCMCfd+CcbAgyhpbWDRxRW9hfavPSqQLs9P9daJVwg6L85m687
y8Bh85J1jmgYCh2x7H/6iwC6ooE6flHJ4BBRsufp1Vo0nnpdtfK+CEOGNW4J
joTCN6dQk04zCoQFbLFYhTTCvjdCv8f3UDDL9meuWz8Zf7bf2PtaJRd3tsmq
+iTUAN8FBVsa7iwMdyvyG0ypxRHWfX7iJ9ugWOPad6vtXvLqYbHfbh4HMK9/
YL5rvRpKCDck2ULqwJHWVGHP2QL8+GarPFC4HJ8oWmpSs7WgxlSUqokqAUg8
mrsWfpXjI6Omczot23z4+2bfpLUPTlqKJesxbZ/L1kYYvw4ZbwXOxzRukHDn
eNzyanwO3nlzv9OhygftOn/UP3ZpQ4NfGaI1+yrB55tcZkp2GeqXGUhJ++QD
faTsaOiLQvBK7ef59pCMsUaau4KtYlCdaUmdoSsGf1fLpF7194dmr/ScD6Nk
jFBPiVwWawTCXF+Lv3UWiKMZzUsnD4zF4yLUqiSoMJ1dnaQQ8ZuKyB8J9Qo4
L+NZ9exKGjKU63SQxLPQLo20T/u3FTKHC39ZHQ+GiqAECUZSNbpb5o+cmMuB
933ZvzfuVkHSo6+n9o/l4rkjS570BYWoe//mxA3OcjD8THeTjS4NQ0qHX8od
IKK7ybKrUE4salf9Us2WysLaNugj7M9Dlp+axzR2lCKT8mkmM99S/Pnl6Uwc
fwEGO+jU1Bds6+w0XfwrVTLQ66ruh7kQ6GW7e1hAuxIflj4ytT1YAplCZ98H
L1eChImSKuNwDv5inbV3OVkDs8OCUfRdrhhksufiKD8ZrumfviH6KA8FCdmH
BAUrgN5RKNGQPRMdvm8USt0NxoW12YRJi3wcdTKoCc8pw9ofp0/E0tkhQeDD
46r6YtDYP8Uz+Z0Cpx2VRBY/E6HY7ZOp/H8k7Px5QeVAaRrUXA1slH1DAUbv
XXH8PfF4fdj3+UhPPZQq25/jqUqByofSdtOtdhhnp00tdLwUbAcZBE+e3L4/
9UDPg+BEMPb1DYlJTkV9JoWI4z6WuG8kl+Z1cgJ4P792ZWmNjGsLCqfmCmJB
/0ZXyFTLU8zXeiWnH0jEYFunFBHeUugYjVElf67FYWujsSblrO1eZdT1koYE
pdZP6Oan6nH6NlPX2RpvpDlHImCUL/JZc7Dr2Zdh81rL7mWOJrA6cjkhjKMK
S5XH81p+ZINRRv1m/sNsNP1eSXN2JRdf5AXTcMpkQX9838fFiVL894S3iMql
EHYfbb76yL8dSl71hlooVKJ13ux9WYl86BV0KOPfW4XPS67VvZhqw10sNN5y
uZXgXx/45UY7CV4vf+FwrPCFGSWdNw97EoE20sWf6V08dpzxJ8lKOSO7phhT
pn0RaiukhasiBTMKnqyzTeah5jj35qW2NMgNNizO6/bGKoeT3D8OV+AJ16tH
Lz6OgUFx+WqCUw246D6fy+nIRSt4eZ9Ylg/GzH05Y90FqKzycTlHPAdTn3w8
n9JWglFHLtUvxibB+R/0f86SYkDM+ExseHEsUqhXIk2aM8HzeCVIshRBzMDw
oENJIuCu3Y1LonGg/rarXJazAS8e2/Vg4Z49/jRefvdPtBwsu2jzZQbioSzh
grbX2UKMIhxlV2MhIU+0kZEAqRxOLNm7Gd3UAIF+yR/P3/tBQzIx4MjbGnQ2
mHGbSsuCt/pnWRNIldj7qYF6zL4MSH6/qlmP3IJWKT2m/sgyTHIfzh/gf4z1
m/pNJJF4uG9HCqJeK4RSV8lU2i9ZGBxV66YvR4Hu6wmk5exaMNFKG9HuS8RB
H5NimYwoIFVZuLpIGWNhTDc359kGvPBy+rSFWgguCNb8d/++PxZfeMKfXr2d
n1U9+ff7GyDf4aFYWnU9HJC34OmXjAIVBdmFPAEnMFD0F++zDIb+zaGV5vdR
cM+A0FRQFoRu+nwrFqfdsENwPuTukzrEsw1159wTwc9PWu1shCe69/k63toK
RDnVz+ZpLK1QPbN1zCkwE5LpBnQ+KxSgxj9u6WTvLDwlcao84ug2b8ft89il
mw+yPGGLn/QpwBL4OfE6UwGsedfMJqvXgNB1R76ojXIQa9jr5sZfgpwGbctb
O26ASmBumRtdDdaIFZ5dUiyENysNIy12jtg/KlQ3HY544VIPyVCmEuLJHxYv
/o2GH+WmyltmqeCpbfkoIL0AFhO7TDeJUvjoWVRcy2kiuh2MLFCRqsbDl71s
NfNuoQpV610O20xwufftGJNTE24EPjz96nYZxnprrd2SrEZB/p7fl8azsbVt
F+ULRza6DrHpmNNVYwXxhXVJaQm6SLWWJG+1wug9gRFKWBI+O+Q7eM0lGvOO
r9e+6qsGUZaifRbQiIuNW9RGd8ng0FK08egLGaPV9OK0HEOgKK+L44lXC376
+qDjLGMFkO7wvp28EISGnXWDHcVeeGinrSEcigburvLn89u+Ke5Sy3Vxfymw
d/ZqicVHwF4Ps4qL4c7buV+pwqNRhw6ndb9wmVXiqGgge+3jRJT+xCtS/R8B
+WYUfQe9dTD8cSp7w1o+0vQky7PWVuO0ktJxToVmzNyc71psS8Ju0dN7o0gp
UPtE/0WpeQQIu94Ksc9pw/58xTEmzxI0G/FZFONAOO48+CaWqRDOC3eNfApq
RJeiXaKaiqV48+MzI+EhM5yRdyAPuNphaMVp4xsS5ZjT9X3PyW1OYI1K7Is1
IcLWP5oe7ZQcPHoj5+OnoBKo+PYgS58lBjh2PsxKKM2CbL5sYff9LbB8vDCR
i7UcZffrNOQ+LwN0Y/ln59EGmmITzGVd1cCqI+xcLpEGgXVSNr9ZizElzdrv
1TNfpNw+Ov3hXxkwRA/GBA9FAwt0jdE+bcRrkaUqU4+isHrJx+PH2XQQLn6d
8leZBLofl8z6zMrh4M5hqR0uNajGT3thUTgDibUOh0gx27n8qze+8E4ypFbt
9NlnUATx2vdf8KzUo1KV1vkzfhSgcfG7ssCShUca6xt+5PvieeIeBYlmEoZv
XX69n7YRymXWZ3NPUlBBp/OfQGYy/j4fseQ7kIv5fNRlCwUFIC5Zv9c6Ix8U
Y34Ju5V2IO0M89MzUr7Q9nPoGteMJdzesX7RerYZrFZpxqxPVALKiVh2Rz3G
umN4dFY4CGQdTVufhuegyTtJQqJzFXJyOnjL9CYBlSjufDZdAho++kn3/VNg
b/D5N6kD1XCCxS+D2awOgzoFDVbCWuFr5me62zPZuGdKtUkUK+BTIMNu4qEC
aK+M8bejjUY2XvusZt1SIO5eEz2pEAReqvl/xr+GI+lOm7psXhbqqDh2rwvU
oHbw2nNr4UToWLf1qG1KhGvP7EO8Pz6CehqVscGzkfjjykyzhFwH9PdZX77Y
UALU//iukdoKMRUZeguSc9A1/USn2Zl8eOUWvYP4oAyNmBaUeC6S4I5byrGc
0EgUS9RfHGtMwfnb/1SzmDPxYhaNV1NkFSbfXNWhP1MEY38o6lbHC1AR3JhV
Z0Mw5PP3aozMhcNXr/iRyAW40Se02+BfGrj83OHR2VqMLWI3k39qlcBSiWRK
+Lw7PM50LVAUJiE19wZnKCUKguvkxiK+pmNz4JDF/jOFONchZGBOXwJj91Xq
nz/NwS8tnzS933lAeqqJzrHiGtxHGAowkywCDuI5Gi/FUiiQ437LzGkA7k+s
tPz4CsALmuvTr16BZpaDzR+bqiF0xNm3ObUSmdf76850keDnZG7xu4PZyJ/T
qsomHAhRE0pSxOx4tHxsN6/G04I01UlLe+m9wXnzl+KRriKsHJlZqNBIxtxa
ldUMqTL87rFrbeUlCc1/lF94xHkN6duuP8r+SIBXzpJ/nvsX4n82n87GrVXj
lvfr34q3wjCGXeac+DYfa3yL/7R1qwD7aevuzLXEo1DAibNHpMmwFp74b3q/
KR4KVzowfDgXOt1MXANCy0H3pVNcwlodLjCrS18c6QAZhuhb35qSQYD6a+rE
uxikyI+PZ+m6ARX/3e/UZwwx5+HNyqDaWgiLv/aWcrIYBw4ZMwo1tKI5z4R1
r3Iu8MHlcxe8k8C4s6eWeqIaHmZmSHCUdQBVbstbxt8eWKYudmxWIgf+9CzM
pM21QJL93fT21Seo11z69O61DOTuO+on+jEXnpvsHTXVTQHvHxn3vmA9PDDz
sHkimQ1C57/WbpDJ4FlJfWdTqhhvPlOg1l50xfnk69UJxzOB9mvlSHeeM7LU
68vfTQqEm6w2MxqXy+HYSEG3QRUJf68QIx2sCjBIY95AwDsapUz2/V1oqIBy
0/9qWguTwSbPayOPPxcDspQdVMZJqCiDvZ3ZWRjFO5l9RtgUd3Pci9x7mwJV
UXeCM7534PTRlLDrsgWQ8G40a58dCbLVdX5cP1qKZ5hUju+7moiEiz4J6wOx
cJQhgzdSnAL+pw43KalnYuTkfnO52RLs633eznItFUR67F/o+NrhYGVOdTR7
AeqstQom1ycAu7CyK9gmw2SpWFbEUhJ60rOMfT6fjf8J7bVIH4nBJ/7qQVxP
trn90KNnZ2YrkWl3bsCq5l1oCufSVuMIRAeWPpqvt2rxSuwVGZWYanxHc7XQ
40EMOJWReiwU8oGJVSS5KCABPR5PnZu9FYvhG4/zrpyvQzPX9Tnt62TctEnR
Tw2OxihTXqFP18kwTCumZOtLgbmqG/pxcunAsGkSrkxqgHsht8tWDqVg38Gf
hqa2qTCjY89ZvaGFYuo11e4GSShn7hoSwFgHxPk5WW9yODiZMGi/Fo7FyZUj
78TP5EJq4PH+brtyLA74VC+vVAn1/tQhfUrBcGSY/JTBvQ7YxFdeujYWwDXy
OXWqF0QcyKziZmYkYqMv4e2DiO0ekCKVtz8iBuPWOGSzMhPAj1f91NV1Cs6X
G/TLMAcDA5Wx1e6kUgjWzDnMYRkOmzvKOPW+l6DXixfzq2ceYc2WQ/JPmyLc
wcqiUcvtiBoe958zWmdD0Z7RyFraOhD4XGhVpVoHMjKEkFfMtRC+KMMatzsP
rFLO79qSz8eczKdHdGNDILNHcF6KPwXX8uj1s+hroPyThpzKcxLQXD4r9vDG
MxAwtq/ZGZmHkv6TxbIUAszsI7g2Pa6FLMlUp9oiEp6YyPbx6fFHKvn3EodL
8uFksPsFw+FcrLUv8Y5VjcC2QjlK46lSrDhy/6aXewpIX1k8+/F2DH7elLe9
wdKIVwi2y8QDFcCpxOaqtRWJ1B03v+9hKIO+H0oy+o5h8Mu+Wl/NvQpHmY8c
zzHLh3+W1k0yvWQUYLpmxsmdjRFd5t5DwyVwYIpTopw6BBdzKBPsOyrhDoVF
OkmZgkmdhLrozzVYKSjNanbWEIecq/0VhppgsI7lfUlvATBtcUmRRMtg/mdU
KLVRIZyqziKdlPcGQmAoFVtiHvySkGQicnvB0nLGveG9RCxbSZLpuxiMD++9
lNpbmwKk2+NG0/eJYNMopNWrV4GqdPzLWnxp6N9uS6WWWgtrbCoR3Edige3y
qS5Vrkro1U17LDoVAd+/KqimTBExYTdZsG86H0QTVUTHTB/ifWKO42RoDWwE
fyNwXqjFmpruWx8764DlE5tq6dEmSI8VJyu/T8DD8zW8BaLVuFTFItrT4Qtq
11KnWGuDkOpmqaQCqfRSwU5FOeYT2VjWH+zq7Lzdyzmj3XV/5+Pqd451j6Eq
fMbgpyNCk4sDYXq1MUK50LK7Wb/ypB/avH7s1XK/Eu5ypFtvEHrhcvR4btTV
SBwfsio9X9cEL+wZs8wKSkAny+CnzT87+LnP9kydXx6QvwZlfyrezoUDFYW9
JQnQfzCTVt4+AT707GLgORqBFmMNv0mDVUjIPr5rqCQJueLVxezHw1H5nlID
Q38GOFr1W4XVF6CQ4wWeW9xtGHWG/uMHbT/84vqfSmRdOiTR1H8wJ27vjWsm
v8wfCtrWxXZFyWeBkVLrrfSvOWh97FQ8L28ZbHBvLH0+64JWY298V7xzkJg+
aFMkzQnB0ckneNfakeoK2+/+MyS0ydANLO+qgIkbpurhYs1Ae3hW7pEwGbzC
axQc/Mpgb1la2InuR6grnVwub5EFRMMoSaW8YuxlvzJAx1MEFeG9163tqrE4
w7xYWjYR5aL9kjv90tA3+GGE8+dUGBXjjb38zxdjIrkWLLsK4TXJ4YAPaxnU
Xl1yeuKaDf0NVRl0mUTQc9t02hyLANdzIi0Z21xryUX1knC9CsxPSr0fK/fG
Jtdf57SFCXApemwujxyOZnLSv1nFa4BDhLAooOMGxWpP1seGMpB9TpxRvwHx
1PWzLZlmsWCYmJNgHfsfysU0lr2UDEHu+R+e7WwJ+Fq2ifX3uh9G8jB1P6Qh
YX330weDQT5A/8Il9zCjD2rTZL+7G0HAKw8/KpvwJeLNkDaFt0x9KPA65lvj
o2zQLy5TFljMwJ83+Ca5lasgQ2fXrUdtDfAzToDwdc0HeOap6FzfJwJD8GX9
VVkVkDde1lSLL4Kk11vD02Y+yBesWEawIkGtXu21u+VVqDzW1B+3UQQ27K/5
XqzG4rRqoOuZ/2xg3x/Xe2+cCHBF70LBrbdpuPuXNG/Op1gsvOJ10/gmBY5H
BulcXyYA1dm2EsfYTGzvk7Fspc+GJUj0SarMQhn6tFHFOAIoNVmph6T7wGPl
4fBb2tvn5pm8sWOqDJPVWU0I/EmYFsKbMUgfBTfdcj+XavnC8oKk3sQ7ImbS
SfD/jYyGY5ZME56LdfBuLPWoZuoTPPDZeSuVtQouND7r+iRNgrfnnLRPfSOi
y3zkk/WR4u392XnuhUgKcDaqvvI5loaKsfO0WVRRSOuJxtNGFVikclXmklwK
7r1G7efUlQ+Rw8wtwxlECAn757L/EhmKOnZaTpwthqrs9pBTS9UgU3/bJkUt
BcKGCwOtbZvQSMqlb6StEKhnnJL911vwMUlV6IEZCR4MB2e+bQ5Enhvpz4TZ
nOFcFJW9I0MVMthJylrlRiJnBG2VVxMJaE8XfbKIbMbiv4fv98lmoYqMt/BR
iVpwmB2kqvpZD21XHp8c+56KhutXe8YsH2DLnj4Cs1w9VCXLEKvoE2Av0xu2
NHFnJFQGpFSb5uLy8v1S49YiZKsY9CYxV8DtE6ZFceoFoNMQc+hssz7eFsoe
1hupw+7GuiOL232Gh/PHqebHpWixnDfmwhUCXgs07VPy288dCv90l5WI7mI5
9bMSRGQP1MD17X7wecpIKey2A9DwctdZiWVBteFBcW1KFLJmzpSrRaUh1TGV
m//EI7FYUfGGCud9LIz+NPmtYztH2QUe6P7NRSUGxeYC9hK4uTjziMwfjxKX
b8m4MNZgS67uUXqTQNyv2xa0/ImEYHZ3ebKLCDEkB/t3epFw6wSji9exMqS2
NON+Px0Gvc+M2nnUqkDhXKLszdJg8H1571OtVCO4nK/Llp3OgNow96u+rsH4
c1r/hVMVAY+xu447sDqjTM8qxX8fBeUVwp+98CzCnWdk6ycfksCSdml3/aFq
vC5+kF6OQIZqgVMusSdLwNh5z9ca2xIo4pG+82z7+mSeyRvTe9mok2l6LOmY
K8TFnhO8dqMezI3yTQ4rFWNtgJ5d2AARhqVdLi7RFuDLz/2WZNdWXN66czJk
IA7yaTrKp+jj4OHm5OCbuzUYZivrcGydjKb6SoxTIUS8efXzoaBXXvjlXdGS
3y5liNz7cuytdjT2FXb5qtE+BmKffYITVzN+Pa6ZbzZcjO5DR47tXGmGsz6V
s0l6/uh+d/2j4r5S6D45z6vxpQSTrHMGBu/fgNg9pmXlha1wrbfFT/sGBRv3
SHEEBmUhfYyJr8KtEhBU/tBxIi0KDAV9h2KSs+H15Ts0j1JjoCDiXdOaWjBM
Un/9J/elGRgiKSy1KS6QfsdPkuqrOxiI3zju9DwXVf7uZRyWJ+LvD7tMdIZy
YeY22cBFtQLUGv8qMytn4yRJ486gawNaGp942/+aDPoLA7rPlin4fUfMjMpG
IZa8maX+dbIWtAVFU97INOGlvJennmSTMJGB705NWTaaX/xUev4jCS/qMjrs
Y6tDnT25ATZ71GHNPCt1xo8Ac+cV/FctKMBXjQuc5wuhw7h3xTwxAGu49+Qv
VZJxT+etVCNiHbbY7XDZGFWAQxcIBx/V1iL70oOOF6yO2KKwZCHJFgUdtRc4
fQcbUOt9+/J7DAG9u816ENWItEeEjueXBKKPuENzbHICcvXaJv3/+2Kxpc7n
An1ZQGM2R7/hm4XDSo7+bay1UBbaYdb9BkEuSycq4ZwbXta8fpNtc7sn2HzW
vGodibq8e4ul9jWAfd232xfziCjms8M+6HE9fvISaYMXiVhUtegn/6Ae3QVC
VFi/1SCB03lORi8GZoy2hJ+E5uPHo98ET10kolbxuWLuikx499pO2SLDAb8W
7boUtJOCpmoDhf8FdaKyx4FWYck6nKvTiy2d9sNWEtVbOv8IrCpZ1cq3T4eA
rZ5upf4cPHRO15Wr2gosPSTKU6UywIfrPY8vNRFu3Sl54+GbAS3W3F3tVYVo
EeR1gzQUjdGJUn/EdmSjxKzB607hOpBKDkoQayvGszsTezaeZkD2JXEbOuFM
6CzjsWMeKEKq529PC927Bup/4YtBSzjOr6CLjGchnjAaEF3e5gLJ16Qp75li
gLlNFvvrDWhupzg5fTIDqEj7acmSViDbtSJyuKcGKk+3f3/tlolCVDjSurMe
2SMP1ptuNkBQseCWrh4RDCsVbgRczcHO0D+p2fUUtL68R8qUuhzkVg5pByza
wmQzxVjcZps/RYJs9/aXgMbJet//hhqhnxCVwlBejUHF6/0MIj5YZvZXoKsi
EadOt3/9visHNZlExq8fvQ3fLktxsHkmgezc7HldWScYCpM1mf0UDuEZShUv
W0lYN4MfAlQ7cC/r5alykVLgV+DuIDQnwIny83X3FctQvEjwltCvYnQy3ptD
7CsDHzpVwWPLXuD8zblgeTUPynlSj/4ZKgLXZ9lyP7288cSB3QW65EKk3frW
KcsaCPvG+etzjIlg5ByAEmOFwNc++7iOLwwKpgWi0z2JyPrX+MDzGhKoFeeH
jgdQYM+s443W7iaQ/rpyLO1+FR6PJUXQ6VfjpgoLIX6gAj7T3xaklc7CTi/O
gqfUFZD2xjox5SgBLp/9VFw4UoFiNTrH3z4LQ3N++Xu9VdHAu4d464eMF0YP
/VM5dCUPogIeWHjWRIFDsX7ZRkc6Pho97b9xJh7+o5CFckpj4HnArQarcTJQ
C85f9T1fAt8ncs7YMfrDOxEGp9CHTeBl4nNIpC4FX3y4GvevIAkv9Kqv/NQm
Ase9Fwvn6DMg7u0SXWRhKZwUufEwilgPFYunnhBNiVAVWfhpZncyfp5Spdrk
rMA1vsd/CU/KYTMhuuH3UxtQGmnRsDQqhgR+CRO/QUcYVG4YLZQzx6wGkW8/
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
                   "], "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJx1lT9I20EUxyOKQqGDYHFQCg6WFCxuFSJy2VqwRHRySLFYOjhYFZwcLBEU
pUOkQpwKQgedCoJCnIRCB8WCpUOp+eWX3y86CIoWi0LBwbsffF7g/fAgOe7u
vff9cy+XjtGJoXd1iUTir/28X/vVmBoPzKOvL8KZFt+8mt08ae33Tc/hWP3n
54FpSo3biKp5nf92ncxWzFym7XQr55tENAJDfim9/nD6KDDN0QjlfL+7cDu6
VzHVmRaLcGR2Hs+fDRZ9mW+SWVs5MJcXbvhShzz4PNkdvvrYGV+3WzaZtkDW
b7r+f/804gmPaHs3MP/s9/BVSXDRhy720cuafPgwT/U9+P1lsiy4rHU89Tes
qvR6WfyCp97/ceCGJ7o+OLmzofjOPcFP4wy4sMyx+I+vQ0WXULsv9OMTOp45
Wl2hWVp0IxAc1tyPX45GzAf0rIw4gRXB+emmwz/CnzrwIx+95HPfL8OogcRf
6qIff+BJ3Ko97S54ogMfdJ7uR2bqwQ+f3+65ArU+x4/zQQcQCg51wcFv+HMf
nNN/uq/oB3xh/6mjmfQEr8G6PFZfljX82QcHfazBw2fO8Q9c6pLH/aFT9xO4
6EUH+fiJj+SBxzl16B/iqUcc/t/XX+TpOvQD94pv8OQcPPLpd/RxH8TBg/eP
eugDhz5fdjLy1dg7w1q/L/DQ7w91F86cIaVYP/HOoJ88fKQP6E/9PrMPb/Rs
55zAMHbP+t3lHD7wIJ/+oz59R36v+5mkav2gf0f6f4l46qAPH/EHfHDAxxcd
zzk6wNPvgvaTvDux5cbd
                    "], "StandardDeviation" -> CompressedData["
1:eJx1lUsoRVEUho8wNRF5pRTKwGMgGdAOmZgoj+7EiG5yJJEkYaRkZECETBQT
yUwekYSSKBMjOhQDA3Hrllde6Xx31387t267vff61/rXv9daJ6+9tymc4DjO
y9+/KLpUkf7lmbq3lO3qiGeO88drQ1HP9OQmz9T/eOYl8bwwad8zyR+pE23f
nnFnFspSXz3j/P9uDXhw7zuvQydP9t7J7Axf/vnJbtnrHpz1zOpk62Lfu12J
ux4amev/tH7Asdc47LFjn53mZlSeWR5dPl/yIC75kRfnageeOKxr80Oh/Qcb
l73a47+hebMj8hjPU89Xtk7vn68sPnGs6LD62uqOXvDTOFMXA/0FjVZ/dOWe
OOSPTpzDBxxx9H3AqQ7g8c86fVDV2BeOrzP8gidfcNipvtyTP/rgD7vRjMPO
ukubBzooTutR6xJ+4GuHc0qL76zO6FGyvXxwfhRfV8TBDv74daVOta7gC45z
jYd+7OEfVEfsNR736Kf9onqTp9aTvqfqHnsPmScaDz/w0vmCHXoE1Re4ID+8
Kzg3oP/Ba70TX+cX88+V+tW+yvLtdM6w1/kCD+0P/G7c7JY3bcS/b2zO+Pl3
yXtoXytPncfkQ70E9ZfWQSw/nwd4nRPwAl/jvxN22kfKD3vNT78fWu8aX+11
PsW+XzIXVE/sfgGlU84D
                    "], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 92, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0412311, "MaxTrainingMemory" -> 2133512, 
                  "DataMemory" -> 576152, "FunctionMemory" -> 217488, 
                  "LanguageVersion" -> {11.3, 0}, "Date" -> 
                  DateObject[{
                    2019, 4, 23, 18, 33, 20.7115413`9.068787353791446}, 
                    "Instant", "Gregorian", -5.], "ProcessorCount" -> 10, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 240, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
             "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
             960087714286809251]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> CompressedData["
1:eJx1lT9I20EUxyOKQqGDYHFQCg6WFCxuFSJy2VqwRHRySLFYOjhYFZwcLBEU
pUOkQpwKQgedCoJCnIRCB8WCpUOp+eWX3y86CIoWi0LBwbsffF7g/fAgOe7u
vff9cy+XjtGJoXd1iUTir/28X/vVmBoPzKOvL8KZFt+8mt08ae33Tc/hWP3n
54FpSo3biKp5nf92ncxWzFym7XQr55tENAJDfim9/nD6KDDN0QjlfL+7cDu6
VzHVmRaLcGR2Hs+fDRZ9mW+SWVs5MJcXbvhShzz4PNkdvvrYGV+3WzaZtkDW
b7r+f/804gmPaHs3MP/s9/BVSXDRhy720cuafPgwT/U9+P1lsiy4rHU89Tes
qvR6WfyCp97/ceCGJ7o+OLmzofjOPcFP4wy4sMyx+I+vQ0WXULsv9OMTOp45
Wl2hWVp0IxAc1tyPX45GzAf0rIw4gRXB+emmwz/CnzrwIx+95HPfL8OogcRf
6qIff+BJ3Ko97S54ogMfdJ7uR2bqwQ+f3+65ArU+x4/zQQcQCg51wcFv+HMf
nNN/uq/oB3xh/6mjmfQEr8G6PFZfljX82QcHfazBw2fO8Q9c6pLH/aFT9xO4
6EUH+fiJj+SBxzl16B/iqUcc/t/XX+TpOvQD94pv8OQcPPLpd/RxH8TBg/eP
eugDhz5fdjLy1dg7w1q/L/DQ7w91F86cIaVYP/HOoJ88fKQP6E/9PrMPb/Rs
55zAMHbP+t3lHD7wIJ/+oz59R36v+5mkav2gf0f6f4l46qAPH/EHfHDAxxcd
zzk6wNPvgvaTvDux5cbd
              "], "StandardDeviation" -> CompressedData["
1:eJx1lUsoRVEUho8wNRF5pRTKwGMgGdAOmZgoj+7EiG5yJJEkYaRkZECETBQT
yUwekYSSKBMjOhQDA3Hrllde6Xx31387t267vff61/rXv9daJ6+9tymc4DjO
y9+/KLpUkf7lmbq3lO3qiGeO88drQ1HP9OQmz9T/eOYl8bwwad8zyR+pE23f
nnFnFspSXz3j/P9uDXhw7zuvQydP9t7J7Axf/vnJbtnrHpz1zOpk62Lfu12J
ux4amev/tH7Asdc47LFjn53mZlSeWR5dPl/yIC75kRfnageeOKxr80Oh/Qcb
l73a47+hebMj8hjPU89Xtk7vn68sPnGs6LD62uqOXvDTOFMXA/0FjVZ/dOWe
OOSPTpzDBxxx9H3AqQ7g8c86fVDV2BeOrzP8gidfcNipvtyTP/rgD7vRjMPO
ukubBzooTutR6xJ+4GuHc0qL76zO6FGyvXxwfhRfV8TBDv74daVOta7gC45z
jYd+7OEfVEfsNR736Kf9onqTp9aTvqfqHnsPmScaDz/w0vmCHXoE1Re4ID+8
Kzg3oP/Ba70TX+cX88+V+tW+yvLtdM6w1/kCD+0P/G7c7JY3bcS/b2zO+Pl3
yXtoXytPncfkQ70E9ZfWQSw/nwd4nRPwAl/jvxN22kfKD3vNT78fWu8aX+11
PsW+XzIXVE/sfgGlU84D
              "], "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 4914531264980071485]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 5764960275667318102]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[1 -> 1, 2 -> 2, 3 -> 3]}, "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 689074351820263694, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 5167563583747307827]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> 
             Association["Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3], 
             "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
             "Allowed"]]}, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "ProbabilityPostprocessor" -> Identity, "Name" -> 
      "class", "Marginal" -> 
      Association[
       1 -> 0.3333333333333333, 2 -> 0.3333333333333333, 3 -> 
        0.3333333333333333]], "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {3, 4}, 0., {
      1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0, 
    "TieBreaker" -> RandomChoice, "PerformanceGoal" -> Automatic, 
    "BatchProcessing" -> Automatic, "Model" -> Association["Trees" -> {
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{96, 125, 25, 116, 66, 136}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0002307692338945344, 
            0.00026086956495419145`, -0.0011052631307393312`, \
-0.0011538461549207568`, 0.0035000001080334187`, 
            0.0008918918902054429, -0.0023571429774165154`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 6}, {4, 
            5}, {-1, -5}, {-4, -6}, {-3, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 127, 164, 143, 130}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.0010243902215734124`, -0.00035294119152240455`, 
            0.0008571428479626775, 
            0.0031714285723865032`, -0.0023571429774165154`, 
            0.0012499999720603228`, -0.0004883721121586859}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 68, 182, 46, 52, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0006964285857975483, -0.0009230769355781376, 
            0.003000000026077032, -0.002250000135973096, 
            0.001500000013038516, -0.001169491559267044, \
-0.0006857143016532063}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {5, -3}, {4, 
            6}, {-2, -5}, {-1, -6}, {-4, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{96, 221, 25, 116, 234, 184}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.00023047573631629348`, 
            0.0002614925615489483, -0.0009405690943822265, \
-0.0011530218180269003`, 0.00348688755184412, 
            0.0008900261600501835, -0.002397415228188038}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 6}, {4, 
            5}, {-1, -5}, {-4, -6}, {-3, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 127, 164, 143, 130}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.0010224725119769573`, -0.00035252314410172403`, 
            0.0008549561607651412, 
            0.0031596659682691097`, -0.0023537850938737392`, 
            0.0012469918001443148`, -0.0004868942778557539}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 68, 182, 96, 52, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0006947554065845907, -0.0009229288552887738, 
            0.0029911152087152004`, -0.002247035037726164, 
            0.0014980897540226579`, -0.0011673778062686324`, \
-0.000684752594679594}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {5, -3}, {4, 
            6}, {-2, -5}, {-1, -6}, {-4, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{96, 173, 25, 116, 186, 110}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.00023011837038211524`, 
            0.0002620845625642687, -0.002395073650404811, \
-0.0011522684944793582`, 0.0034732301719486713`, 
            0.0008875215426087379, -0.0009368269820697606}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 6}, {4, 
            5}, {-1, -5}, {-4, -6}, {-3, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 127, 164, 229, 87}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0011551824864000082`, -0.00035207075416110456`,
             0.0008527475874871016, 
            0.0031486800871789455`, -0.0024955361150205135`, \
-0.0011059667449444532`, -0.0006065947818569839}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 44, 55, 182, 46, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0009458351996727288, -0.0009212956065312028, 
            0.0030740073416382074`, -0.0013511028373613954`, \
-0.0022440410684794188`, 0.0014940021792426705`, -0.0006836443208158016}], 
          "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {5, 
            6}, {-2, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{96, 221, 25, 116, 66, 184}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.00022988105774857104`, 
            0.0002627049689181149, -0.0009358886745758355, \
-0.0011510963086038828`, 0.0034594384487718344`, 
            0.0008853981853462756, -0.0023916393984109163`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 6}, {4, 
            5}, {-1, -5}, {-4, -6}, {-3, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 127, 164, 143, 130}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.0010208562016487122`, -0.0003517674922477454, 
            0.0008506138692609966, 
            0.003136442741379142, -0.0023484586272388697`, 
            0.0012453952804207802`, -0.00048232366680167615`}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 68, 182, 96, 52, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0006918395520187914, -0.0009209197014570236, 
            0.0029789956752210855`, -0.002240810776129365, 
            0.0014916048385202885`, -0.0011657788418233395`, \
-0.0006826642202213407}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {5, -3}, {4, 
            6}, {-2, -5}, {-1, -6}, {-4, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{96, 125, 25, 116, 234, 136}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0002295247104484588, 
            0.00026341030024923384`, -0.0010942037915810943`, \
-0.0011503894347697496`, 0.0034459747839719057`, 
            0.0008829787839204073, -0.002346697263419628}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 6}, {4, 
            5}, {-1, -5}, {-4, -6}, {-3, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 127, 164, 113, 87}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0011546453461050987`, -0.0003512016264721751, 
            0.0008484221179969609, 
            0.0031256030779331923`, -0.0024900310672819614`, \
-0.0011048578890040517`, -0.0006023618043400347}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 44, 55, 182, 46, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0009429497295059264, -0.0009193676523864269, 
            0.003060091519728303, -0.0013493127189576626`, \
-0.0022377613931894302`, 0.0014876693021506071`, -0.0006816618260927498}], 
          "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {5, 
            6}, {-2, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{96, 221, 25, 116, 186, 184}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0002291666023666039, 
            0.00026347197126597166`, -0.0009313065093010664, \
-0.0011492783669382334`, 0.0034324745647609234`, 
            0.0008807498961687088, -0.0023853578604757786`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 6}, {4, 
            5}, {-1, -5}, {-4, -6}, {-3, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 127, 164, 229, 130}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0011541966814547777`, -0.0003509953385218978, 
            0.0008465964929200709, 
            0.003113649319857359, -0.002343315863981843, \
-0.0011039404198527336`, -0.0004779144946951419}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 68, 182, 96, 52, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0006889115902595222, -0.0009187787654809654, 
            0.002967681037262082, -0.0022347134072333574`, 
            0.0014851450687274337`, -0.001164273708127439, \
-0.0006808465113863349}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {5, -3}, {4, 
            6}, {-2, -5}, {-1, -6}, {-4, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{96, 125, 25, 116, 66, 136}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0002286846429342404, 
            0.00026424703537486494`, -0.0010889569530263543`, \
-0.0011484784772619605`, 0.0034189941361546516`, 
            0.0008785484824329615, -0.002340788021683693}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 6}, {4, 
            5}, {-1, -5}, {-4, -6}, {-3, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 127, 164, 143, 87}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.001019153161905706, -0.0003505137574393302, 
            0.000844354392029345, 
            0.0031029516831040382`, -0.0024845844600349665`, 
            0.001243961974978447, -0.000598062586504966}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 44, 55, 182, 46, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.000939972058404237, -0.0009175025043077767, 
            0.003047028323635459, -0.0013474869774654508`, \
-0.0022317511029541492`, 0.0014813592424616218`, -0.0006796487723477185}], 
          "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {5, 
            6}, {-2, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{96, 221, 25, 116, 234, 184}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.00022857490694150329`, 
            0.0002642297185957432, -0.0009267988498322666, \
-0.0011477111838757992`, 0.003405791474506259, 
            0.00087671575602144, -0.0023792078718543053`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 6}, {4, 
            5}, {-1, -5}, {-4, -6}, {-3, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 127, 164, 229, 130}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.001152734737843275, -0.00035019355709664524`, 
            0.0008425433188676834, 
            0.0030911476351320744`, -0.0023382026702165604`, \
-0.001102154259569943, -0.0004735258989967406}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 68, 182, 96, 52, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0006859158165752888, -0.000916781835258007, 
            0.0029562744311988354`, -0.002228607190772891, 
            0.0014787315158173442`, -0.00116261828225106, \
-0.0006789862527512014}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {5, -3}, {4, 
            6}, {-2, -5}, {-1, -6}, {-4, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{96, 125, 25, 116, 66, 136}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.00022809406800661236`, 
            0.0002650172682479024, -0.0010837753070518374`, \
-0.00114657252561301, 0.003392498241737485, 
            0.0008740227785892785, -0.0023349416442215443`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 6}, {4, 
            5}, {-1, -5}, {-4, -6}, {-3, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 127, 164, 143, 130}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.0010174507042393088`, -0.0003497394791338593, 
            0.0008403825340792537, 
            0.003080588998273015, -0.0023350981064140797`, 
            0.0012423271546140313`, -0.0004721815639641136}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 44, 55, 182, 46, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0009371891501359642, -0.0009156367159448564, 
            0.003033857326954603, -0.001345752622000873, \
-0.0022256597876548767`, 0.0014753165887668729`, -0.0006778933457098901}], 
          "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {5, 
            6}, {-2, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{96, 173, 25, 116, 234, 110}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.00022790224466007203`, 
            0.00026523348060436547`, -0.002376289339736104, \
-0.0011457348009571433`, 0.003379478817805648, 
            0.000872171891387552, -0.0009169024997390807}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 6}, {4, 
            5}, {-1, -5}, {-4, -6}, {-3, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 127, 164, 113, 87}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0011528580216690898`, -0.0003494182601571083, 
            0.0008385852561332285, 
            0.0030689314007759094`, -0.0024769864976406097`, \
-0.0011014870833605528`, -0.0005913410568609834}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 68, 182, 96, 52, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0006829835474491119, -0.000914816337171942, 
            0.002944996813312173, -0.0022227519657462835`, 
            0.0014723943313583732`, -0.0011609331704676151`, \
-0.0006769391475245357}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {5, -3}, {4, 
            6}, {-2, -5}, {-1, -6}, {-4, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{96, 168, 173, 25, 116, 186}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.00022738358529750258`, -0.0025123637169599533`,
             0.001062383409589529, -0.001318449154496193, \
-0.0011448963778093457`, 0.003366464516147971, 0.0008696547010913491}], 
          "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 127, 164, 229, 130}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0011512202909216285`, -0.0003488744841888547, 
            0.0008364012464880943, 
            0.003058111062273383, -0.0023299590684473515`, \
-0.0011002798564732075`, -0.0004677922115661204}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 68, 182, 46, 52, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0006815862143412232, -0.0009137467131949961, 
            0.002936089178547263, -0.0022196155041456223`, 
            0.0014691839460283518`, -0.0011590853100642562`, \
-0.0006760080577805638}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {5, -3}, {4, 
            6}, {-2, -5}, {-1, -6}, {-4, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{96, 168, 173, 25, 116, 66}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0002269688411615789, -0.00250918953679502, 
            0.0010599408997222781`, -0.0013156614731997252`, \
-0.0011437006760388613`, 0.0033540569711476564`, 0.0008676425204612315}], 
          "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 127, 164, 143, 87}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.0010158211225643754`, -0.000348361034411937, 
            0.0008344866801053286, 
            0.003047276521101594, -0.0024713461752980947`, 
            0.001240348443388939, -0.000587207730859518}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 44, 55, 182, 96, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0009336438379250467, -0.0009128829115070403, 
            0.0030170660465955734`, -0.0013442853232845664`, \
-0.0022168492432683706`, 0.0014658449217677116`, -0.0006747565930709243}], 
          "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {5, 
            6}, {-2, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{96, 168, 173, 25, 116, 234}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.00022679603716824204`, -0.002505963435396552, 
            0.001057835528627038, -0.0013124315300956368`, \
-0.0011431510793045163`, 0.0033406917937099934`, 0.0008654287084937096}], 
          "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 127, 164, 113, 130}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0011504049180075526`, -0.00034769426565617323`,
             0.0008331242715939879, 
            0.0030364382546395063`, -0.0023249355144798756`, \
-0.0010995471384376287`, -0.00046394887613132596`}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 68, 182, 46, 52, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0006788637256249785, -0.0009118297602981329, 
            0.002924209227785468, -0.0022137989290058613`, 
            0.0014626975171267986`, -0.0011571424547582865`, \
-0.0006739938398823142}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {5, -3}, {4, 
            6}, {-2, -5}, {-1, -6}, {-4, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{96, 168, 173, 25, 116, 66}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.00022626057034358382`, -0.002502779010683298, 
            0.0010554586770012975`, -0.0013095997273921967`, \
-0.0011417461792007089`, 0.0033285506069660187`, 0.000862905231770128}], 
          "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 127, 164, 229, 87}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0011487172450870275`, -0.0003472088137641549, 
            0.000831286481115967, 
            0.0030257392209023237`, -0.0024659845512360334`, \
-0.0010986101115122437`, -0.0005836423370055854}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 44, 55, 182, 96, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0009309289162047207, -0.0009107650257647038, 
            0.0030035015661269426`, -0.0013422096380963922`, \
-0.0022110857535153627`, 0.0014592752559110522`, -0.0006727888830937445}], 
          "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {5, 
            6}, {-2, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{96, 221, 25, 116, 234, 184}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.00022596133931074291`, 
            0.00026963427080772817`, -0.0009083928307518363, \
-0.0011412284802645445`, 0.003315164241939783, 
            0.0008610897930338979, -0.002361622639000416}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 6}, {4, 
            5}, {-1, -5}, {-4, -6}, {-3, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 127, 164, 143, 130}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.001014208304695785, -0.0003465425397735089, 
            0.0008299342007376254, 
            0.0030150357633829117`, -0.0023199429269880056`, 
            0.001238534227013588, -0.00046012303209863603`}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 68, 182, 46, 52, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0006763223791494966, -0.0009098798618651927, 
            0.002912662224844098, -0.002208051970228553, 
            0.0014562444994226098`, -0.0011553586227819324`, \
-0.0006720356759615242}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {5, -3}, {4, 
            6}, {-2, -5}, {-1, -6}, {-4, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{96, 168, 173, 25, 116, 186}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0002256752923130989, -0.0024982767645269632`, 
            0.0010537339840084314`, -0.0013036377495154738`, \
-0.001140165375545621, 0.003303295699879527, 0.0008589497301727533}], 
          "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 127, 164, 113, 87}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0011477984953671694`, -0.0003462528984528035, 
            0.0008276680018752813, 
            0.0030045395251363516`, -0.002460692310705781, \
-0.0010975084733217955`, -0.0005798261845484376}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 44, 55, 182, 96, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0009283251711167395, -0.0009087027865462005, 
            0.0029902118258178234`, -0.0013404061319306493`, \
-0.0022051518317312002`, 0.0014529889449477196`, -0.0006709424778819084}], 
          "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {5, 
            6}, {-2, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{96, 168, 173, 24, 132}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.002774110995233059, -0.0024950329679995775`, 
            0.0010516410693526268`, -0.0013003896456211805`, \
-0.00037006131606176496`, 0.00041578980744816363`}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {
            5, -5}, {-1, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 127, 164, 143, 130}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.0010123405372723937`, -0.00034567000693641603`, 
            0.0008262629853561521, 
            0.0029939678497612476`, -0.0023149019107222557`, 
            0.0012360764667391777`, -0.0004559503577183932}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 68, 182, 46, 52, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0006735646747983992, -0.0009078739094547927, 
            0.0029013019520789385`, -0.002202241448685527, 
            0.0014500076649710536`, -0.001153716817498207, \
-0.0006699289660900831}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {5, -3}, {4, 
            6}, {-2, -5}, {-1, -6}, {-4, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{96, 168, 173, 25, 116, 66}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.00022365218319464475`, -0.0024919433053582907`,
             0.0010492862202227116`, -0.0012976343277841806`, \
-0.001140478067100048, 0.003285177517682314, 0.0008540884591639042}], 
          "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 127, 164, 229, 130}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0011482706759124994`, -0.0003452402597758919, 
            0.0008242780459113419, 
            0.002983600366860628, -0.002311775228008628, \
-0.0010968970600515604`, -0.0004551307065412402}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 44, 55, 182, 96, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0009260005317628384, -0.000907179550267756, 
            0.0029769851826131344`, -0.001338283414952457, \
-0.0021995557472109795`, 0.0014465112471953034`, -0.000668774067889899}], 
          "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {5, 
            6}, {-2, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{96, 168, 173, 24, 132}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0027590158861130476`, -0.0024887591134756804`, 
            0.0010471298592165112`, -0.001294433604925871, \
-0.0003713612095452845, 0.00041258183773607016`}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {
            5, -5}, {-1, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 127, 164, 229, 87}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0011459520319476724`, -0.0003445738402660936, 
            0.0008229477680288255, 
            0.002973157214000821, -0.0024538575671613216`, \
-0.001094877254217863, -0.000574156700167805}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 68, 182, 46, 52, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0006712158210575581, -0.0009064250625669956, 
            0.0028892208356410265`, -0.0021967676002532244`, 
            0.001443579327315092, -0.0011514174984768033`, \
-0.0006677350611425936}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {5, -3}, {4, 
            6}, {-2, -5}, {-1, -6}, {-4, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{96, 168, 173, 25, 116, 186}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.00022163927496876568`, -0.0024856587406247854`,
             0.0010447553358972073`, -0.0012917257845401764`, \
-0.001140667824074626, 0.003266953630372882, 0.0008496156660839915}], 
          "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 127, 164, 143, 130}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.0010104846442118287`, -0.00034414377296343446`, 
            0.0008209747029468417, 
            0.0029629163909703493`, -0.002307005226612091, 
            0.0012355063809081912`, -0.00045179284643381834`}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 44, 55, 182, 96, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0009241306106559932, -0.0009057211573235691, 
            0.0029638982377946377`, -0.0013363652396947145`, \
-0.0021938795689493418`, 0.0014400731306523085`, -0.0006668780115433037}], 
          "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {5, 
            6}, {-2, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{96, 168, 173, 24, 132}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.002744213445112109, -0.0024825199507176876`, 
            0.0010426678927615285`, -0.001288531580939889, \
-0.00037275333306752145`, 0.0004094696487300098}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {
            5, -5}, {-1, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 127, 164, 113, 87}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0011462006950750947`, -0.00034356125979684293`,
             0.0008195904665626585, 
            0.0029525996651500463`, -0.0024488281924277544`, \
-0.0010940993670374155`, -0.0005707790260203183}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 68, 182, 46, 52, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.000668831227812916, -0.0009048294741660357, 
            0.002877200488001108, -0.002191171981394291, 
            0.0014369735727086663`, -0.0011491592740640044`, \
-0.0006656291079707444}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {5, -3}, {4, 
            6}, {-2, -5}, {-1, -6}, {-4, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{96, 168, 173, 25, 116, 66}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.00021964717598166317`, -0.0024794095661491156`,
             0.0010403580963611603`, -0.0012857795227319002`, \
-0.001141033018939197, 0.00324920192360878, 0.000844938273075968}], 
          "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 127, 164, 229, 130}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0011448973091319203`, -0.0003431308432482183, 
            0.0008176293922588229, 
            0.0029424831736832857`, -0.0023022040259093046`, \
-0.0010925878304988146`, -0.00044833848369307816`}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 68, 182, 96, 52, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0006677595083601773, -0.0009042005985975266, 
            0.0028680353425443172`, -0.002188336569815874, 
            0.0014336889144033194`, -0.0011467848671600223`, \
-0.000664715887978673}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {5, -3}, {4, 
            6}, {-2, -5}, {-1, -6}, {-4, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{96, 125, 24, 132, 136}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.002728932537138462, 
            0.00027576350839808583`, -0.001041568466462195, \
-0.0003738194063771516, 0.00040644124965183437`, -0.002304443623870611}], 
          "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 5}, {
            4, -4}, {-1, -5}, {-3, -6}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 127, 41, 199, 160}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.0023640242870897055`, -0.00034237041836604476`, 
            0.0008160000434145331, 
            0.002932751551270485, -0.0012652897275984287`, 
            0.0014126626774668694`, -0.0002576446277089417}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {6, 
            5}, {-5, -6}, {-1, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 44, 55, 182, 46, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0009214096935465932, -0.000903241045307368, 
            0.0029473688919097185`, -0.0013347275089472532`, \
-0.0021855742670595646`, 0.0014304700307548046`, -0.0006636803736910224}], 
          "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {5, 
            6}, {-2, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{96, 168, 173, 25, 116, 234}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0002175968256779015, -0.0024750272277742624`, 
            0.0010385307250544429`, -0.0012798751704394817`, \
-0.001141610904596746, 0.0032322644256055355`, 0.0008405790431424975}], 
          "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 127, 164, 143, 87}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.0010068535339087248`, -0.000342210492817685, 
            0.0008141162688843906, 
            0.002922100480645895, -0.002441983437165618, 
            0.0012351884506642818`, -0.0005661048926413059}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 68, 182, 96, 52, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0006650176364928484, -0.0009024994214996696, 
            0.0028569919522851706`, -0.002182610798627138, 
            0.00142740982118994, -0.0011448379373177886`, \
-0.0006627101683989167}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {5, -3}, {4, 
            6}, {-2, -5}, {-1, -6}, {-4, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{96, 168, 173, 24, 132}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.002714249538257718, -0.0024718570057302713`, 
            0.0010364504996687174`, -0.0012769250897690654`, \
-0.00037481344770640135`, 0.00040299215470440686`}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {
            5, -5}, {-1, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 41, 199, 160, 127}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.002359093865379691, -0.00034156074980273843`, 
            0.0008124978048726916, -0.0012615607120096684`, 
            0.0014107006136327982`, -0.00025608413852751255`, 
            0.002912488067522645}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 6}, {5, 
            4}, {-4, -5}, {-1, -6}, {-3, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 44, 55, 182, 46, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0009185802191495895, -0.0009013516828417778, 
            0.002934630960226059, -0.0013326836051419377`, \
-0.0021797148510813713`, 0.0014242181787267327`, -0.0006618517800234258}], 
          "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {5, 
            6}, {-2, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{96, 168, 173, 25, 20, 66}],
           "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.00005595374750555493, -0.002468924503773451, 
            0.001034115208312869, -0.0012740119127556682`, \
-0.0011421560775488615`, 0.0030655106529593468`, 0.0008358030463568866}], 
          "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 164, 113, 127, 130}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0011478154920041561`, -0.0003412235528230667, 
            0.0008108798647299409, -0.0022939229384064674`, \
-0.0010895824525505304`, 0.0029021548107266426`, -0.00044247458572499454`}], 
          "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 5}, {4, 
            6}, {-1, -5}, {-3, -6}, {-4, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 68, 182, 96, 52, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.00066231784876436, -0.000900592131074518, 
            0.002845261013135314, -0.002176824724301696, 
            0.0014211040688678622`, -0.001142776687629521, \
-0.0006607811665162444}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {5, -3}, {4, 
            6}, {-2, -5}, {-1, -6}, {-4, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{96, 168, 173, 25, 20, 186}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.00005562466321862303, -0.002465728670358658, 
            0.0010320203145965934`, -0.0012710016453638673`, \
-0.001141328364610672, 0.003054490080103278, 0.0008334829472005367}], 
          "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 41, 199, 160, 127}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.0023545706644654274`, -0.0003405182505957782, 
            0.0008093488868325949, -0.0012570290127769113`, 
            0.0014085775474086404`, -0.0002553363156039268, 
            0.0028926522936671972`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 6}, {5, 
            4}, {-4, -5}, {-1, -6}, {-3, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 44, 55, 182, 46, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0009158008033409715, -0.0008995246607810259, 
            0.0029218564741313457`, -0.0013304643798619509`, \
-0.0021740980446338654`, 0.0014177170814946294`, -0.0006597127649001777}], 
          "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {5, 
            6}, {-2, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{96, 168, 173, 24, 132}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.002695140428841114, -0.002462814562022686, 
            0.0010296979453414679`, -0.0012681020889431238`, \
-0.0003776517405640334, 0.00039820477832108736`}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {
            5, -5}, {-1, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 41, 199, 160, 127}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.0023514083586633205`, -0.00034015404526144266`, 
            0.0008079262333922088, -0.001254190457984805, 
            0.001405329559929669, -0.0002552343939896673, 
            0.0028823665343225002`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 6}, {5, 
            4}, {-4, -5}, {-1, -6}, {-3, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 68, 182, 96, 52, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0006594613078050315, -0.00089858821593225, 
            0.002834935439750552, -0.002171152038499713, 
            0.0014148660702630877`, -0.0011412401217967272`, \
-0.000658569682855159}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {5, -3}, {4, 
            6}, {-2, -5}, {-1, -6}, {-4, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{96, 168, 173, 25, 116, 66}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.000211312435567379, -0.0024597132578492165`, 
            0.0010275623062625527`, -0.0012651331489905715`, \
-0.0011417947243899107`, 0.0031910224352031946`, 0.000828469346743077}], 
          "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 164, 229, 127, 87}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0011502859415486455`, -0.000339558842824772, 
            0.0008061567205004394, -0.002432237844914198, \
-0.0010876902379095554`, 0.0028730512131005526`, -0.0005584473256021738}], 
          "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 5}, {4, 
            6}, {-1, -5}, {-3, -6}, {-4, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 44, 55, 182, 46, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0009125991491600871, -0.0008973889052867889, 
            0.002908688737079501, -0.0013281608698889613`, \
-0.0021682812366634607`, 0.0014111001510173082`, -0.0006575016886927187}], 
          "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {5, 
            6}, {-2, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{96, 221, 24, 132, 184}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.002680850913748145, 
            0.0002811388694681227, -0.0008690179092809558, \
-0.0003788574249483645, 0.0003951602557208389, -0.002327158348634839}], 
          "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 5}, {
            4, -4}, {-1, -5}, {-3, -6}}], "NominalSplits" -> {}, "RootIndex" -> 
          1, "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 41, 199, 160, 127}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.002346836496144533, -0.000339057034580037, 
            0.0008047321462072432, -0.0012506939237937331`, 
            0.0014038024237379432`, -0.0002540098794270307, 
            0.002862890949472785}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 6}, {5, 
            4}, {-4, -5}, {-1, -6}, {-3, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 68, 182, 96, 52, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0006568692624568939, -0.0008967939647845924, 
            0.002823438961058855, -0.0021653526928275824`, 
            0.0014086420414969325`, -0.0011391930747777224`, \
-0.0006567573291249573}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {5, -3}, {4, 
            6}, {-2, -5}, {-1, -6}, {-4, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{96, 120, 173, 25, 20, 186}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{
            0.000051510804041754454`, -0.0024749694857746363`, 
            0.0011345628881826997`, -0.0013037979369983077`, \
-0.001142259337939322, 0.0030258027836680412`, 0.0008239946910180151}], 
          "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 41, 199, 160, 127}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.0023437042254954576`, -0.00033865199657157063`, 
            0.0008025426650419831, -0.0012484492035582662`, 
            0.0014007696881890297`, -0.0002534442755859345, 
            0.002853750716894865}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 6}, {5, 
            4}, {-4, -5}, {-1, -6}, {-3, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 68, 182, 46, 52, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0006552966660819948, -0.0008954930235631764, 
            0.002814616309478879, -0.0021623349748551846`, 
            0.0014049644814804196`, -0.0011369753628969193`, \
-0.0006557527231052518}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {5, -3}, {4, 
            6}, {-2, -5}, {-1, -6}, {-4, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{96, 168, 173, 25, 116, 66}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.00020810935529880226`, -0.002453574910759926, 
            0.0010245466837659478`, -0.0012563440250232816`, \
-0.0011413387255743146`, 0.003165803151205182, 0.0008219598094001412}], 
          "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 164, 113, 127, 87}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.001150815049186349, -0.00033783348044380546`, 
            0.0008008772856555879, -0.0024259567726403475`, \
-0.0010845903307199478`, 0.0028445678763091564`, -0.0005544195882976055}], 
          "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 5}, {4, 
            6}, {-1, -5}, {-3, -6}, {-4, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 44, 55, 182, 96, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0009087838116101921, -0.000894918863195926, 
            0.0028922653291374445`, -0.0013265355955809355`, \
-0.002159210154786706, 0.0014028593432158232`, -0.0006548854289576411}], 
          "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {5, 
            6}, {-2, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{96, 120, 173, 24, 132}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0026614635717123747`, -0.002470574341714382, 
            0.0011315714800730348`, -0.001297536538913846, \
-0.00038144789868965745`, 0.0003900691808667034}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {
            5, -5}, {-1, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 77, 129, 41, 199, 160}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.0023396024480462074`, -0.0003460457664914429, 
            0.0007043959922157228, 
            0.0029608954209834337`, -0.0012443544110283256`, 
            0.001399453030899167, -0.000253262318437919}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {6, 
            5}, {-5, -6}, {-1, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 68, 182, 46, 52, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0006523092743009329, -0.000893266755156219, 
            0.0028044346254318953`, -0.002156341914087534, 
            0.0013988615246489644`, -0.0011355095775797963`, \
-0.0006540866452269256}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {5, -3}, {4, 
            6}, {-2, -5}, {-1, -6}, {-4, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{96, 120, 173, 25, 20, 234}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.00004899203122477047, -0.0024680024944245815`, 
            
            0.0011284069623798132`, -0.00129428890068084, \
-0.0011417892528697848`, 0.003002480138093233, 0.0008174293907359242}], 
          "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 41, 199, 160, 127}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.002336501143872738, -0.00033751808223314583`, 
            0.0007968915160745382, -0.0012422719737514853`, 
            0.001396062085404992, -0.00025316348182968795`, 
            0.0028302038554102182`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 6}, {5, 
            4}, {-4, -5}, {-1, -6}, {-3, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 44, 55, 182, 96, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0009058989817276597, -0.0008931316551752388, 
            0.002879745326936245, -0.0013244696892797947`, \
-0.002153378212824464, 0.0013969759456813335`, -0.0006530121900141239}], 
          "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {5, 
            6}, {-2, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{96, 168, 173, 24, 132}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0026472797617316246`, -0.0024466565810143948`, 
            0.0010194145143032074`, -0.0012464122846722603`, \
-0.0003821974678430706, 0.0003867924096994102}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {
            5, -5}, {-1, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 77, 129, 164, 229, 130}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.001154197845607996, -0.0003454318211879581, 
            0.0007014289731159806, 
            0.0029452124144881964`, -0.002277309773489833, \
-0.0010835755383595824`, -0.000429959298344329}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 68, 182, 46, 52, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0006489124498330057, -0.0008911970653571188, 
            0.0027942222077399492`, -0.0021502752788364887`, 
            0.001392921432852745, -0.0011338484473526478`, \
-0.0006522465846501291}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {5, -3}, {4, 
            6}, {-2, -5}, {-1, -6}, {-4, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{96, 120, 173, 25, 116, 66}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.00020355697779450566`, -0.002463769167661667, 
            0.0011245725909247994`, -0.0012877087574452162`, \
-0.0011424559634178877`, 0.0031351286452263594`, 0.0008134731324389577}], 
          "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{125, 25, 39, 147, 1, 54, 166}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.00116502505261451, -0.0020117356907576323`, 
            0.003315084148198366, 0.0003518974408507347, 
            0.0009962070034816861, -0.0004260835994500667, \
-0.0012209349079057574`, -0.0024992956314235926`}], "Children" -> 
          RawArray["Integer16",{{5, 2}, {4, 3}, {-3, -4}, {-2, -5}, {6, 
            7}, {-1, -7}, {-6, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 44, 55, 182, 96, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0009032641537487507, -0.0008915725047700107, 
            0.0028676525689661503`, -0.0013225420843809843`, \
-0.002147781429812312, 0.0013911626301705837`, -0.0006508308579213917}], 
          "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {5, 
            6}, {-2, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{96, 120, 173, 24, 132}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.002633640542626381, -0.0024607961531728506`, 
            0.0011216321727260947`, -0.001284694648347795, \
-0.0003829407214652747, 0.00038399093318730593`}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {
            5, -5}, {-1, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 41, 199, 160, 127}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.0023313050623983145`, -0.00033724401146173477`, 
            0.000793237762991339, -0.0012368905590847135`, 
            0.001394342863932252, -0.00025315399398095906`, 
            0.002811277285218239}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 6}, {5, 
            4}, {-4, -5}, {-1, -6}, {-3, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 68, 182, 46, 52, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0006461371085606515, -0.0008898936794139445, 
            0.0027839583344757557`, -0.0021448596380650997`, 
            0.0013873132411390543`, -0.0011320350458845496`, \
-0.000649697904009372}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {5, -3}, {4, 
            6}, {-2, -5}, {-1, -6}, {-4, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{96, 168, 173, 25, 20, 186}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.00004483578595682047, -0.002440075855702162, 
            0.0010134318144991994`, -0.0012370493495836854`, \
-0.0011423223186284304`, 0.002974484348669648, 0.0008092569769360125}], 
          "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{125, 25, 39, 147, 1, 54, 166}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0011637624120339751`, -0.002007910283282399, 
            0.0033008940517902374`, 0.0003501244937069714, 
            0.0009924046462401748, -0.00042493888759054244`, \
-0.0012179355835542083`, -0.002496039494872093}], "Children" -> 
          RawArray["Integer16",{{5, 2}, {4, 3}, {-3, -4}, {-2, -5}, {6, 
            7}, {-1, -7}, {-6, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 68, 182, 96, 52, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0006445400067605078, -0.0008894638158380985, 
            0.002775477943941951, -0.0021418447140604258`, 
            0.001384977949783206, -0.0011297580786049366`, \
-0.000648907502181828}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {5, -3}, {4, 
            6}, {-2, -5}, {-1, -6}, {-4, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{96, 120, 173, 25, 20, 66}],
           "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.00004449617335922085, -0.0024566547945141792`, 
            0.0011178317945450544`, -0.0012786347651854157`, \
-0.0011412331368774176`, 0.0029644425958395004`, 0.0008079063845798373}], 
          "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{125, 25, 39, 147, 1, 54, 166}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0011616054689511657`, -0.0020048331934958696`, 
            0.003290186170488596, 0.0003487214562483132, 
            0.0009903524769470096, -0.00042402371764183044`, \
-0.00121601193677634, -0.0024933377280831337`}], "Children" -> 
          RawArray["Integer16",{{5, 2}, {4, 3}, {-3, -4}, {-2, -5}, {6, 
            7}, {-1, -7}, {-6, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 44, 55, 182, 46, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0008987262262962759, -0.000888173351995647, 
            0.00285237655043602, -0.0013207419542595744`, \
-0.0021391778718680143`, 0.0013813425321131945`, -0.0006473234388977289}], 
          "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {5, 
            6}, {-2, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{96, 168, 173, 24, 132}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.002615773119032383, -0.0024355780333280563`, 
            0.0010089889401569963`, -0.0012310779420658946`, \
-0.0003845103201456368, 0.000379709032131359}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {
            5, -5}, {-1, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 41, 199, 160, 127}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.002326437272131443, -0.0003368287580087781, 
            0.0007914684829302132, -0.0012312405742704868`, 
            0.0013920817291364074`, -0.00025426512002013624`, 
            0.0027927826158702374`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 6}, {5, 
            4}, {-4, -5}, {-1, -6}, {-3, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 68, 182, 96, 52, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0006413531373254955, -0.0008870104211382568, 
            0.0027663279324769974`, -0.002136248629540205, 
            0.0013782394817098975`, -0.001128551666624844, \
-0.0006462152814492583}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {5, -3}, {4, 
            6}, {-2, -5}, {-1, -6}, {-4, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{96, 120, 173, 25, 116, 234}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.00019699364202097058`, -0.0024523918982595205`,
             0.0011140410788357258`, -0.0012725747656077147`, \
-0.001141141983680427, 0.003096646862104535, 0.0008039079257287085}], 
          "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{125, 25, 39, 147, 1, 54, 166}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0011603315360844135`, -0.0020010704174637794`, 
            0.0032759257592260838`, 0.00034709172905422747`, 
            0.0009868359193205833, -0.0004229860205668956, \
-0.001212989678606391, -0.00249013165012002}], "Children" -> 
          RawArray["Integer16",{{5, 2}, {4, 3}, {-3, -4}, {-2, -5}, {6, 
            7}, {-1, -7}, {-6, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 44, 55, 182, 46, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0008954605436883867, -0.0008864583214744925, 
            0.0028403587639331818`, -0.0013185879215598106`, \
-0.002133455127477646, 0.0013755412073805928`, -0.000645158754196018}], 
          "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {5, 
            6}, {-2, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{96, 120, 173, 24, 132}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0026022421661764383`, -0.0024496284313499928`, 
            0.0011109241750091314`, -0.0012698094360530376`, \
-0.0003849508357234299, 0.00037658706423826516`}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {
            5, -5}, {-1, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 41, 199, 160, 127}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.0023224367760121822`, -0.00033638239256106317`, 
            0.0007898496114648879, -0.0012271144660189748`, 
            0.001389342243783176, -0.00025489102699793875`, 
            0.0027790330350399017`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 6}, {5, 
            4}, {-4, -5}, {-1, -6}, {-3, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 68, 182, 96, 52, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0006384009029716253, -0.0008849136647768319, 
            0.0027560607995837927`, -0.002130635315552354, 
            0.0013719889102503657`, -0.0011268476955592632`, \
-0.0006439310382120311}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {5, -3}, {4, 
            6}, {-2, -5}, {-1, -6}, {-4, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{96, 168, 173, 25, 20, 66}],
           "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0000400536555389408, -0.002428988926112652, 
            0.0010041143978014588`, -0.0012219089549034834`, \
-0.0011414482723921537`, 0.0029376232996582985`, 0.0008004475967027247}], 
          "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{125, 25, 39, 147, 1, 54, 166}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.001158950850367546, -0.0019972878508269787`, 
            0.0032621431164443493`, 0.0003452967503108084, 
            0.0009830881608650088, -0.0004216859524603933, \
-0.0012100539170205593`, -0.0024869174230843782`}], "Children" -> 
          RawArray["Integer16",{{5, 2}, {4, 3}, {-3, -4}, {-2, -5}, {6, 
            7}, {-1, -7}, {-6, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 44, 55, 182, 46, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0008921964908950031, -0.000884757493622601, 
            0.00282829231582582, -0.0013165056006982923`, \
-0.0021276541519910097`, 0.001370044657960534, -0.0006431459332816303}], 
          "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {5, 
            6}, {-2, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{96, 120, 173, 24, 132}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0025890136603266, -0.0024454020895063877`, 
            0.001107167568989098, -0.001263785525225103, \
-0.0003856390540022403, 0.0003737265942618251}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {
            5, -5}, {-1, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 41, 199, 160, 127}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.0023185673635452986`, -0.0003358774119988084, 
            0.0007883156067691743, -0.0012230378342792392`, 
            0.001386401243507862, -0.0002552698424551636, 
            0.002765399869531393}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 6}, {5, 
            4}, {-4, -5}, {-1, -6}, {-3, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 68, 182, 46, 52, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.000635473639704287, -0.0008830582373775542, 
            0.002746014855802059, -0.0021249516867101192`, 
            0.001365990610793233, -0.0011251814430579543`, \
-0.0006417759577743709}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {5, -3}, {4, 
            6}, {-2, -5}, {-1, -6}, {-4, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{96, 168, 173, 25, 116, 186}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.00019207425066269934`, -0.0024245295207947493`,
             0.0010000846814364195`, -0.001216221135109663, \
-0.0011411814484745264`, 0.003068782389163971, 0.0007968070567585528}], 
          "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{125, 25, 39, 147, 1, 54, 166}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0011578199919313192`, -0.001993546262383461, 
            0.0032479586079716682`, 0.0003435485705267638, 
            0.000979470438323915, -0.0004205873410683125, \
-0.001206959830597043, -0.002483750693500042}], "Children" -> 
          RawArray["Integer16",{{5, 2}, {4, 3}, {-3, -4}, {-2, -5}, {6, 
            7}, {-1, -7}, {-6, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 68, 182, 96, 52, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0006339048268273473, -0.0008829906000755727, 
            0.002737734466791153, -0.0021219837944954634`, 
            0.0013642687117680907`, -0.0011229226365685463`, \
-0.0006409927154891193}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {5, -3}, {4, 
            6}, {-2, -5}, {-1, -6}, {-4, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{96, 120, 173, 25, 20, 66}],
           "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.00003718396328622475, -0.0024413391947746277`, 
            0.0011034382041543722`, -0.00125781144015491, \
-0.00113996013533324, 0.0029156701639294624`, 0.0007953365566208959}], 
          "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{125, 25, 39, 147, 1, 54, 166}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0011558375554159284`, -0.001990505261346698, 
            0.0032375843729823828`, 0.00034216998028568923`, 
            0.0009772914927452803, -0.00041964935371652246`, \
-0.0012050826335325837`, -0.0024810736067593098`}], "Children" -> 
          RawArray["Integer16",{{5, 2}, {4, 3}, {-3, -4}, {-2, -5}, {6, 
            7}, {-1, -7}, {-6, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 44, 55, 182, 46, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0008877493091858923, -0.0008813795284368098, 
            0.0028135664761066437`, -0.0013146796263754368`, \
-0.002119389595463872, 0.0013602912658825517`, -0.0006394048687070608}], 
          "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {5, 
            6}, {-2, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{96, 120, 173, 24, 132}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.002571607707068324, -0.0024386097211390734`, 
            0.00110036158002913, -0.0012550755636766553`, \
-0.0003870202926918864, 0.0003693963517434895}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {
            5, -5}, {-1, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 41, 199, 160, 127}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.002313800621777773, -0.00033540179720148444`, 
            0.0007865300867706537, -0.0012174586299806833`, 
            0.0013843767810612917`, -0.00025651417672634125`, 
            0.0027474805247038603`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 6}, {5, 
            4}, {-4, -5}, {-1, -6}, {-3, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 68, 182, 96, 52, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0006307758158072829, -0.000880492094438523, 
            0.002728685038164258, -0.0021165076177567244`, 
            0.001357675646431744, -0.0011216978309676051`, \
-0.0006383095169439912}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {5, -3}, {4, 
            6}, {-2, -5}, {-1, -6}, {-4, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{96, 168, 173, 25, 20, 234}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{
            0.000035505712730810046`, -0.0024181928019970655`, 
            0.0009947146754711866, -0.0012071769451722503`, \
-0.0011399065842851996`, 0.0029020067304372787`, 0.0007915155147202313}], 
          "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{125, 25, 39, 147, 1, 54, 166}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0011544396402314305`, -0.0019867673981934786`, 
            0.003224055515602231, 0.0003404493909329176, 
            0.0009737640502862632, -0.00041852964204736054`, \
-0.0012020871508866549`, -0.002477909903973341}], "Children" -> 
          RawArray["Integer16",{{5, 2}, {4, 3}, {-3, -4}, {-2, -5}, {6, 
            7}, {-1, -7}, {-6, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 44, 55, 182, 46, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0008845103438943624, -0.0008797070477157831, 
            0.002801748691126704, -0.0013125799596309662`, \
-0.0021135590504854918`, 0.0013548051938414574`, -0.0006375296507030725}], 
          "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {5, 
            6}, {-2, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{96, 120, 173, 24, 132}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.002558520995080471, -0.002434440655633807, 
            0.001096657244488597, -0.0012491113739088178`, \
-0.00038756796857342124`, 0.0003664989199023694}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {
            5, -5}, {-1, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{120, 153, 41, 199, 160, 127}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.0023098525125533342`, -0.0003350023180246353, 
            0.0007850183756090701, -0.001213371753692627, 
            0.0013814532430842519`, -0.0002569673233665526, 
            0.002734137000516057}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 6}, {5, 
            4}, {-4, -5}, {-1, -6}, {-3, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 68, 182, 96, 52, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0006278877845034003, -0.0008784842793829739, 
            0.002718831179663539, -0.0021109541412442923`, 
            0.0013515634927898645`, -0.001120039843954146, \
-0.0006360666593536735}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {5, -3}, {4, 
            6}, {-2, -5}, {-1, -6}, {-4, -7}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{96, 168, 173, 25, 116, 66}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.00018572028784547, -0.002413660753518343, 
            0.0009909395594149828, -0.0012012951774522662`, \
-0.0011401281226426363`, 0.0030318384524434805`, 0.0007880260236561298}], 
          "Children" -> 
          RawArray["Integer16",{{4, 2}, {-2, 3}, {-3, -4}, {5, 
            6}, {-1, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{125, 25, 39, 147, 1, 54, 166}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0011530538322404027`, -0.0019830793607980013`, 
            0.0032104416750371456`, 0.00033881395938806236`, 
            0.0009703382384032011, -0.0004173370834905654, \
-0.0011991451028734446`, -0.002474775305017829}], "Children" -> 
          RawArray["Integer16",{{5, 2}, {4, 3}, {-3, -4}, {-2, -5}, {6, 
            7}, {-1, -7}, {-6, -8}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{140, 44, 55, 182, 46, 202}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0008812693995423615, -0.0008779684430919588, 
            0.0027902936562895775`, -0.001310471212491393, \
-0.0021080183796584606`, 0.0013490993296727538`, -0.000635288713965565}], 
          "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {5, 
            6}, {-2, -6}, {-5, -7}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]]}, 
      "ClassNumber" -> 3, "IterationsNumber" -> 50, "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["DensifyNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 6678828535908057081, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
              "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
             "Allowed"]]}, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Method" -> "GradientBoostedTrees", "Options" -> 
      Association[
       "BoostingMethod" -> 
        Association["Value" -> "Gradient", "Options" -> Association[]], 
        MaxTrainingRounds -> 
        Association["Value" -> 50, "Options" -> Association[]], 
        "LeavesNumber" -> 
        Association["Value" -> 110, "Options" -> Association[]], 
        "LearningRate" -> 
        Association["Value" -> 0.004, "Options" -> Association[]], 
        ValidationSet -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "MaxBinNumber" -> 
        Association["Value" -> 255, "Options" -> Association[]], 
        "ThreadNumber" -> 
        Association["Value" -> 10, "Options" -> Association[]], "MaxDepth" -> 
        Association["Value" -> 6, "Options" -> Association[]], "LeafSize" -> 
        Association["Value" -> 35, "Options" -> Association[]], 
        "FeatureFraction" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "BaggingFraction" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "BaggingFrequency" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "MinGainToSplit" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], "LossFunction" -> 
        Association["Value" -> Automatic, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[1.093095028208929, 0.011504618364447898`], "Accuracy" -> 
         PlusMinus[0.3906447924727718, 0.045165658886119314`], 
         "EvaluationTime" -> 0.00028171777777777774`, "TestSize" -> 120, 
         "TrainingSize" -> 240, "TrainingTime" -> 0.15223589999999998`, 
         "TrainingMemory" -> 1.8904*^6, "ModelMemory" -> 292677.3333333333, 
         "ExperimentCount" -> 2, "ModelUtility" -> 0.3943207030614783, 
         "MeanCrossEntropyHistory" -> {
           PlusMinus[1.0981751646253561`, 0.015080808656332927`], 
           PlusMinus[1.0884450907143628`, 0.014428145057495994`]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.38251366120218594`, 0.06256340621116041], 
           PlusMinus[0.3989071038251367, 0.06306605679624089]}, 
         "Configuration" -> {
          "GradientBoostedTrees", "BoostingMethod" -> "Gradient", 
           MaxTrainingRounds -> 50, "LeavesNumber" -> 110, "LearningRate" -> 
           0.004, ValidationSet -> Automatic, "MaxBinNumber" -> 255, 
           "ThreadNumber" -> 10, "MaxDepth" -> 6, "LeafSize" -> 35, 
           "FeatureFraction" -> 1, "BaggingFraction" -> 1, "BaggingFrequency" -> 
           0, "MinGainToSplit" -> 0, "L1Regularization" -> 0, 
           "L2Regularization" -> 0, "LossFunction" -> Automatic}, 
         "FinalTrainingSize" -> 300], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Vector[TypeSystem`AnyType, 17], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 271021193822198]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.1077669973940905`, 0.016451998675825627`], 
              "Accuracy" -> 
              PlusMinus[0.35848494722117935`, 0.03806094655545947], 
              "EvaluationTime" -> 8.161609195402298*^-6, "TestSize" -> 580, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.0531137, 
              "TrainingMemory" -> 439560., "ModelMemory" -> 11392., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.388765654424081, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.1179757321490442`, 0.014012411882236151`], 
                PlusMinus[1.0930873041054985`, 0.016802945755008205`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3275812237807889, 0.027238784196539537`], 
                PlusMinus[0.392665276754653, 0.028646425428384876`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.168798919838393, 0.03725460011348693], "Accuracy" -> 
              PlusMinus[0.3467360207830201, 0.042057786790603735`], 
              "EvaluationTime" -> 8.3216*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.038475, 
              "TrainingMemory" -> 550264, "ModelMemory" -> 11392, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.3672187161186562, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.168798919838393, 0.02634298037063973]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3467360207830201, 0.029739346241333904`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.1943087233962015`, 0.09909239543832443], "Accuracy" -> 
              PlusMinus[0.3989071038251367, 0.08918887284663578], 
              "EvaluationTime" -> 6.05*^-6, "TestSize" -> 60, "TrainingSize" -> 
              240, "TrainingTime" -> 0.0287073, "TrainingMemory" -> 1417104, 
              "ModelMemory" -> 11392, "ExperimentCount" -> 1, "ModelUtility" -> 
              0.3557625231739269, "MeanCrossEntropyHistory" -> {
                PlusMinus[1.1943087233962015`, 0.0700689047784581]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3989071038251367, 0.06306605679624089]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 6.05*^-6, "MeanCrossEntropy" -> 
             PlusMinus[1.1943087233962015`, 0.09909239543832443], 
             "ModelMemory" -> 11392, "TrainingMemory" -> 1417104, 
             "TrainingTime" -> 0.088997825], "Index" -> 1], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.1427736102053208`, 0.012203668114885774`], 
              "Accuracy" -> 
              PlusMinus[0.3274301697086723, 0.019435998564166616`], 
              "EvaluationTime" -> 0.000019635862068965516`, "TestSize" -> 580,
               "TrainingSize" -> 10, "TrainingTime" -> 0.02191243333333333, 
              "TrainingMemory" -> 500277.3333333333, "ModelMemory" -> 5488., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.37717046393039844`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.1426647575958437`, 0.017376606441261464`], 
                PlusMinus[1.1428795389331692`, 0.01714164201138543]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.32736869601829, 0.027469177968609912`], 
                PlusMinus[0.3274917988389335, 0.02750388476728917]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0988561885580324`, 0.008069154956557478], 
              "Accuracy" -> 
              PlusMinus[0.33194002446602267`, 0.04198132154292408], 
              "EvaluationTime" -> 7.5456*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.0044849, 
              "TrainingMemory" -> 253960, "ModelMemory" -> 5488, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.39250595010360345`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0988561885580324`, 0.005705754188226833]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.33194002446602267`, 0.02968527714617451]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0986122886681104`, 0.00953874396339632], "Accuracy" -> 
              PlusMinus[0.33333333333333337`, 0.042847804881370494`], 
              "EvaluationTime" -> 7.229444444444445*^-6, "TestSize" -> 120, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.004119933333333333, 
              "TrainingMemory" -> 986530.6666666666, "ModelMemory" -> 5488., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.3924881110905682, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0986122886681104`, 0.013489821081039565`], 
                PlusMinus[1.0986122886681104`, 0.013489821081039565`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3333333333333334, 0.06059594678115025], 
                PlusMinus[0.3333333333333334, 0.06059594678115025]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 7.229444444444445*^-6, "MeanCrossEntropy" -> 
             PlusMinus[1.0986122886681104`, 0.00953874396339632], 
             "ModelMemory" -> 5488., "TrainingMemory" -> 986530.6666666666, 
             "TrainingTime" -> 0.02706235], "Index" -> 2], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0997486998251615`, 0.0046902205659944424`], 
              "Accuracy" -> 
              PlusMinus[0.31126798073332257`, 0.026463805892624374`], 
              "EvaluationTime" -> 0.00007900383333333334, "TestSize" -> 400, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.0233282, 
              "TrainingMemory" -> 199586.66666666666`, "ModelMemory" -> 
              86344., "ExperimentCount" -> 2, "ModelUtility" -> 
              0.39242771446649277`, "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0997268909812281`, 0.007909431904458898], 
                PlusMinus[1.0997605275853393`, 0.005824789351731343]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.29851612694171026`, 0.031779032396515194`], 
                PlusMinus[0.3250425030146657, 0.03302876084470831]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0988222244450854`, 0.01157214259914544], "Accuracy" -> 
              PlusMinus[0.31023102310231004`, 0.06522426282999794], 
              "EvaluationTime" -> 0.000073441, "TestSize" -> 100, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.011376, 
              "TrainingMemory" -> 302840, "ModelMemory" -> 88168, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.3922673553526414, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0988222244450854`, 0.00818274050471346]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.31023102310231004`, 0.046120518544985216`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0954740308276185`, 0.011424637776422879`], 
              "Accuracy" -> 
              PlusMinus[0.3578364272222827, 0.044360901021681325`], 
              "EvaluationTime" -> 0.00006629444444444444, "TestSize" -> 120, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.0094875, 
              "TrainingMemory" -> 946221.3333333333, "ModelMemory" -> 104008.,
               "ExperimentCount" -> 2, "ModelUtility" -> 0.39347414421220256`,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0980414715932256`, 0.016247072175362896`], 
                PlusMinus[1.093178296365583, 0.015363342773675232`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3661202185792351, 0.06198564965748828], 
                PlusMinus[0.34972677595628426`, 0.0613306645975838]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00006629444444444444, "MeanCrossEntropy" -> 
             PlusMinus[1.0954740308276185`, 0.011424637776422879`], 
             "ModelMemory" -> 104008., "TrainingMemory" -> 946221.3333333333, 
             "TrainingTime" -> 0.035187575], "Index" -> 3], 
         Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[37.45789011360347, 5.3519948362755585`], "Accuracy" -> 
              PlusMinus[0.33993399339933983`, 0.06682658987233209], 
              "EvaluationTime" -> 0.000082981, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.0278638, 
              "TrainingMemory" -> 297608, "ModelMemory" -> 157552, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.011210959445418583`,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[37.45789011360347, 3.7844318416058336`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.33993399339933983`, 0.047253534862298274`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[5.925096450827215, 0.8470677672254949], "Accuracy" -> 
              PlusMinus[0.33993399339933983`, 0.06682658987233209], 
              "EvaluationTime" -> 0.000029349, "TestSize" -> 100, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.0161489, 
              "TrainingMemory" -> 649328, "ModelMemory" -> 138864, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.07087351471706317, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[5.925096450827215, 0.5989673623296954]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.33993399339933983`, 0.047253534862298274`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[3.0350422276194267`, 0.6982765694168922], "Accuracy" -> 
              PlusMinus[0.43169398907103845`, 0.09030159506233995], 
              "EvaluationTime" -> 0.00018012333333333334`, "TestSize" -> 60, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.0663694, 
              "TrainingMemory" -> 2534080, "ModelMemory" -> 152176, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.1360567759172954, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[3.0350422276194267`, 0.4937560973783634]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.43169398907103845`, 0.06385287022054223]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00018012333333333334`, "MeanCrossEntropy" -> 
             PlusMinus[3.0350422276194267`, 0.6982765694168922], 
             "ModelMemory" -> 152176, "TrainingMemory" -> 2534080, 
             "TrainingTime" -> 0.11082555], "Index" -> 4], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.526831017866005, 0.050046385216732645`], "Accuracy" -> 
              PlusMinus[0.38480046116385014`, 0.021139914973218276`], 
              "EvaluationTime" -> 0.000010135402298850574`, "TestSize" -> 580,
               "TrainingSize" -> 10, "TrainingTime" -> 0.0048432, 
              "TrainingMemory" -> 131560., "ModelMemory" -> 27808., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.2810576676757827, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.5519519605301815`, 0.06219265172229229], 
                PlusMinus[1.5026518999079228`, 0.06101566306469822]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.37837530254406254`, 0.028400911988846273`], 
                PlusMinus[0.3912868632883974, 0.028535947268225934`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.2082880899217348`, 0.08430520313450392], "Accuracy" -> 
              PlusMinus[0.33993399339933983`, 0.06682658987233209], 
              "EvaluationTime" -> 0.000010284, "TestSize" -> 100, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.0056696, 
              "TrainingMemory" -> 378424, "ModelMemory" -> 102320, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.3525610077531743, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.2082880899217348`, 0.059612780825717096`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.33993399339933983`, 0.047253534862298274`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.1108989634755737`, 0.03064840027960536], "Accuracy" -> 
              PlusMinus[0.37424089583688996`, 0.04478972518985341], 
              "EvaluationTime" -> 0.000016362777777777777`, "TestSize" -> 120,
               "TrainingSize" -> 240, "TrainingTime" -> 0.007616233333333333, 
              "TrainingMemory" -> 2.8066746666666665`*^6, "ModelMemory" -> 
              468792., "ExperimentCount" -> 2, "ModelUtility" -> 
              0.3866822977701229, "MeanCrossEntropyHistory" -> {
                PlusMinus[1.1223548065700677`, 0.042857995465133025`], 
                PlusMinus[1.101452808643075, 0.03891758262638218]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3661202185792351, 0.06198564965748828], 
                PlusMinus[0.38251366120218594`, 0.06256340621116041]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000016362777777777777`, "MeanCrossEntropy" -> 
             PlusMinus[1.1108989634755737`, 0.03064840027960536], 
             "ModelMemory" -> 468792., "TrainingMemory" -> 
             2.8066746666666665`*^6, "TrainingTime" -> 0.014363491666666665`],
            "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[3.448128085069422, 0.20185149890187243`], "Accuracy" -> 
              PlusMinus[0.3661556198441492, 0.025111128969700885`], 
              "EvaluationTime" -> 6.736666666666667*^-6, "TestSize" -> 580, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.035686899999999994`, 
              "TrainingMemory" -> 396477.3333333333, "ModelMemory" -> 11392., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.12381859157196089`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[3.362471319627448, 0.2508524594204961], 
                PlusMinus[3.5411581522248587`, 0.2614262511947135]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3512166228834264, 0.027630498122380404`], 
                PlusMinus[0.38202609110069685`, 0.028478880051409187`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[4.645575837777308, 0.44052499591083916`], "Accuracy" -> 
              PlusMinus[0.30638277342411235`, 0.0410341875370185], 
              "EvaluationTime" -> 3.5508*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.0238069, 
              "TrainingMemory" -> 550352, "ModelMemory" -> 11392, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.0912484328721054, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[4.645575837777308, 0.31149821189073046`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.30638277342411235`, 0.029015552267906294`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[11.490800833625217`, 2.468431974786652], "Accuracy" -> 
              PlusMinus[0.38251366120218594`, 0.0884780175720802], 
              "EvaluationTime" -> 0.000011426666666666667`, "TestSize" -> 60, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.0287109, 
              "TrainingMemory" -> 1417168, "ModelMemory" -> 11392, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.03604167174188281, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[11.490800833625217`, 1.7454449882693426`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.38251366120218594`, 0.06256340621116041]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000011426666666666667`, "MeanCrossEntropy" -> 
             PlusMinus[11.490800833625217`, 2.468431974786652], "ModelMemory" -> 
             11392, "TrainingMemory" -> 1417168, "TrainingTime" -> 
             0.071575525], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0985849823718001`, 0.002703701435588597], 
              "Accuracy" -> 
              PlusMinus[0.36424702043083224`, 0.03137615040388622], 
              "EvaluationTime" -> 4.771149425287356*^-6, "TestSize" -> 580, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.02995396666666667, 
              "TrainingMemory" -> 384037.3333333333, "ModelMemory" -> 11392., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.39298594206059717`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.098616135584777, 0.0038235029881367824`], 
                PlusMinus[1.0985538339017937`, 0.003823211919402829]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3407245532136529, 0.027762032346484226`], 
                PlusMinus[0.38920808097712223`, 0.028598373694923806`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.098599672879254, 0.006427800829420762], "Accuracy" -> 
              PlusMinus[0.33167896084598625`, 0.042006334339624446`], 
              "EvaluationTime" -> 4.2667999999999995`*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.0091126, 
              "TrainingMemory" -> 374632, "ModelMemory" -> 11392, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.39271457130497933`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.098599672879254, 0.004545141554599935]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.33167896084598625`, 0.02970296386433778]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0981852017209313`, 0.009537543412075104], 
              "Accuracy" -> 
              PlusMinus[0.4144848727175799, 0.05550457927467559], 
              "EvaluationTime" -> 8.741666666666666*^-6, "TestSize" -> 120, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.014193433333333333`, 
              "TrainingMemory" -> 1.4173706666666665`*^6, "ModelMemory" -> 
              11392., "ExperimentCount" -> 2, "ModelUtility" -> 
              0.39264050362514497`, "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0983910780430937`, 0.013489520386684108`], 
                PlusMinus[1.097979602059645, 0.013480453590836721`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.44808743169398935`, 0.06413971334432449], 
                PlusMinus[0.38251366120218594`, 0.06256340621116041]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 8.741666666666666*^-6, "MeanCrossEntropy" -> 
             PlusMinus[1.0981852017209313`, 0.009537543412075104], 
             "ModelMemory" -> 11392., "TrainingMemory" -> 
             1.4173706666666665`*^6, "TrainingTime" -> 0.04769575833333334], 
           "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.3584457793614821`, 0.0629666894167899], "Accuracy" -> 
              PlusMinus[0.3531015389173752, 0.04735649702073758], 
              "EvaluationTime" -> 7.777931034482759*^-6, "TestSize" -> 580, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.034842566666666665`, 
              "TrainingMemory" -> 396402.6666666666, "ModelMemory" -> 11392., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.3150464132135053, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.405690629584787, 0.056980508936133864`], 
                PlusMinus[1.30950696973474, 0.05799302815871535]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3128550960552269, 0.02685304546807446], 
                PlusMinus[0.3990681578971698, 0.028697963360505875`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.1795989125004187`, 0.17667336844715933`], 
              "Accuracy" -> 
              PlusMinus[0.3318693929577369, 0.042020366135139535`], 
              "EvaluationTime" -> 4.146000000000001*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.0251753, 
              "TrainingMemory" -> 550288, "ModelMemory" -> 11392, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.1950130516442283, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.1795989125004187`, 0.12492693688405578`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3318693929577369, 0.029712885842098722`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.94556560974792, 0.5668977989392473], "Accuracy" -> 
              PlusMinus[0.38251366120218594`, 0.0884780175720802], 
              "EvaluationTime" -> 6.895*^-6, "TestSize" -> 60, "TrainingSize" -> 
              240, "TrainingTime" -> 0.0277927, "TrainingMemory" -> 1417200, 
              "ModelMemory" -> 11392, "ExperimentCount" -> 1, "ModelUtility" -> 
              0.1412058512674562, "MeanCrossEntropyHistory" -> {
                PlusMinus[2.94556560974792, 0.40085727786966974`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.38251366120218594`, 0.06256340621116041]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 6.895*^-6, "MeanCrossEntropy" -> 
             PlusMinus[2.94556560974792, 0.5668977989392473], "ModelMemory" -> 
             11392, "TrainingMemory" -> 1417200, "TrainingTime" -> 
             0.06958344166666666], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[3.722430881638785, 0.35330923362555544`], "Accuracy" -> 
              PlusMinus[0.3239537808056462, 0.03855600536873085], 
              "EvaluationTime" -> 8.077931034482758*^-6, "TestSize" -> 290, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.03551, 
              "TrainingMemory" -> 396896, "ModelMemory" -> 11392, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.11387566481142355`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[3.722430881638785, 0.2498273549524524]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3239537808056462, 0.027263212851694515`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[6.581645004832317, 0.6395807701321368], "Accuracy" -> 
              PlusMinus[0.30638277342411235`, 0.0410341875370185], 
              "EvaluationTime" -> 3.9512*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.0244284, 
              "TrainingMemory" -> 550496, "ModelMemory" -> 11392, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.06437693132076464, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[6.581645004832317, 0.45225189967694834`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.30638277342411235`, 0.029015552267906294`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[20.981602583474324`, 4.531897534481754], "Accuracy" -> 
              PlusMinus[0.3989071038251367, 0.08918887284663578], 
              "EvaluationTime" -> 6.216666666666667*^-6, "TestSize" -> 60, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.0311265, 
              "TrainingMemory" -> 1417280, "ModelMemory" -> 11392, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.019734160744210315`,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[20.981602583474324`, 3.2045354782746434`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3989071038251367, 0.06306605679624089]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 6.216666666666667*^-6, "MeanCrossEntropy" -> 
             PlusMinus[20.981602583474324`, 4.531897534481754], "ModelMemory" -> 
             11392, "TrainingMemory" -> 1417280, "TrainingTime" -> 
             0.074418125], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.098609546085543, 0.0027035384844978512`], 
              "Accuracy" -> 
              PlusMinus[0.36424702043083224`, 0.03137615040388622], 
              "EvaluationTime" -> 5.775172413793104*^-6, "TestSize" -> 580, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.010594399999999999`, 
              "TrainingMemory" -> 195506.66666666666`, "ModelMemory" -> 
              11392., "ExperimentCount" -> 2, "ModelUtility" -> 
              0.39297717090275636`, "MeanCrossEntropyHistory" -> {
                PlusMinus[1.098612667259895, 0.0038233970167317628`], 
                PlusMinus[1.0986064249724918`, 0.0038233594701202064`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3407245532136529, 0.027762032346484226`], 
                PlusMinus[0.38920808097712223`, 0.028598373694923806`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0986109979018837`, 0.00642745533737571], "Accuracy" -> 
              PlusMinus[0.33167896084598625`, 0.042006334339624446`], 
              "EvaluationTime" -> 4.8272*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.0100599, 
              "TrainingMemory" -> 349488, "ModelMemory" -> 11392, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.39271055219267287`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0986109979018837`, 0.004544897254832033]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.33167896084598625`, 0.02970296386433778]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0985689333968127`, 0.009538127761179346], 
              "Accuracy" -> 
              PlusMinus[0.4144848727175799, 0.05550457927467559], 
              "EvaluationTime" -> 5.993333333333333*^-6, "TestSize" -> 120, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.009206066666666665, 
              "TrainingMemory" -> 1.4172853333333333`*^6, "ModelMemory" -> 
              11392., "ExperimentCount" -> 2, "ModelUtility" -> 
              0.3925035508677626, "MeanCrossEntropyHistory" -> {
                PlusMinus[1.098589657160654, 0.013489371722221472`], 
                PlusMinus[1.0985482124221564`, 0.013488463933149132`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.44808743169398935`, 0.06413971334432449], 
                PlusMinus[0.38251366120218594`, 0.06256340621116041]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 5.993333333333333*^-6, "MeanCrossEntropy" -> 
             PlusMinus[1.0985689333968127`, 0.009538127761179346], 
             "ModelMemory" -> 11392., "TrainingMemory" -> 
             1.4172853333333333`*^6, "TrainingTime" -> 0.022101983333333332`],
            "Index" -> 10], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 110], "LearningRate" -> 
             Association["Value" -> 0.004], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 10], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 35], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0986122886681107`, 0.007688781904213582], 
              "Accuracy" -> 
              PlusMinus[0.33194002446602267`, 0.04198132154292408], 
              "EvaluationTime" -> 0.0000140524, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.0374921, 
              "TrainingMemory" -> 347040, "ModelMemory" -> 20248, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.39261993776858745`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0986122886681107`, 0.005436789823533839]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.33194002446602267`, 0.02968527714617451]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.093095028208929, 0.011504618364447898`], "Accuracy" -> 
              PlusMinus[0.3906447924727718, 0.045165658886119314`], 
              "EvaluationTime" -> 0.00028171777777777774`, "TestSize" -> 120, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.15223589999999998`, 
              "TrainingMemory" -> 1.8904*^6, "ModelMemory" -> 
              292677.3333333333, "ExperimentCount" -> 2, "ModelUtility" -> 
              0.3943207030614783, "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0981751646253561`, 0.015080808656332927`], 
                PlusMinus[1.0884450907143628`, 0.014428145057495994`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.38251366120218594`, 0.06256340621116041], 
                PlusMinus[0.3989071038251367, 0.06306605679624089]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00028171777777777774`, "MeanCrossEntropy" -> 
             PlusMinus[1.093095028208929, 0.011504618364447898`], 
             "ModelMemory" -> 292677.3333333333, "TrainingMemory" -> 
             1.8904*^6, "TrainingTime" -> 0.22778697499999997`], "Index" -> 
           11], Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[3.766758353922298, 0.349018502630373], "Accuracy" -> 
              PlusMinus[0.3099914784743793, 0.041149372171313536`], 
              "EvaluationTime" -> 7.9072*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.0411196, 
              "TrainingMemory" -> 550520, "ModelMemory" -> 11392, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.11258542155123984`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[3.766758353922298, 0.2467933499695116]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3099914784743793, 0.029097000103904806`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[7.5897204920521455`, 1.6403272883252076`], "Accuracy" -> 
              PlusMinus[0.3989071038251367, 0.08918887284663578], 
              "EvaluationTime" -> 5.938333333333333*^-6, "TestSize" -> 60, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.027716, 
              "TrainingMemory" -> 1417344, "ModelMemory" -> 11392, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.05455325008797735, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[7.5897204920521455`, 1.1598865489400954`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3989071038251367, 0.06306605679624089]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 5.938333333333333*^-6, "MeanCrossEntropy" -> 
             PlusMinus[7.5897204920521455`, 1.6403272883252076`], 
             "ModelMemory" -> 11392, "TrainingMemory" -> 1417344, 
             "TrainingTime" -> 0.0757646], "Index" -> 12]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 12], 
        Association["ID" -> 271016898854902]], "MaxTrainingSize" -> 300, 
      "LastReportingTime" -> 3.7650332049935961`17.328343799891073*^9, 
      "PreprocessorEvaluationTime" -> 6.88310546875`2.*^-6, 
      "PreprocessorMemory" -> 244152, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.6400000000000001, 
          "ElapsedTimes" -> 0.657265, "ExperimentCounts" -> 18], 
         Association[
         "TrainingSizes" -> 50, "TimeBudgets" -> 0.8, "ElapsedTimes" -> 
          0.975145, "ExperimentCounts" -> 12], 
         Association[
         "TrainingSizes" -> 240, "TimeBudgets" -> 1., "ElapsedTimes" -> 
          0.9959657000000001, "ExperimentCounts" -> 18]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[271025488789494]], "ID" -> 
         271029783756790]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "BooleanVector", "Weight" -> 1, 
           "Values" -> {{0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0,
             0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0,
             1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1,
             0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0,
             0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0,
             0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1,
             1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0,
             1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0,
             0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1,
             0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1,
             0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0,
             1, 1}}, "ID" -> 6900269369450652421]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 5.3603943, "MaxTrainingMemory" -> 62617240, 
      "DataMemory" -> 633768, "FunctionMemory" -> 732744, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2019, 4, 23, 18, 33, 25.8366537`9.164811185181238}, 
        "Instant", "Gregorian", -5.], "ProcessorCount" -> 10, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7633070497857494`*^9, 3.763398187442557*^9, 
  3.7633984168145056`*^9, 3.7634025603688364`*^9, 3.763407516556138*^9, 
  3.7634083110163794`*^9, 3.765051205956586*^9},
 CellLabel->"Out[61]=",ExpressionUUID->"e3f8a755-3eba-479c-b1e4-06d62b660e0a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{"mClass", ",", " ", "TestSample", ",", " ", "\"\<Accuracy\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7633070573112063`*^9, 3.763307067527372*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"e2ae1d13-94be-4458-a297-d55eea8f4162"],

Cell[BoxData["0.35`"], "Output",
 CellChangeTimes->{3.7633070684538403`*^9, 3.763398192467866*^9, 
  3.763398417279512*^9, 3.7634025608725476`*^9, 3.763407516883732*^9, 
  3.7634083116070414`*^9, 3.765051206584239*^9},
 CellLabel->"Out[62]=",ExpressionUUID->"1927d5de-59f9-431b-bef0-0e79a70f3fe6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{
  "mClass", ",", " ", "TrainingSample", ",", " ", "\"\<Accuracy\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7650556766758523`*^9, 3.7650556833005495`*^9}},
 CellLabel->
  "In[115]:=",ExpressionUUID->"d5e9d1af-ab10-40af-b4cc-f86e2fcced77"],

Cell[BoxData["0.6433333333333333`"], "Output",
 CellChangeTimes->{3.765055684096094*^9},
 CellLabel->
  "Out[115]=",ExpressionUUID->"a700e9b4-6097-41a3-8fef-6627e04143f0"]
}, Open  ]],

Cell["\<\
Using GradientBoostedTrees performed worse, nearly as bad as random \
classification.\
\>", "Text",
 CellChangeTimes->{{3.7633070730381346`*^9, 3.7633071414460106`*^9}, {
  3.7634086290930953`*^9, 
  3.763408638660138*^9}},ExpressionUUID->"96304e1e-26d6-4d97-bd15-\
2e98c4cd5efe"],

Cell[CellGroupData[{

Cell["An Attempt of Using a Prior Information of the Problem.", "Subsection",
 CellChangeTimes->{{3.763394058960368*^9, 
  3.7633940958404408`*^9}},ExpressionUUID->"6e18a99d-3a4b-4e7d-9823-\
08edbf9c0953"],

Cell["\<\
By construction, we know that the starting strings are of size 24, so how can \
we use that information to define a better topology for the Neural Network? \
The one solution that comes to mind is to use convolutional layers of size \
{24,10} with\
\>", "Text",
 CellChangeTimes->{{3.7633941049676247`*^9, 3.763394151711722*^9}, {
  3.763394192631695*^9, 3.763394248943242*^9}, {3.7633942789927235`*^9, 
  3.763394378103483*^9}, {3.763394524280367*^9, 
  3.7633945539761815`*^9}},ExpressionUUID->"191026d6-9e60-41bf-8272-\
b8db2e059726"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"TrainingSample2", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "}"}], "\[Rule]", 
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ")"}], "&"}], "/@", 
    "TrainingSample"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ValidationSample2", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "}"}], "\[Rule]", 
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ")"}], "&"}], "/@", 
    "ValidationSample"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TestSample2", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "}"}], "\[Rule]", 
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ")"}], "&"}], "/@", 
    "TestSample"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.7633944031227612`*^9, 3.763394403697433*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"6f2bfc9c-14c5-48a4-94c8-54299f04af07"],

Cell[BoxData[
 RowBox[{
  RowBox[{"nn3", " ", "=", "  ", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"{", " ", 
      RowBox[{
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{"10", ",", 
         RowBox[{"{", "24", "}"}]}], "]"}], ",", "Ramp", ",", " ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"DropoutLayer", "[", "]"}], ","}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"PoolingLayer", "[", 
        RowBox[{
         RowBox[{"{", "24", "}"}], ",", " ", 
         RowBox[{"\"\<Function\>\"", "\[Rule]", "Mean"}]}], "]"}], ",", 
       RowBox[{"FlattenLayer", "[", "]"}], ",", " ", "\[IndentingNewLine]", 
       RowBox[{"LinearLayer", "[", 
        RowBox[{"Length", "@", "classes"}], "]"}], ",", 
       RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Output\>\"", "\[Rule]", 
      RowBox[{"NetDecoder", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<Class\>\"", ",", "classes"}], "}"}], "]"}]}], ",", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", " ", 
      RowBox[{"{", 
       RowBox[{"1", ",", 
        RowBox[{"n", "*", "10"}]}], "}"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.763394475160785*^9, 3.763394521729545*^9}, {
   3.76339456417828*^9, 3.763394618075458*^9}, {3.7633946594692864`*^9, 
   3.7633947085462637`*^9}, {3.763394754267432*^9, 3.76339475659287*^9}, {
   3.763394863052346*^9, 3.7633948841543436`*^9}, 3.7633949242207327`*^9, {
   3.76339507725922*^9, 3.763395109031317*^9}, {3.763395151562838*^9, 
   3.7633951587524767`*^9}, 3.763395266842127*^9, {3.763395319472434*^9, 
   3.763395333208802*^9}, {3.763395384065575*^9, 3.763395384416375*^9}, {
   3.7633954879545403`*^9, 3.763395497032304*^9}, {3.763395566561657*^9, 
   3.7633956148734117`*^9}, {3.7650553859425044`*^9, 3.765055391436207*^9}},
 CellLabel->
  "In[109]:=",ExpressionUUID->"2d51010a-dde0-4cec-91c6-ea1f58f6830d"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"SeedRandom", "[", "02042019", "]"}], "\[IndentingNewLine]", 
 RowBox[{"net3", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"nn3", ",", "TrainingSample2", ",", " ", 
    RowBox[{"ValidationSet", "\[Rule]", "ValidationSample2"}], ",", " ", 
    RowBox[{"TargetDevice", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<GPU\>\"", ",", "2"}], "}"}]}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.7633947257220864`*^9, 3.763394735319854*^9}, 
   3.7633948060175457`*^9, {3.7633949455762243`*^9, 3.7633949461104913`*^9}},
 CellLabel->
  "In[110]:=",ExpressionUUID->"1c7ad212-e094-4a34-9215-4fe7f496743e"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {18., {0., 18.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"240\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["6", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {18., {0., 18.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{10, 1, 24}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{10}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 10, "KernelSize" -> {24}, 
                    "Stride" -> {1}, "PaddingSize" -> {0}, "Dilation" -> {1}, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$InputChannels" -> 1, "$GroupNumber" -> 1, 
                    "$InputSize" -> {240}, "$OutputSize" -> {217}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 240}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10, 217}, NeuralNetworks`RealT]]],
                     "2" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {10, 217}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10, 217}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10, 217}, NeuralNetworks`RealT]]],
                     "3" -> Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {24}, "Stride" -> {1}, 
                    "PaddingSize" -> {0}, "Function" -> Mean, 
                    "Dimensionality" -> 1, "Interleaving" -> False, 
                    "$Channels" -> 10, "$InputSize" -> {217}, 
                    "$OutputSize" -> {194}, "$MXPoolingConvention" -> "valid",
                     "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10, 217}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10, 194}, NeuralNetworks`RealT]]],
                     "4" -> Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10, 194}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1940}, NeuralNetworks`RealT]]], 
                    "5" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{3, 1940}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{3}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 1940, "$InputDimensions" -> {1940}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1940}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 240}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {1, 2, 3}, "InputDepth" -> 1, "Dimensions" -> 
                    3, "$Rank" -> 0], 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart = {"Nodes", "5"}, 
                   NeuralNetworks`Private`NetChain`part = {"Nodes", "5"}, 
                   NeuralNetworks`Private`NetChain`selected = 
                   Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{3, 1940}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{3}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 1940, "$InputDimensions" -> {1940}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1940}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]]}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", 
                    "\"240\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\"", 
                    "\"217\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\"", 
                    "\"217\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\"", 
                    "\"194\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1940\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {417., {245.5, 256.5}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.763394736185357*^9, 3.763394791875808*^9, 3.763394837204262*^9, 
   3.763394914742051*^9, {3.7633950648511577`*^9, 3.76339509245714*^9}, 
   3.7633951402932014`*^9, 3.763395193503316*^9, 3.763395428086153*^9, 
   3.763395555446257*^9, 3.7633982659499187`*^9, 3.763398452848317*^9, 
   3.7634025907877593`*^9, 3.763407551953209*^9, 3.7634083636872125`*^9, 
   3.76505124125035*^9, 3.765055438011549*^9},
 CellLabel->
  "Out[111]=",ExpressionUUID->"b5043704-b2d6-466e-a331-ca0e1c709fb5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{"net3", ",", " ", "TestSample2", ",", " ", "\"\<Accuracy\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.763394800970405*^9, 3.763394817848061*^9}},
 CellLabel->
  "In[113]:=",ExpressionUUID->"0543b224-3095-4dcb-b2bf-48e1d3728f54"],

Cell[BoxData["0.31666666666666665`"], "Output",
 CellChangeTimes->{3.7633948374827538`*^9, 3.763394917811695*^9, 
  3.763395072640354*^9, 3.7633951433269577`*^9, 3.763395196772148*^9, 
  3.7633955585923214`*^9, 3.7633982662897224`*^9, 3.7633984531201625`*^9, 
  3.7634025910965877`*^9, 3.7634075522250533`*^9, 3.7634083639385138`*^9, 
  3.765051241569173*^9, 3.765055438340238*^9, 3.765055472080164*^9},
 CellLabel->
  "Out[113]=",ExpressionUUID->"614682af-7e8e-4a7d-8239-57baa89cdc59"]
}, Open  ]],

Cell["At the least we managed to somewhat control overfitting:", "Text",
 CellChangeTimes->{{3.763395589446186*^9, 
  3.763395630055608*^9}},ExpressionUUID->"ab5f28e6-d1be-46d2-902f-\
ddaa31e9117a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{"net3", ",", " ", "TrainingSample2", ",", " ", "\"\<Accuracy\>\""}],
   "]"}]], "Input",
 CellChangeTimes->{{3.7633952076412687`*^9, 3.7633952148559885`*^9}},
 CellLabel->
  "In[114]:=",ExpressionUUID->"fe4e59dd-6e52-4c22-8c9a-7ee5bcaf9e08"],

Cell[BoxData["0.9766666666666667`"], "Output",
 CellChangeTimes->{3.76339521543925*^9, 3.7633955596074247`*^9, 
  3.7633982665815544`*^9, 3.7633984533180494`*^9, 3.763402591316461*^9, 
  3.763407552417943*^9, 3.7634083641154127`*^9, 3.765051241790047*^9, 
  3.76505547777602*^9},
 CellLabel->
  "Out[114]=",ExpressionUUID->"a8a612f6-b12c-410c-983b-60a4dfbb681f"]
}, Open  ]],

Cell["Predictably, that approach didn\[CloseCurlyQuote]t work.", "Text",
 CellChangeTimes->{{3.7633952225192575`*^9, 
  3.7633952350791855`*^9}},ExpressionUUID->"9b8b7097-2c96-4d0b-bcd3-\
622ca3aef20f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Algorithmic Classification", "Chapter",
 CellChangeTimes->{{3.763307189110363*^9, 3.763307204205367*^9}, {
  3.763408163941431*^9, 
  3.763408166284561*^9}},ExpressionUUID->"c56d4c84-eb33-4489-afe8-\
5ed99345167b"],

Cell["Let\[CloseCurlyQuote]s classify purely by using the BDM of the \
samples.", "Text",
 CellChangeTimes->{{3.7633072253008575`*^9, 
  3.763307244353159*^9}},ExpressionUUID->"4f6fe55c-cf1f-49cc-99e9-\
b7ee84284af1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"BDMTrainingSample", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"BinaryBDM", "[", 
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}], "\[Rule]", 
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ")"}], "&"}], "/@", 
    "TrainingSample"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"BDMTestSample", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"BinaryBDM", "[", 
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}], "\[Rule]", 
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ")"}], "&"}], "/@", 
    "TestSample"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.7633073220582743`*^9, 3.7633074370735188`*^9}, {
  3.7633075427983522`*^9, 3.7633075616154428`*^9}},
 CellLabel->"In[71]:=",ExpressionUUID->"dad86fda-8768-4c8e-b976-57c33e18d036"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bdmClass", " ", "=", " ", 
  RowBox[{"Classify", "[", 
   RowBox[{"BDMTrainingSample", ",", " ", 
    RowBox[{"Method", "\[Rule]", "\"\<NearestNeighbors\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.763307448198471*^9, 3.7633074726155443`*^9}, 
   3.7633075730492644`*^9, {3.763398613120772*^9, 3.7633986246864023`*^9}},
 CellLabel->"In[73]:=",ExpressionUUID->"53160d79-8e42-490b-bf2a-2da4cb818c2a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Numerical\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "1", "2", "3"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Numerical\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "1", "2", "3"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["300", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 300, "ClassNumber" -> 3, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Numerical"]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 7654441683129891127]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 300, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {4728.402321843054}, "Method" -> "Naive", 
                   "VectorLength" -> 1, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {4728.402321843054}, 
                   "StandardDeviation" -> {2112.3800608065194`}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 1, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                   True, "Invertibility" -> "Perfect", "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                "Model" -> 
                Association[
                 "Matrix" -> {{1.}}, "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {4728.402321843054}, 
                    "StandardDeviation" -> {2112.3800608065194`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 1, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0085139, "MaxTrainingMemory" -> 63656, 
                  "DataMemory" -> 2680, "FunctionMemory" -> 21760, 
                  "LanguageVersion" -> {11.3, 0}, "Date" -> 
                  DateObject[{
                    2019, 4, 23, 18, 34, 2.6509002`8.17596836160579}, 
                    "Instant", "Gregorian", -5.], "ProcessorCount" -> 10, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 1, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
             "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
             1884974815402472505]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {4728.402321843054}, 
             "StandardDeviation" -> {2112.3800608065194`}, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 6593175435314376500]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 5764960275667318102]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[1 -> 1, 2 -> 2, 3 -> 3]}, "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 689074351820263694, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 5167563583747307827]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[
       1 -> 0.3333333333333333, 2 -> 0.3333333333333333, 3 -> 
        0.3333333333333333]], "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {3, 4}, 0., {
      1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0, 
    "TieBreaker" -> RandomChoice, "PerformanceGoal" -> Automatic, 
    "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     "NeighborsFunction" -> 
      MachineLearning`PackageScope`NeighborsFunction["Nearest", 
        NearestFunction[
         Hold[
          Nearest[CompressedData["
1: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
twm3u97Zgf8HlLwlmg==
            "] -> Automatic, Method -> "KDtree"]]]], "NeighborsNumber" -> 50, 
      "ClassPriors" -> {0.3333333333333333, 0.3333333333333333, 
       0.3333333333333333}, "TrainingOutput" -> 
      RawArray["UnsignedInteger8",{1, 2, 3, 1, 3, 1, 2, 3, 1, 1, 2, 2, 2, 2, 
        3, 1, 3, 3, 3, 2, 3, 3, 1, 2, 2, 1, 1, 3, 1, 2, 1, 2, 3, 1, 3, 1, 2, 
        3, 1, 1, 2, 2, 2, 2, 3, 1, 3, 3, 3, 2, 3, 3, 1, 2, 2, 1, 1, 3, 1, 2, 
        1, 2, 3, 1, 3, 1, 2, 3, 1, 1, 2, 2, 2, 2, 3, 1, 3, 3, 3, 2, 3, 3, 1, 
        2, 2, 1, 1, 3, 1, 2, 1, 2, 3, 1, 3, 1, 2, 3, 1, 1, 2, 2, 2, 2, 3, 1, 
        3, 3, 3, 2, 3, 3, 1, 2, 2, 1, 1, 3, 1, 2, 1, 2, 3, 1, 3, 1, 2, 3, 1, 
        1, 2, 2, 2, 2, 3, 1, 3, 3, 3, 2, 3, 3, 1, 2, 2, 1, 1, 3, 1, 2, 1, 2, 
        3, 1, 3, 1, 2, 3, 1, 1, 2, 2, 2, 2, 3, 1, 3, 3, 3, 2, 3, 3, 1, 2, 2, 
        1, 1, 3, 1, 2, 1, 2, 3, 1, 3, 1, 2, 3, 1, 1, 2, 2, 2, 2, 3, 1, 3, 3, 
        3, 2, 3, 3, 1, 2, 2, 1, 1, 3, 1, 2, 1, 2, 3, 1, 3, 1, 2, 3, 1, 1, 2, 
        2, 2, 2, 3, 1, 3, 3, 3, 2, 3, 3, 1, 2, 2, 1, 1, 3, 1, 2, 1, 2, 3, 1, 
        3, 1, 2, 3, 1, 1, 2, 2, 2, 2, 3, 1, 3, 3, 3, 2, 3, 3, 1, 2, 2, 1, 1, 
        3, 1, 2, 1, 2, 3, 1, 3, 1, 2, 3, 1, 1, 2, 2, 2, 2, 3, 1, 3, 3, 3, 2, 
        3, 3, 1, 2, 2, 1, 1, 3, 1, 2}], "DistributionSmoothing" -> 0.5, 
      "Processor" -> MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 1], 
         "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Method" -> "NearestNeighbors", "Options" -> 
      Association[
       "NeighborsNumber" -> 
        Association["Value" -> 50, "Options" -> Association[]], 
        "DistributionSmoothing" -> 
        Association["Value" -> 0.5, "Options" -> Association[]], 
        "NearestMethod" -> 
        Association["Value" -> "KDtree", "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.6443192798744433, 0.030667865095915944`], "Accuracy" -> 
         PlusMinus[0.7133693280670285, 0.025740030872292256`], 
         "EvaluationTime" -> 0.000018892361111111114`, "TestSize" -> 660, 
         "TrainingSize" -> 240, "TrainingTime" -> 0.012739083333333333`, 
         "TrainingMemory" -> 842316., "ModelMemory" -> 8064., 
         "ExperimentCount" -> 11, "ModelUtility" -> 0.6640659157037357, 
         "MeanCrossEntropyHistory" -> {
           PlusMinus[0.6532682645145698, 0.09325692264507056], 
           PlusMinus[0.8207425479426929, 0.11633378208793402`], 
           PlusMinus[0.6402548150518543, 0.057514672066685764`], 
           PlusMinus[0.7034307605091187, 0.09008106141000569], 
           PlusMinus[0.6435233870639719, 0.08810905650790185], 
           PlusMinus[0.6487345332521577, 0.07076201700268286], 
           PlusMinus[0.7290609812390506, 0.10321699806409441`], 
           PlusMinus[0.6976392555647862, 0.09185863411434265], 
           PlusMinus[0.6442875317860176, 0.08694486983935203], 
           PlusMinus[0.5575953336731125, 0.052516564912591865`], 
           PlusMinus[0.6290525720400418, 0.0640235148832269]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.726775956284153, 0.058222906488557984`], 
           PlusMinus[0.5956284153005467, 0.0636224645970969], 
           PlusMinus[0.7431693989071038, 0.05716657282806288], 
           PlusMinus[0.6775956284153006, 0.06084988374677634], 
           PlusMinus[0.7759562841530054, 0.05475220119935461], 
           PlusMinus[0.6939890710382515, 0.060060407020934826`], 
           PlusMinus[0.6120218579234975, 0.06321723413691759], 
           PlusMinus[0.6939890710382515, 0.060060407020934826`], 
           PlusMinus[0.7759562841530054, 0.05475220119935461], 
           PlusMinus[0.7759562841530054, 0.05475220119935461], 
           PlusMinus[0.7103825136612022, 0.05918602301934762]}, 
         "Configuration" -> {
          "NearestNeighbors", "NeighborsNumber" -> Automatic, 
           "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
         "FinalTrainingSize" -> 300], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 11], 
          TypeSystem`Vector[TypeSystem`AnyType, 11], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 204608114524188]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8957212637186608, 0.052638559038634666`], 
              "Accuracy" -> 
              PlusMinus[0.6103162110909474, 0.021466008801282906`], 
              "EvaluationTime" -> 0.00001160192946708464, "TestSize" -> 2360, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.0035570818181818184`, 
              "TrainingMemory" -> 57286.545454545456`, "ModelMemory" -> 5976.,
               "ExperimentCount" -> 10, "ModelUtility" -> 
              0.47662795814557457`, "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0701810810836565`, 0.08185873882389055], 
                PlusMinus[0.877215508590872, 0.0520149003741365], 
                PlusMinus[0.7923600374730858, 0.0647749935840071], 
                PlusMinus[0.8707413486504471, 0.0712414359326039], 
                PlusMinus[0.8240880034041131, 0.059870199849550804`], 
                PlusMinus[1.3206240892013243`, 0.07054635878687165], 
                PlusMinus[0.9335354195235938, 0.06475586664956388], 
                PlusMinus[1.0145588835474746`, 0.07483003658609742], 
                PlusMinus[0.8249796147096328, 0.026271510409154417`], 
                PlusMinus[0.9581300272478158, 0.06019537253858704]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5925667892042185, 0.034816054200671305`], 
                PlusMinus[0.5775577557755781, 0.03500220528851172], 
                PlusMinus[0.6175287360199253, 0.0344466263861301], 
                PlusMinus[0.6073435497361301, 0.034624623362061076`], 
                PlusMinus[0.6878198123767112, 0.027300581516674492`], 
                PlusMinus[0.5261429644340289, 0.029222924980307423`], 
                PlusMinus[0.6442579517687462, 0.03384346788159606], 
                PlusMinus[0.49337915127147663`, 0.03534823478386518], 
                PlusMinus[0.6293684439912733, 0.02838002063257155], 
                PlusMinus[0.666414204846844, 0.027785979723245164`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7089348871157247, 0.01927627107865219], "Accuracy" -> 
              PlusMinus[0.680792670764464, 0.015026329443830581`], 
              "EvaluationTime" -> 0.000014966924999999999`, "TestSize" -> 
              1500, "TrainingSize" -> 50, "TrainingTime" -> 
              0.004082499999999999, "TrainingMemory" -> 92420., "ModelMemory" -> 
              6496., "ExperimentCount" -> 7, "ModelUtility" -> 
              0.6059898499427807, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7332178660320161, 0.09082683762340008], 
                PlusMinus[0.6406960230088699, 0.05090805902651318], 
                PlusMinus[0.6767264334640035, 0.04168951659628404], 
                PlusMinus[0.6944493450533692, 0.039621653339652466`], 
                PlusMinus[0.7387267718114965, 0.061919768795814546`], 
                PlusMinus[0.7258831534650442, 0.02238716292888868], 
                PlusMinus[0.7166908410780188, 0.02848448769302832]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.696369636963697, 0.04625710651112315], 
                PlusMinus[0.700760879513727, 0.0323945229981184], 
                PlusMinus[0.677301534093539, 0.029677097605832422`], 
                PlusMinus[0.6403716842018552, 0.030487551730829912`], 
                PlusMinus[0.6991684750035656, 0.03250831836805276], 
                PlusMinus[0.7014108382671541, 0.02907449475315714], 
                PlusMinus[0.6622523914322597, 0.029974066190571875`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6443192798744433, 0.030667865095915944`], 
              "Accuracy" -> 
              PlusMinus[0.7133693280670285, 0.025740030872292256`], 
              "EvaluationTime" -> 0.000018892361111111114`, "TestSize" -> 660,
               "TrainingSize" -> 240, "TrainingTime" -> 0.012739083333333333`,
               "TrainingMemory" -> 842316., "ModelMemory" -> 8064., 
              "ExperimentCount" -> 11, "ModelUtility" -> 0.6640659157037357, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6532682645145698, 0.09325692264507056], 
                PlusMinus[0.8207425479426929, 0.11633378208793402`], 
                PlusMinus[0.6402548150518543, 0.057514672066685764`], 
                PlusMinus[0.7034307605091187, 0.09008106141000569], 
                PlusMinus[0.6435233870639719, 0.08810905650790185], 
                PlusMinus[0.6487345332521577, 0.07076201700268286], 
                PlusMinus[0.7290609812390506, 0.10321699806409441`], 
                PlusMinus[0.6976392555647862, 0.09185863411434265], 
                PlusMinus[0.6442875317860176, 0.08694486983935203], 
                PlusMinus[0.5575953336731125, 0.052516564912591865`], 
                PlusMinus[0.6290525720400418, 0.0640235148832269]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.726775956284153, 0.058222906488557984`], 
                PlusMinus[0.5956284153005467, 0.0636224645970969], 
                PlusMinus[0.7431693989071038, 0.05716657282806288], 
                PlusMinus[0.6775956284153006, 0.06084988374677634], 
                PlusMinus[0.7759562841530054, 0.05475220119935461], 
                PlusMinus[0.6939890710382515, 0.060060407020934826`], 
                PlusMinus[0.6120218579234975, 0.06321723413691759], 
                PlusMinus[0.6939890710382515, 0.060060407020934826`], 
                PlusMinus[0.7759562841530054, 0.05475220119935461], 
                PlusMinus[0.7759562841530054, 0.05475220119935461], 
                PlusMinus[0.7103825136612022, 0.05918602301934762]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000018892361111111114`, "MeanCrossEntropy" -> 
             PlusMinus[0.6443192798744433, 0.030667865095915944`], 
             "ModelMemory" -> 8064., "TrainingMemory" -> 842316., 
             "TrainingTime" -> 0.019480935984848482`], "Index" -> 1]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 3]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            3], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 1], 
        Association["ID" -> 204603819556892]], "MaxTrainingSize" -> 300, 
      "LastReportingTime" -> 3.7650332441050687`17.328343804402557*^9, 
      "PreprocessorEvaluationTime" -> 5.49912109375`1.*^-6, 
      "PreprocessorMemory" -> 39280, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.32000000000000006`, 
          "ElapsedTimes" -> 0.3168225, "ExperimentCounts" -> 10], 
         Association[
         "TrainingSizes" -> 50, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.3737895, "ExperimentCounts" -> 7], 
         Association[
         "TrainingSizes" -> 240, "TimeBudgets" -> 0.5, "ElapsedTimes" -> 
          0.528702, "ExperimentCounts" -> 11]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[204612409491484]], "ID" -> 
         204616704458780]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {2386.264754665882}, "ID" -> 6900269369450652421]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 1.5328413, "MaxTrainingMemory" -> 1212544, 
      "DataMemory" -> 28968, "FunctionMemory" -> 123232, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2019, 4, 23, 18, 34, 4.147045`8.370313726212274}, "Instant",
         "Gregorian", -5.], "ProcessorCount" -> 10, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.763398271166743*^9, 3.763398457436581*^9, 
  3.7633986268669605`*^9, 3.763402593650837*^9, 3.763407554717001*^9, 
  3.7634083666003404`*^9, 3.765051244226*^9},
 CellLabel->"Out[73]=",ExpressionUUID->"a173f09c-0a58-4716-8c0d-a3dd6e674382"]
}, Open  ]],

Cell["Let us see the accuracy of this classifier:", "Text",
 CellChangeTimes->{{3.763307504645342*^9, 
  3.763307522101635*^9}},ExpressionUUID->"be29fb1e-f974-4ed3-8320-\
2fad7f3a4ae3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{
  "bdmClass", " ", ",", " ", "BDMTestSample", " ", ",", " ", 
   "\"\<Accuracy\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.7633075305152*^9, 3.7633075315701976`*^9}, {
  3.763307586606124*^9, 3.763307612226286*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"b747517a-4656-428a-9bfa-278cdc1282c7"],

Cell[BoxData["0.7`"], "Output",
 CellChangeTimes->{{3.763307602403477*^9, 3.7633076138474965`*^9}, 
   3.763398271300173*^9, 3.763398457573512*^9, 3.7633986291524754`*^9, 
   3.7634025937997503`*^9, 3.763407554869913*^9, 3.7634083667482557`*^9},
 CellLabel->"Out[74]=",ExpressionUUID->"412aaf4e-dcb0-4424-ad00-23362c7ac196"]
}, Open  ]],

Cell["\<\
70% by means of nearest neighbors based on its BDM value is much better than \
46%. But, can we do better?\
\>", "Text",
 CellChangeTimes->{{3.763307620766244*^9, 3.7633076372132835`*^9}, {
  3.7633079566623435`*^9, 3.7633079595416946`*^9}, {3.763308172998002*^9, 
  3.763308194277771*^9}},ExpressionUUID->"d7759cfe-f674-446a-b41b-\
0ef14897beef"],

Cell["Let\[CloseCurlyQuote]s see the confusion Matrix:", "Text",
 CellChangeTimes->{{3.7633978856423025`*^9, 
  3.76339789806398*^9}},ExpressionUUID->"0bfe1288-ae83-4266-8c9e-\
45d70173959c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{
  "bdmClass", " ", ",", " ", "BDMTestSample", " ", ",", " ", 
   "\"\<ConfusionMatrixPlot\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.76339790249896*^9, 3.763397920211661*^9}},
 CellLabel->"In[75]:=",ExpressionUUID->"6b726660-a921-473b-b9fe-b1b2cb58101f"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{1., 1., 1.}, {0.930929374422739, 0.8574442513250743, 
   0.6365850101319026}, {1., 0.42, 0.}}, {{0.9054835145992308, 
   0.7566734398087247, 0.39602780719342257`}, {0.8673260214520168, 
   0.5898059404421755, 0.0678722935799887}, {0.885490816093954, 
   0.6692428637933173, 0.2240900380845877}}, {{0.9569284245052199, 
   0.4627861924448565, 0.0021444132327252613`}, {0.9188593994187011, 
   0.8118349201808531, 0.5179512080104873}, {0.9475612297432638, 
   0.9202917548702608, 0.800056784708656}}}, {{0, 0}, {3, 3}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["80", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "80", "\" examples of \"", "1", "\" correctly classified\""}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.7766990291262136`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.8`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.788177339901478`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{80, " examples of ", 1, " correctly classified"}], 
         Row[{"Precision = ", 0.7766990291262136}], 
         Row[{"Recall = ", 0.8}], 
         Row[{"FScore = ", 0.788177339901478}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["23", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "23", "\" examples of \"", "2", "\" misclassified as \"", "1"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.22330097087378642`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.23`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{23, " examples of ", 2, " misclassified as ", 1}], 
         Row[{"Column fraction = ", 0.22330097087378642`}], 
         Row[{"Row fraction = ", 0.23}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "3", "\" misclassified as \"", "1"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{0, " example of ", 3, " misclassified as ", 1}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["18", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "18", "\" examples of \"", "1", "\" misclassified as \"", "2"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.24324324324324326`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.18`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{18, " examples of ", 1, " misclassified as ", 2}], 
         Row[{"Column fraction = ", 0.24324324324324326`}], 
         Row[{"Row fraction = ", 0.18}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["43", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "43", "\" examples of \"", "2", "\" correctly classified\""}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.581081081081081`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.43`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.49425287356321834`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{43, " examples of ", 2, " correctly classified"}], 
         Row[{"Precision = ", 0.581081081081081}], 
         Row[{"Recall = ", 0.43}], 
         Row[{"FScore = ", 0.49425287356321834`}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["13", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "13", "\" examples of \"", "3", "\" misclassified as \"", "2"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.17567567567567569`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.13`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{13, " examples of ", 3, " misclassified as ", 2}], 
         Row[{"Column fraction = ", 0.17567567567567569`}], 
         Row[{"Row fraction = ", 0.13}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["2", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "2", "\" examples of \"", "1", "\" misclassified as \"", "3"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.016260162601626018`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.02`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{2, " examples of ", 1, " misclassified as ", 3}], 
         Row[{"Column fraction = ", 0.016260162601626018`}], 
         Row[{"Row fraction = ", 0.02}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["34", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "34", "\" examples of \"", "2", "\" misclassified as \"", "3"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.2764227642276423`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.34`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{34, " examples of ", 2, " misclassified as ", 3}], 
         Row[{"Column fraction = ", 0.2764227642276423}], 
         Row[{"Row fraction = ", 0.34}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["87", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "87", "\" examples of \"", "3", "\" correctly classified\""}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.7073170731707317`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.87`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.7802690582959643`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{87, " examples of ", 3, " correctly classified"}], 
         Row[{"Precision = ", 0.7073170731707317}], 
         Row[{"Recall = ", 0.87}], 
         Row[{"FScore = ", 0.7802690582959643}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{"100", "\" example\"", "\"s\"", "\" of class \"", "1"},
            "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.8`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{100, " example", "s", " of class ", 1}], 
        Row[{"Recall = ", 0.8}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{"100", "\" example\"", "\"s\"", "\" of class \"", "2"},
            "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.43`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{100, " example", "s", " of class ", 2}], 
        Row[{"Recall = ", 0.43}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{"100", "\" example\"", "\"s\"", "\" of class \"", "3"},
            "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.87`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{100, " example", "s", " of class ", 3}], 
        Row[{"Recall = ", 0.87}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "103", "\" example\"", "\"s\"", "\" classified as \"", "1"}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.7766990291262136`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{103, " example", "s", " classified as ", 1}], 
        Row[{"Precision = ", 0.7766990291262136}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "74", "\" example\"", "\"s\"", "\" classified as \"", "2"}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.581081081081081`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{74, " example", "s", " classified as ", 2}], 
        Row[{"Precision = ", 0.581081081081081}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "123", "\" example\"", "\"s\"", "\" classified as \"", "3"}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.7073170731707317`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{123, " example", "s", " classified as ", 3}], 
        Row[{"Precision = ", 0.7073170731707317}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{2.5, 
       FormBox[
        RotationBox["1", BoxRotation -> 0.], TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["2", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["3", BoxRotation -> 0.], TraditionalForm]}}, {{2.5, 
       FormBox["100", TraditionalForm]}, {1.5, 
       FormBox["100", TraditionalForm]}, {0.5, 
       FormBox["100", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["103", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["74", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["123", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["1", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["2", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {2.5, 
       FormBox[
        RotationBox["3", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.76339792079801*^9, 3.7633982715130544`*^9, 
  3.7633984577004395`*^9, 3.763402593944668*^9, 3.763407555016382*^9, 
  3.7634083669091635`*^9},
 CellLabel->"Out[75]=",ExpressionUUID->"cee5d4ca-9e37-4d4a-8ddb-315b41e6979a"]
}, Open  ]],

Cell[TextData[{
 "The class 2, aka the ",
 StyleBox["rich one",
  FontSlant->"Italic"],
 ", is the hardest to classify. And most erroneous predictions went to the \
k=3 case. However, unlike the tested ",
 StyleBox["traditional methods",
  FontSlant->"Italic"],
 ", "
}], "Text",
 CellChangeTimes->{{3.763398844374662*^9, 3.76339886566368*^9}, {
  3.7633997854630995`*^9, 3.763399821934448*^9}, {3.76340855063643*^9, 
  3.7634085966222067`*^9}},ExpressionUUID->"b1678ee0-8b1e-4309-b432-\
f4cc917ef3ae"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{
  "bdmClass", " ", ",", " ", "BDMTrainingSample", " ", ",", " ", 
   "\"\<Accuracy\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.76506167029912*^9, 3.7650616774145913`*^9}},
 CellLabel->
  "In[116]:=",ExpressionUUID->"d7a3a004-efd5-4697-acaa-8756e534507b"],

Cell[BoxData["0.71`"], "Output",
 CellChangeTimes->{3.765061678095172*^9},
 CellLabel->
  "Out[116]=",ExpressionUUID->"52476d2b-9653-46f6-b1b6-647fd85beae9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Boosting ",
  FontSlant->"Italic"],
 "the classifier by using both data points."
}], "Subchapter",
 CellChangeTimes->{{3.7633083601340065`*^9, 
  3.7633083776057577`*^9}},ExpressionUUID->"9b49325f-619d-4f22-8769-\
6495d490fb65"],

Cell["Let\[CloseCurlyQuote]s combine the data points.", "Text",
 CellChangeTimes->{{3.7633083827817745`*^9, 
  3.7633083910777626`*^9}},ExpressionUUID->"d8e1146d-fa76-460d-99b0-\
c0833028aae1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"combTrainingSample", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Catenate", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"BinaryBDM", "[", 
            RowBox[{"#", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "]"}], "}"}]}], "}"}], "]"}], 
       "\[Rule]", 
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ")"}], "&"}], "/@", 
    "TrainingSample"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"combValidationSample", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Catenate", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"BinaryBDM", "[", 
            RowBox[{"#", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "]"}], "}"}]}], "}"}], "]"}], 
       "\[Rule]", 
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ")"}], "&"}], "/@", 
    "ValidationSample"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"combTestSample", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Catenate", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"BinaryBDM", "[", 
            RowBox[{"#", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "]"}], "}"}]}], "}"}], "]"}], 
       "\[Rule]", 
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ")"}], "&"}], "/@", 
    "TestSample"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.7633084105794296`*^9, 3.7633085497927947`*^9}},
 CellLabel->"In[76]:=",ExpressionUUID->"90228659-cbc2-408c-92bc-64a3ce820153"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combClass", " ", "=", " ", 
  RowBox[{"Classify", "[", "combTrainingSample", " ", "]"}]}]], "Input",
 CellChangeTimes->{{3.763308563254699*^9, 3.763308574630432*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"9f79a119-09d9-448a-9aef-8cd2c6451471"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "241", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    RowBox[{"\[LeftSkeleton]", "177", "\[RightSkeleton]"}], 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Numerical"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "1", "2", "3"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "241", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    RowBox[{"\[LeftSkeleton]", "177", "\[RightSkeleton]"}], 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Boolean\"", ",", 
                    "\"Boolean\"", ",", "\"Boolean\"", ",", "\"Boolean\"", 
                    ",", "\"Boolean\"", ",", "\"Numerical\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                    "Boolean", "Numerical"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "1", "2", "3"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"GradientBoostedTrees\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["300", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 300, "ClassNumber" -> 3, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Boolean"], "f2" -> 
           Association["Type" -> "Boolean"], "f3" -> 
           Association["Type" -> "Boolean"], "f4" -> 
           Association["Type" -> "Boolean"], "f5" -> 
           Association["Type" -> "Boolean"], "f6" -> 
           Association["Type" -> "Boolean"], "f7" -> 
           Association["Type" -> "Boolean"], "f8" -> 
           Association["Type" -> "Boolean"], "f9" -> 
           Association["Type" -> "Boolean"], "f10" -> 
           Association["Type" -> "Boolean"], "f11" -> 
           Association["Type" -> "Boolean"], "f12" -> 
           Association["Type" -> "Boolean"], "f13" -> 
           Association["Type" -> "Boolean"], "f14" -> 
           Association["Type" -> "Boolean"], "f15" -> 
           Association["Type" -> "Boolean"], "f16" -> 
           Association["Type" -> "Boolean"], "f17" -> 
           Association["Type" -> "Boolean"], "f18" -> 
           Association["Type" -> "Boolean"], "f19" -> 
           Association["Type" -> "Boolean"], "f20" -> 
           Association["Type" -> "Boolean"], "f21" -> 
           Association["Type" -> "Boolean"], "f22" -> 
           Association["Type" -> "Boolean"], "f23" -> 
           Association["Type" -> "Boolean"], "f24" -> 
           Association["Type" -> "Boolean"], "f25" -> 
           Association["Type" -> "Boolean"], "f26" -> 
           Association["Type" -> "Boolean"], "f27" -> 
           Association["Type" -> "Boolean"], "f28" -> 
           Association["Type" -> "Boolean"], "f29" -> 
           Association["Type" -> "Boolean"], "f30" -> 
           Association["Type" -> "Boolean"], "f31" -> 
           Association["Type" -> "Boolean"], "f32" -> 
           Association["Type" -> "Boolean"], "f33" -> 
           Association["Type" -> "Boolean"], "f34" -> 
           Association["Type" -> "Boolean"], "f35" -> 
           Association["Type" -> "Boolean"], "f36" -> 
           Association["Type" -> "Boolean"], "f37" -> 
           Association["Type" -> "Boolean"], "f38" -> 
           Association["Type" -> "Boolean"], "f39" -> 
           Association["Type" -> "Boolean"], "f40" -> 
           Association["Type" -> "Boolean"], "f41" -> 
           Association["Type" -> "Boolean"], "f42" -> 
           Association["Type" -> "Boolean"], "f43" -> 
           Association["Type" -> "Boolean"], "f44" -> 
           Association["Type" -> "Boolean"], "f45" -> 
           Association["Type" -> "Boolean"], "f46" -> 
           Association["Type" -> "Boolean"], "f47" -> 
           Association["Type" -> "Boolean"], "f48" -> 
           Association["Type" -> "Boolean"], "f49" -> 
           Association["Type" -> "Boolean"], "f50" -> 
           Association["Type" -> "Boolean"], "f51" -> 
           Association["Type" -> "Boolean"], "f52" -> 
           Association["Type" -> "Boolean"], "f53" -> 
           Association["Type" -> "Boolean"], "f54" -> 
           Association["Type" -> "Boolean"], "f55" -> 
           Association["Type" -> "Boolean"], "f56" -> 
           Association["Type" -> "Boolean"], "f57" -> 
           Association["Type" -> "Boolean"], "f58" -> 
           Association["Type" -> "Boolean"], "f59" -> 
           Association["Type" -> "Boolean"], "f60" -> 
           Association["Type" -> "Boolean"], "f61" -> 
           Association["Type" -> "Boolean"], "f62" -> 
           Association["Type" -> "Boolean"], "f63" -> 
           Association["Type" -> "Boolean"], "f64" -> 
           Association["Type" -> "Boolean"], "f65" -> 
           Association["Type" -> "Boolean"], "f66" -> 
           Association["Type" -> "Boolean"], "f67" -> 
           Association["Type" -> "Boolean"], "f68" -> 
           Association["Type" -> "Boolean"], "f69" -> 
           Association["Type" -> "Boolean"], "f70" -> 
           Association["Type" -> "Boolean"], "f71" -> 
           Association["Type" -> "Boolean"], "f72" -> 
           Association["Type" -> "Boolean"], "f73" -> 
           Association["Type" -> "Boolean"], "f74" -> 
           Association["Type" -> "Boolean"], "f75" -> 
           Association["Type" -> "Boolean"], "f76" -> 
           Association["Type" -> "Boolean"], "f77" -> 
           Association["Type" -> "Boolean"], "f78" -> 
           Association["Type" -> "Boolean"], "f79" -> 
           Association["Type" -> "Boolean"], "f80" -> 
           Association["Type" -> "Boolean"], "f81" -> 
           Association["Type" -> "Boolean"], "f82" -> 
           Association["Type" -> "Boolean"], "f83" -> 
           Association["Type" -> "Boolean"], "f84" -> 
           Association["Type" -> "Boolean"], "f85" -> 
           Association["Type" -> "Boolean"], "f86" -> 
           Association["Type" -> "Boolean"], "f87" -> 
           Association["Type" -> "Boolean"], "f88" -> 
           Association["Type" -> "Boolean"], "f89" -> 
           Association["Type" -> "Boolean"], "f90" -> 
           Association["Type" -> "Boolean"], "f91" -> 
           Association["Type" -> "Boolean"], "f92" -> 
           Association["Type" -> "Boolean"], "f93" -> 
           Association["Type" -> "Boolean"], "f94" -> 
           Association["Type" -> "Boolean"], "f95" -> 
           Association["Type" -> "Boolean"], "f96" -> 
           Association["Type" -> "Boolean"], "f97" -> 
           Association["Type" -> "Boolean"], "f98" -> 
           Association["Type" -> "Boolean"], "f99" -> 
           Association["Type" -> "Boolean"], "f100" -> 
           Association["Type" -> "Boolean"], "f101" -> 
           Association["Type" -> "Boolean"], "f102" -> 
           Association["Type" -> "Boolean"], "f103" -> 
           Association["Type" -> "Boolean"], "f104" -> 
           Association["Type" -> "Boolean"], "f105" -> 
           Association["Type" -> "Boolean"], "f106" -> 
           Association["Type" -> "Boolean"], "f107" -> 
           Association["Type" -> "Boolean"], "f108" -> 
           Association["Type" -> "Boolean"], "f109" -> 
           Association["Type" -> "Boolean"], "f110" -> 
           Association["Type" -> "Boolean"], "f111" -> 
           Association["Type" -> "Boolean"], "f112" -> 
           Association["Type" -> "Boolean"], "f113" -> 
           Association["Type" -> "Boolean"], "f114" -> 
           Association["Type" -> "Boolean"], "f115" -> 
           Association["Type" -> "Boolean"], "f116" -> 
           Association["Type" -> "Boolean"], "f117" -> 
           Association["Type" -> "Boolean"], "f118" -> 
           Association["Type" -> "Boolean"], "f119" -> 
           Association["Type" -> "Boolean"], "f120" -> 
           Association["Type" -> "Boolean"], "f121" -> 
           Association["Type" -> "Boolean"], "f122" -> 
           Association["Type" -> "Boolean"], "f123" -> 
           Association["Type" -> "Boolean"], "f124" -> 
           Association["Type" -> "Boolean"], "f125" -> 
           Association["Type" -> "Boolean"], "f126" -> 
           Association["Type" -> "Boolean"], "f127" -> 
           Association["Type" -> "Boolean"], "f128" -> 
           Association["Type" -> "Boolean"], "f129" -> 
           Association["Type" -> "Boolean"], "f130" -> 
           Association["Type" -> "Boolean"], "f131" -> 
           Association["Type" -> "Boolean"], "f132" -> 
           Association["Type" -> "Boolean"], "f133" -> 
           Association["Type" -> "Boolean"], "f134" -> 
           Association["Type" -> "Boolean"], "f135" -> 
           Association["Type" -> "Boolean"], "f136" -> 
           Association["Type" -> "Boolean"], "f137" -> 
           Association["Type" -> "Boolean"], "f138" -> 
           Association["Type" -> "Boolean"], "f139" -> 
           Association["Type" -> "Boolean"], "f140" -> 
           Association["Type" -> "Boolean"], "f141" -> 
           Association["Type" -> "Boolean"], "f142" -> 
           Association["Type" -> "Boolean"], "f143" -> 
           Association["Type" -> "Boolean"], "f144" -> 
           Association["Type" -> "Boolean"], "f145" -> 
           Association["Type" -> "Boolean"], "f146" -> 
           Association["Type" -> "Boolean"], "f147" -> 
           Association["Type" -> "Boolean"], "f148" -> 
           Association["Type" -> "Boolean"], "f149" -> 
           Association["Type" -> "Boolean"], "f150" -> 
           Association["Type" -> "Boolean"], "f151" -> 
           Association["Type" -> "Boolean"], "f152" -> 
           Association["Type" -> "Boolean"], "f153" -> 
           Association["Type" -> "Boolean"], "f154" -> 
           Association["Type" -> "Boolean"], "f155" -> 
           Association["Type" -> "Boolean"], "f156" -> 
           Association["Type" -> "Boolean"], "f157" -> 
           Association["Type" -> "Boolean"], "f158" -> 
           Association["Type" -> "Boolean"], "f159" -> 
           Association["Type" -> "Boolean"], "f160" -> 
           Association["Type" -> "Boolean"], "f161" -> 
           Association["Type" -> "Boolean"], "f162" -> 
           Association["Type" -> "Boolean"], "f163" -> 
           Association["Type" -> "Boolean"], "f164" -> 
           Association["Type" -> "Boolean"], "f165" -> 
           Association["Type" -> "Boolean"], "f166" -> 
           Association["Type" -> "Boolean"], "f167" -> 
           Association["Type" -> "Boolean"], "f168" -> 
           Association["Type" -> "Boolean"], "f169" -> 
           Association["Type" -> "Boolean"], "f170" -> 
           Association["Type" -> "Boolean"], "f171" -> 
           Association["Type" -> "Boolean"], "f172" -> 
           Association["Type" -> "Boolean"], "f173" -> 
           Association["Type" -> "Boolean"], "f174" -> 
           Association["Type" -> "Boolean"], "f175" -> 
           Association["Type" -> "Boolean"], "f176" -> 
           Association["Type" -> "Boolean"], "f177" -> 
           Association["Type" -> "Boolean"], "f178" -> 
           Association["Type" -> "Boolean"], "f179" -> 
           Association["Type" -> "Boolean"], "f180" -> 
           Association["Type" -> "Boolean"], "f181" -> 
           Association["Type" -> "Boolean"], "f182" -> 
           Association["Type" -> "Boolean"], "f183" -> 
           Association["Type" -> "Boolean"], "f184" -> 
           Association["Type" -> "Boolean"], "f185" -> 
           Association["Type" -> "Boolean"], "f186" -> 
           Association["Type" -> "Boolean"], "f187" -> 
           Association["Type" -> "Boolean"], "f188" -> 
           Association["Type" -> "Boolean"], "f189" -> 
           Association["Type" -> "Boolean"], "f190" -> 
           Association["Type" -> "Boolean"], "f191" -> 
           Association["Type" -> "Boolean"], "f192" -> 
           Association["Type" -> "Boolean"], "f193" -> 
           Association["Type" -> "Boolean"], "f194" -> 
           Association["Type" -> "Boolean"], "f195" -> 
           Association["Type" -> "Boolean"], "f196" -> 
           Association["Type" -> "Boolean"], "f197" -> 
           Association["Type" -> "Boolean"], "f198" -> 
           Association["Type" -> "Boolean"], "f199" -> 
           Association["Type" -> "Boolean"], "f200" -> 
           Association["Type" -> "Boolean"], "f201" -> 
           Association["Type" -> "Boolean"], "f202" -> 
           Association["Type" -> "Boolean"], "f203" -> 
           Association["Type" -> "Boolean"], "f204" -> 
           Association["Type" -> "Boolean"], "f205" -> 
           Association["Type" -> "Boolean"], "f206" -> 
           Association["Type" -> "Boolean"], "f207" -> 
           Association["Type" -> "Boolean"], "f208" -> 
           Association["Type" -> "Boolean"], "f209" -> 
           Association["Type" -> "Boolean"], "f210" -> 
           Association["Type" -> "Boolean"], "f211" -> 
           Association["Type" -> "Boolean"], "f212" -> 
           Association["Type" -> "Boolean"], "f213" -> 
           Association["Type" -> "Boolean"], "f214" -> 
           Association["Type" -> "Boolean"], "f215" -> 
           Association["Type" -> "Boolean"], "f216" -> 
           Association["Type" -> "Boolean"], "f217" -> 
           Association["Type" -> "Boolean"], "f218" -> 
           Association["Type" -> "Boolean"], "f219" -> 
           Association["Type" -> "Boolean"], "f220" -> 
           Association["Type" -> "Boolean"], "f221" -> 
           Association["Type" -> "Boolean"], "f222" -> 
           Association["Type" -> "Boolean"], "f223" -> 
           Association["Type" -> "Boolean"], "f224" -> 
           Association["Type" -> "Boolean"], "f225" -> 
           Association["Type" -> "Boolean"], "f226" -> 
           Association["Type" -> "Boolean"], "f227" -> 
           Association["Type" -> "Boolean"], "f228" -> 
           Association["Type" -> "Boolean"], "f229" -> 
           Association["Type" -> "Boolean"], "f230" -> 
           Association["Type" -> "Boolean"], "f231" -> 
           Association["Type" -> "Boolean"], "f232" -> 
           Association["Type" -> "Boolean"], "f233" -> 
           Association["Type" -> "Boolean"], "f234" -> 
           Association["Type" -> "Boolean"], "f235" -> 
           Association["Type" -> "Boolean"], "f236" -> 
           Association["Type" -> "Boolean"], "f237" -> 
           Association["Type" -> "Boolean"], "f238" -> 
           Association["Type" -> "Boolean"], "f239" -> 
           Association["Type" -> "Boolean"], "f240" -> 
           Association["Type" -> "Boolean"], "f241" -> 
           Association["Type" -> "Numerical"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Boolean", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f49" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f50" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f52" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f55" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f56" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f57" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f58" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f59" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f60" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f61" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f62" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f63" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f64" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f65" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f66" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f67" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f68" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f69" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f70" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f71" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f72" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f73" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f74" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f75" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f76" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f77" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f78" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f79" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f80" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f81" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f82" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f83" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f84" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f85" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f86" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f87" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f88" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f89" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f90" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f91" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f92" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f93" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f94" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f95" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f96" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f97" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f98" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f99" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f100" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f101" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f102" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f103" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f104" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f105" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f106" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f107" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f108" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f109" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f110" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f111" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f112" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f113" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f114" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f115" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f116" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f117" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f118" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f119" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f120" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f121" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f122" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f123" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f124" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f125" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f126" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f127" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f128" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f129" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f130" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f131" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f132" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f133" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f134" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f135" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f136" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f137" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f138" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f139" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f140" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f141" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f142" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f143" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f144" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f145" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f146" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f147" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f148" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f149" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f150" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f151" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f152" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f153" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f154" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f155" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f156" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f157" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f158" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f159" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f160" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f161" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f162" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f163" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f164" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f165" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f166" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f167" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f168" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f169" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f170" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f171" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f172" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f173" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f174" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f175" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f176" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f177" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f178" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f179" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f180" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f181" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f182" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f183" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f184" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f185" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f186" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f187" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f188" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f189" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f190" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f191" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f192" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f193" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f194" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f195" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f196" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f197" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f198" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f199" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f200" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f201" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f202" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f203" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f204" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f205" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f206" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f207" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f208" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f209" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f210" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f211" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f212" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f213" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f214" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f215" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f216" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f217" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f218" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f219" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f220" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f221" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f222" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f223" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f224" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f225" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f226" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f227" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f228" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f229" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f230" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f231" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f232" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f233" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f234" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f235" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f236" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f237" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f238" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f239" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f240" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f241" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 241]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {
                 "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Boolean", "Boolean", "Boolean", "Boolean", "Boolean", 
                  "Numerical"}, 
                "FeatureKeys" -> {
                 "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "f10", 
                  "f11", "f12", "f13", "f14", "f15", "f16", "f17", "f18", 
                  "f19", "f20", "f21", "f22", "f23", "f24", "f25", "f26", 
                  "f27", "f28", "f29", "f30", "f31", "f32", "f33", "f34", 
                  "f35", "f36", "f37", "f38", "f39", "f40", "f41", "f42", 
                  "f43", "f44", "f45", "f46", "f47", "f48", "f49", "f50", 
                  "f51", "f52", "f53", "f54", "f55", "f56", "f57", "f58", 
                  "f59", "f60", "f61", "f62", "f63", "f64", "f65", "f66", 
                  "f67", "f68", "f69", "f70", "f71", "f72", "f73", "f74", 
                  "f75", "f76", "f77", "f78", "f79", "f80", "f81", "f82", 
                  "f83", "f84", "f85", "f86", "f87", "f88", "f89", "f90", 
                  "f91", "f92", "f93", "f94", "f95", "f96", "f97", "f98", 
                  "f99", "f100", "f101", "f102", "f103", "f104", "f105", 
                  "f106", "f107", "f108", "f109", "f110", "f111", "f112", 
                  "f113", "f114", "f115", "f116", "f117", "f118", "f119", 
                  "f120", "f121", "f122", "f123", "f124", "f125", "f126", 
                  "f127", "f128", "f129", "f130", "f131", "f132", "f133", 
                  "f134", "f135", "f136", "f137", "f138", "f139", "f140", 
                  "f141", "f142", "f143", "f144", "f145", "f146", "f147", 
                  "f148", "f149", "f150", "f151", "f152", "f153", "f154", 
                  "f155", "f156", "f157", "f158", "f159", "f160", "f161", 
                  "f162", "f163", "f164", "f165", "f166", "f167", "f168", 
                  "f169", "f170", "f171", "f172", "f173", "f174", "f175", 
                  "f176", "f177", "f178", "f179", "f180", "f181", "f182", 
                  "f183", "f184", "f185", "f186", "f187", "f188", "f189", 
                  "f190", "f191", "f192", "f193", "f194", "f195", "f196", 
                  "f197", "f198", "f199", "f200", "f201", "f202", "f203", 
                  "f204", "f205", "f206", "f207", "f208", "f209", "f210", 
                  "f211", "f212", "f213", "f214", "f215", "f216", "f217", 
                  "f218", "f219", "f220", "f221", "f222", "f223", "f224", 
                  "f225", "f226", "f227", "f228", "f229", "f230", "f231", 
                  "f232", "f233", "f234", "f235", "f236", "f237", "f238", 
                  "f239", "f240", "f241"}, "FeatureWeights" -> Automatic, 
                "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f241" -> Association["Type" -> "Numerical", "Weight" -> 1], "f1" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f4" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f5" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f6" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f7" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f49" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f50" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f52" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f55" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f56" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f57" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f58" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f59" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f60" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f61" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f62" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f63" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f64" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f65" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f66" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f67" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f68" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f69" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f70" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f71" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f72" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f73" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f74" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f75" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f76" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f77" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f78" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f79" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f80" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f81" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f82" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f83" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f84" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f85" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f86" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f87" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f88" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f89" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f90" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f91" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f92" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f93" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f94" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f95" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f96" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f97" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f98" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f99" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f100" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f101" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f102" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f103" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f104" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f105" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f106" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f107" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f108" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f109" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f110" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f111" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f112" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f113" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f114" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f115" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f116" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f117" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f118" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f119" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f120" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f121" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f122" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f123" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f124" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f125" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f126" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f127" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f128" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f129" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f130" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f131" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f132" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f133" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f134" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f135" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f136" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f137" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f138" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f139" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f140" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f141" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f142" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f143" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f144" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f145" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f146" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f147" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f148" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f149" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f150" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f151" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f152" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f153" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f154" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f155" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f156" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f157" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f158" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f159" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f160" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f161" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f162" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f163" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f164" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f165" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f166" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f167" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f168" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f169" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f170" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f171" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f172" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f173" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f174" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f175" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f176" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f177" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f178" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f179" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f180" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f181" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f182" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f183" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f184" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f185" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f186" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f187" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f188" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f189" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f190" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f191" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f192" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f193" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f194" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f195" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f196" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f197" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f198" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f199" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f200" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f201" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f202" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f203" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f204" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f205" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f206" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f207" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f208" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f209" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f210" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f211" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f212" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f213" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f214" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f215" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f216" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f217" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f218" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f219" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f220" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f221" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f222" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f223" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f224" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f225" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f226" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f227" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f228" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f229" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f230" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f231" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f232" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f233" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f234" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f235" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f236" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f237" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f238" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f239" -> 
           Association["Type" -> "Boolean", "Weight" -> 1], "f240" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
         Association[
          "(f241(f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f\
24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f\
50f51f52f53f54f55f56f57f58f59f60f61f62f63f64f65f66f67f68f69f70f71f72f73f74f75f\
76f77f78f79f80f81f82f83f84f85f86f87f88f89f90f91f92f93f94f95f96f97f98f99f100f10\
1f102f103f104f105f106f107f108f109f110f111f112f113f114f115f116f117f118f119f120f\
121f122f123f124f125f126f127f128f129f130f131f132f133f134f135f136f137f138f139f14\
0f141f142f143f144f145f146f147f148f149f150f151f152f153f154f155f156f157f158f159f\
160f161f162f163f164f165f166f167f168f169f170f171f172f173f174f175f176f177f178f17\
9f180f181f182f183f184f185f186f187f188f189f190f191f192f193f194f195f196f197f198f\
199f200f201f202f203f204f205f206f207f208f209f210f211f212f213f214f215f216f217f21\
8f219f220f221f222f223f224f225f226f227f228f229f230f231f232f233f234f235f236f237f\
238f239f240))" -> Association["Type" -> "NumericalVector", "Weight" -> 241.]],
          "Processors" -> {
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f241" -> Association["Type" -> "Numerical", "Weight" -> 1], 
               "f1" -> Association["Type" -> "Boolean", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f3" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f4" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f5" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f6" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f7" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f8" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f9" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f10" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f11" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f12" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f13" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f14" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f15" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f16" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f17" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f18" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f19" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f20" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f21" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f22" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f23" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f24" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f25" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f26" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f27" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f28" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f29" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f30" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f31" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f32" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f33" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f34" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f35" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f36" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f37" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f38" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f39" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f40" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f41" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f42" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f43" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f44" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f45" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f46" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f47" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f48" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f49" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f50" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f51" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f52" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f53" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f54" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f55" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f56" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f57" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f58" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f59" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f60" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f61" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f62" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f63" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f64" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f65" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f66" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f67" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f68" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f69" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f70" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f71" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f72" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f73" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f74" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f75" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f76" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f77" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f78" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f79" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f80" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f81" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f82" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f83" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f84" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f85" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f86" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f87" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f88" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f89" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f90" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f91" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f92" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f93" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f94" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f95" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f96" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f97" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f98" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f99" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f100" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f101" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f102" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f103" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f104" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f105" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f106" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f107" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f108" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f109" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f110" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f111" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f112" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f113" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f114" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f115" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f116" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f117" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f118" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f119" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f120" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f121" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f122" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f123" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f124" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f125" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f126" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f127" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f128" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f129" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f130" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f131" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f132" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f133" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f134" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f135" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f136" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f137" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f138" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f139" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f140" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f141" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f142" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f143" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f144" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f145" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f146" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f147" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f148" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f149" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f150" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f151" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f152" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f153" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f154" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f155" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f156" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f157" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f158" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f159" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f160" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f161" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f162" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f163" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f164" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f165" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f166" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f167" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f168" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f169" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f170" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f171" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f172" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f173" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f174" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f175" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f176" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f177" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f178" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f179" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f180" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f181" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f182" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f183" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f184" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f185" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f186" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f187" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f188" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f189" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f190" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f191" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f192" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f193" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f194" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f195" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f196" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f197" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f198" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f199" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f200" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f201" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f202" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f203" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f204" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f205" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f206" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f207" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f208" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f209" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f210" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f211" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f212" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f213" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f214" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f215" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f216" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f217" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f218" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f219" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f220" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f221" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f222" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f223" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f224" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f225" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f226" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f227" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f228" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f229" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f230" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f231" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f232" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f233" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f234" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f235" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f236" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f237" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f238" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f239" -> 
               Association["Type" -> "Boolean", "Weight" -> 1], "f240" -> 
               Association["Type" -> "Boolean", "Weight" -> 1]], "Output" -> 
             Association[
              "f241" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1], 
               "(f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f\
24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f\
50f51f52f53f54f55f56f57f58f59f60f61f62f63f64f65f66f67f68f69f70f71f72f73f74f75f\
76f77f78f79f80f81f82f83f84f85f86f87f88f89f90f91f92f93f94f95f96f97f98f99f100f10\
1f102f103f104f105f106f107f108f109f110f111f112f113f114f115f116f117f118f119f120f\
121f122f123f124f125f126f127f128f129f130f131f132f133f134f135f136f137f138f139f14\
0f141f142f143f144f145f146f147f148f149f150f151f152f153f154f155f156f157f158f159f\
160f161f162f163f164f165f166f167f168f169f170f171f172f173f174f175f176f177f178f17\
9f180f181f182f183f184f185f186f187f188f189f190f191f192f193f194f195f196f197f198f\
199f200f201f202f203f204f205f206f207f208f209f210f211f212f213f214f215f216f217f21\
8f219f220f221f222f223f224f225f226f227f228f229f230f231f232f233f234f235f236f237f\
238f239f240)" -> Association["Type" -> "BooleanVector", "Weight" -> 240]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                 Association[
                  "f241" -> Association[
                    "Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
                 Association[
                  "f241" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Version" -> {11.3, 0}, "ID" -> 65480579365412543]], 
               MachineLearning`MLProcessor["ToVector", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f2" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f3" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f4" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f5" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f6" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f7" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f8" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f9" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f10" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f11" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f12" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f13" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f14" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f15" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f16" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f17" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f18" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f19" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f20" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f21" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f22" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f23" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f24" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f25" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f26" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f27" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f28" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f29" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f30" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f31" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f32" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f33" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f34" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f35" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f36" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f37" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f38" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f39" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f40" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f41" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f42" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f43" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f44" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f45" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f46" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f47" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f48" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f49" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f50" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f51" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f52" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f53" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f54" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f55" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f56" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f57" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f58" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f59" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f60" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f61" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f62" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f63" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f64" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f65" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f66" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f67" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f68" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f69" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f70" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f71" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f72" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f73" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f74" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f75" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f76" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f77" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f78" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f79" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f80" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f81" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f82" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f83" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f84" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f85" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f86" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f87" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f88" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f89" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f90" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f91" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f92" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f93" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f94" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f95" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f96" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f97" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f98" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f99" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f100" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f101" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f102" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f103" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f104" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f105" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f106" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f107" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f108" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f109" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f110" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f111" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f112" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f113" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f114" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f115" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f116" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f117" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f118" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f119" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f120" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f121" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f122" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f123" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f124" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f125" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f126" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f127" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f128" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f129" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f130" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f131" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f132" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f133" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f134" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f135" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f136" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f137" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f138" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f139" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f140" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f141" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f142" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f143" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f144" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f145" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f146" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f147" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f148" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f149" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f150" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f151" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f152" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f153" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f154" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f155" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f156" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f157" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f158" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f159" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f160" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f161" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f162" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f163" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f164" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f165" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f166" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f167" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f168" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f169" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f170" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f171" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f172" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f173" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f174" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f175" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f176" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f177" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f178" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f179" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f180" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f181" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f182" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f183" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f184" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f185" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f186" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f187" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f188" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f189" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f190" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f191" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f192" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f193" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f194" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f195" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f196" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f197" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f198" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f199" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f200" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f201" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f202" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f203" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f204" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f205" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f206" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f207" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f208" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f209" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f210" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f211" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f212" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f213" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f214" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f215" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f216" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f217" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f218" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f219" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f220" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f221" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f222" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f223" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f224" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f225" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f226" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f227" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f228" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f229" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f230" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f231" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f232" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f233" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f234" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f235" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f236" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f237" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f238" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f239" -> Association["Type" -> "Boolean", "Weight" -> 1], 
                   "f240" -> Association["Type" -> "Boolean", "Weight" -> 1]],
                  "Output" -> 
                 Association[
                  "(f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f\
23f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f\
49f50f51f52f53f54f55f56f57f58f59f60f61f62f63f64f65f66f67f68f69f70f71f72f73f74f\
75f76f77f78f79f80f81f82f83f84f85f86f87f88f89f90f91f92f93f94f95f96f97f98f99f100\
f101f102f103f104f105f106f107f108f109f110f111f112f113f114f115f116f117f118f119f1\
20f121f122f123f124f125f126f127f128f129f130f131f132f133f134f135f136f137f138f139\
f140f141f142f143f144f145f146f147f148f149f150f151f152f153f154f155f156f157f158f1\
59f160f161f162f163f164f165f166f167f168f169f170f171f172f173f174f175f176f177f178\
f179f180f181f182f183f184f185f186f187f188f189f190f191f192f193f194f195f196f197f1\
98f199f200f201f202f203f204f205f206f207f208f209f210f211f212f213f214f215f216f217\
f218f219f220f221f222f223f224f225f226f227f228f229f230f231f232f233f234f235f236f2\
37f238f239f240)" -> Association["Type" -> "BooleanVector", "Weight" -> 240]], 
                 "Version" -> {11.3, 0}, "ID" -> 7184641084815720566]]}, 
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
           MachineLearning`MLProcessor["ConformBooleanVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f2\
4f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f5\
0f51f52f53f54f55f56f57f58f59f60f61f62f63f64f65f66f67f68f69f70f71f72f73f74f75f7\
6f77f78f79f80f81f82f83f84f85f86f87f88f89f90f91f92f93f94f95f96f97f98f99f100f101\
f102f103f104f105f106f107f108f109f110f111f112f113f114f115f116f117f118f119f120f1\
21f122f123f124f125f126f127f128f129f130f131f132f133f134f135f136f137f138f139f140\
f141f142f143f144f145f146f147f148f149f150f151f152f153f154f155f156f157f158f159f1\
60f161f162f163f164f165f166f167f168f169f170f171f172f173f174f175f176f177f178f179\
f180f181f182f183f184f185f186f187f188f189f190f191f192f193f194f195f196f197f198f1\
99f200f201f202f203f204f205f206f207f208f209f210f211f212f213f214f215f216f217f218\
f219f220f221f222f223f224f225f226f227f228f229f230f231f232f233f234f235f236f237f2\
38f239f240)" -> Association["Type" -> "BooleanVector", "Weight" -> 240]], 
             "Version" -> {11.3, 0}, "ID" -> 2960573349934491056, "Output" -> 
             Association[
              "(f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f2\
4f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f5\
0f51f52f53f54f55f56f57f58f59f60f61f62f63f64f65f66f67f68f69f70f71f72f73f74f75f7\
6f77f78f79f80f81f82f83f84f85f86f87f88f89f90f91f92f93f94f95f96f97f98f99f100f101\
f102f103f104f105f106f107f108f109f110f111f112f113f114f115f116f117f118f119f120f1\
21f122f123f124f125f126f127f128f129f130f131f132f133f134f135f136f137f138f139f140\
f141f142f143f144f145f146f147f148f149f150f151f152f153f154f155f156f157f158f159f1\
60f161f162f163f164f165f166f167f168f169f170f171f172f173f174f175f176f177f178f179\
f180f181f182f183f184f185f186f187f188f189f190f191f192f193f194f195f196f197f198f1\
99f200f201f202f203f204f205f206f207f208f209f210f211f212f213f214f215f216f217f218\
f219f220f221f222f223f224f225f226f227f228f229f230f231f232f233f234f235f236f237f2\
38f239f240)" -> Association["Type" -> "BooleanVector", "Weight" -> 240]]]], 
           MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f2\
4f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f5\
0f51f52f53f54f55f56f57f58f59f60f61f62f63f64f65f66f67f68f69f70f71f72f73f74f75f7\
6f77f78f79f80f81f82f83f84f85f86f87f88f89f90f91f92f93f94f95f96f97f98f99f100f101\
f102f103f104f105f106f107f108f109f110f111f112f113f114f115f116f117f118f119f120f1\
21f122f123f124f125f126f127f128f129f130f131f132f133f134f135f136f137f138f139f140\
f141f142f143f144f145f146f147f148f149f150f151f152f153f154f155f156f157f158f159f1\
60f161f162f163f164f165f166f167f168f169f170f171f172f173f174f175f176f177f178f179\
f180f181f182f183f184f185f186f187f188f189f190f191f192f193f194f195f196f197f198f1\
99f200f201f202f203f204f205f206f207f208f209f210f211f212f213f214f215f216f217f218\
f219f220f221f222f223f224f225f226f227f228f229f230f231f232f233f234f235f236f237f2\
38f239f240)" -> Association["Type" -> "BooleanVector", "Weight" -> 240]], 
             "Version" -> {11.3, 0}, "ID" -> 5064103867775877045, "Output" -> 
             Association[
              "(f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f2\
4f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f5\
0f51f52f53f54f55f56f57f58f59f60f61f62f63f64f65f66f67f68f69f70f71f72f73f74f75f7\
6f77f78f79f80f81f82f83f84f85f86f87f88f89f90f91f92f93f94f95f96f97f98f99f100f101\
f102f103f104f105f106f107f108f109f110f111f112f113f114f115f116f117f118f119f120f1\
21f122f123f124f125f126f127f128f129f130f131f132f133f134f135f136f137f138f139f140\
f141f142f143f144f145f146f147f148f149f150f151f152f153f154f155f156f157f158f159f1\
60f161f162f163f164f165f166f167f168f169f170f171f172f173f174f175f176f177f178f179\
f180f181f182f183f184f185f186f187f188f189f190f191f192f193f194f195f196f197f198f1\
99f200f201f202f203f204f205f206f207f208f209f210f211f212f213f214f215f216f217f218\
f219f220f221f222f223f224f225f226f227f228f229f230f231f232f233f234f235f236f237f2\
38f239f240)" -> Association["Type" -> "NumericalVector", "Weight" -> 240]]]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f241" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1], 
               "(f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f\
24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f\
50f51f52f53f54f55f56f57f58f59f60f61f62f63f64f65f66f67f68f69f70f71f72f73f74f75f\
76f77f78f79f80f81f82f83f84f85f86f87f88f89f90f91f92f93f94f95f96f97f98f99f100f10\
1f102f103f104f105f106f107f108f109f110f111f112f113f114f115f116f117f118f119f120f\
121f122f123f124f125f126f127f128f129f130f131f132f133f134f135f136f137f138f139f14\
0f141f142f143f144f145f146f147f148f149f150f151f152f153f154f155f156f157f158f159f\
160f161f162f163f164f165f166f167f168f169f170f171f172f173f174f175f176f177f178f17\
9f180f181f182f183f184f185f186f187f188f189f190f191f192f193f194f195f196f197f198f\
199f200f201f202f203f204f205f206f207f208f209f210f211f212f213f214f215f216f217f21\
8f219f220f221f222f223f224f225f226f227f228f229f230f231f232f233f234f235f236f237f\
238f239f240)" -> Association["Type" -> "NumericalVector", "Weight" -> 240]], 
             "Spans" -> {
               Span[1, 1], 
               Span[2, 241]}, "Wrappers" -> {Identity, Identity}, "Output" -> 
             Association[
              "(f241(f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22\
f23f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48\
f49f50f51f52f53f54f55f56f57f58f59f60f61f62f63f64f65f66f67f68f69f70f71f72f73f74\
f75f76f77f78f79f80f81f82f83f84f85f86f87f88f89f90f91f92f93f94f95f96f97f98f99f10\
0f101f102f103f104f105f106f107f108f109f110f111f112f113f114f115f116f117f118f119f\
120f121f122f123f124f125f126f127f128f129f130f131f132f133f134f135f136f137f138f13\
9f140f141f142f143f144f145f146f147f148f149f150f151f152f153f154f155f156f157f158f\
159f160f161f162f163f164f165f166f167f168f169f170f171f172f173f174f175f176f177f17\
8f179f180f181f182f183f184f185f186f187f188f189f190f191f192f193f194f195f196f197f\
198f199f200f201f202f203f204f205f206f207f208f209f210f211f212f213f214f215f216f21\
7f218f219f220f221f222f223f224f225f226f227f228f229f230f231f232f233f234f235f236f\
237f238f239f240))" -> Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGD4yAADH+xH6VF6lB6lR+lRepSmPw0Ap+Af6g==
                  "], "Type" -> "NumericalVector"]], "Version" -> {11.3, 0}, 
             "ID" -> 6309568589788882070]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "(f241(f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22\
f23f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48\
f49f50f51f52f53f54f55f56f57f58f59f60f61f62f63f64f65f66f67f68f69f70f71f72f73f74\
f75f76f77f78f79f80f81f82f83f84f85f86f87f88f89f90f91f92f93f94f95f96f97f98f99f10\
0f101f102f103f104f105f106f107f108f109f110f111f112f113f114f115f116f117f118f119f\
120f121f122f123f124f125f126f127f128f129f130f131f132f133f134f135f136f137f138f13\
9f140f141f142f143f144f145f146f147f148f149f150f151f152f153f154f155f156f157f158f\
159f160f161f162f163f164f165f166f167f168f169f170f171f172f173f174f175f176f177f17\
8f179f180f181f182f183f184f185f186f187f188f189f190f191f192f193f194f195f196f197f\
198f199f200f201f202f203f204f205f206f207f208f209f210f211f212f213f214f215f216f21\
7f218f219f220f221f222f223f224f225f226f227f228f229f230f231f232f233f234f235f236f\
237f238f239f240))" -> Association["Weight" -> CompressedData["
1:eJxTTMoPSmVkYGD4yAADH+xH6VF6lB6lR+lRepSmPw0Ap+Af6g==
                  "], "Type" -> "NumericalVector"]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 300, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> CompressedData["
1:eJx1lT9I20EUxyOKhYJDQemgCA6WCIpbhRS5bAqVFJ0cFCWi4GBtoRRxsCi0
KB0UBZ2EQgc7FSoKOgmCg6KgOIgm+eX3iw4FS0XFQqGIdz/4vMD70YPkuLv3
3vfPvVzq0qNdgyWxWOzaftLv5+6HxlaTr78clydGfFP1vS0Yr/RMx8SPi6cv
PdNyOFy6/Nw3jxIjNqJgeme37+I9eTOVqv65NumZWDh8Q34muVLx7sw3T8IR
yPle8+K/9G7eFMYrLcKZ2az9eNm54cn8J95jK/vm6rcbntQhDz7PtrpvPtdH
1zWWTaral3V/49+d+b6s8Ai3t3xza7+7bzKCiz50sY9e1uTDh/lt6+OTr29y
gstax1P/m1WVXMmJX/DU+wf7bmRF1wcndyIQ37kn+GmcVy4sdS7+42vXhkso
3hf68QkdTY5WY2Bmpt3wBYc19+PlwhHxAT0LfU5gXnCO3HR4KvypAz/y0Us+
990ehA0k/lIX/fgDT+KW7GnzYlZ04IPO0/3ITD344fPAritQ7HP8+NXpAALB
oS44+A1/7oNz+k/3Ff2AL+w3OJrxrOCVWZeHS3Oyhj/74KCPNXj4zDn+gUtd
8rg/dOp+Ahe96CAfP/GRPPA4pw79Qzz1iMP///UXeboO/cC94hs8OQePfPod
fdwHcfDg/aMe+sChz+ecjNlC5J1hrd8XeOj3h7qfLp0hmUg/8c6gnzx8pA/o
T/0+sw9v9KxPOoFB5J71u8s5fOBBPv1HffqO/BfuZ5Io9oP+Hen/JeKpgz58
xB/wwQEfX3Q85+gAT78L2k/yHgB4bcsU
                    "], "Method" -> "Naive", "VectorLength" -> 241, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> CompressedData["
1:eJx1lT9I20EUxyOKhYJDQemgCA6WCIpbhRS5bAqVFJ0cFCWi4GBtoRRxsCi0
KB0UBZ2EQgc7FSoKOgmCg6KgOIgm+eX3iw4FS0XFQqGIdz/4vMD70YPkuLv3
3vfPvVzq0qNdgyWxWOzaftLv5+6HxlaTr78clydGfFP1vS0Yr/RMx8SPi6cv
PdNyOFy6/Nw3jxIjNqJgeme37+I9eTOVqv65NumZWDh8Q34muVLx7sw3T8IR
yPle8+K/9G7eFMYrLcKZ2az9eNm54cn8J95jK/vm6rcbntQhDz7PtrpvPtdH
1zWWTaral3V/49+d+b6s8Ai3t3xza7+7bzKCiz50sY9e1uTDh/lt6+OTr29y
gstax1P/m1WVXMmJX/DU+wf7bmRF1wcndyIQ37kn+GmcVy4sdS7+42vXhkso
3hf68QkdTY5WY2Bmpt3wBYc19+PlwhHxAT0LfU5gXnCO3HR4KvypAz/y0Us+
990ehA0k/lIX/fgDT+KW7GnzYlZ04IPO0/3ITD344fPAritQ7HP8+NXpAALB
oS44+A1/7oNz+k/3Ff2AL+w3OJrxrOCVWZeHS3Oyhj/74KCPNXj4zDn+gUtd
8rg/dOp+Ahe96CAfP/GRPPA4pw79Qzz1iMP///UXeboO/cC94hs8OQePfPod
fdwHcfDg/aMe+sChz+ecjNlC5J1hrd8XeOj3h7qfLp0hmUg/8c6gnzx8pA/o
T/0+sw9v9KxPOoFB5J71u8s5fOBBPv1HffqO/BfuZ5Io9oP+Hen/JeKpgz58
xB/wwQEfX3Q85+gAT78L2k/yHgB4bcsU
                    "], "StandardDeviation" -> CompressedData["
1:eJx1lTFoU1EUhp+kXbsEJTZFEKyQweog4mC5muDiUqgtWZwsoeSJlBYpoUTp
UBAnB0NDlUIp6CIlm5iKIQQVRCpkcWq5Ftqhg7SBQKy2apD35cIfXiBc7r3n
P+c//z3nvLN3p0YzJzzPa7T/R/mxYm1+5XqiuXzl1LE1qZ995eGGNR/PLSTT
TWvun+kt3PxrzUFk43xPxZreX9HHd/5Y4xeeX4q2rPH+/74b8OAO11u5Tz/c
vXd6MlNv+4mPvb83u2jNqyfjL6YP3UrctXS+OPPb+QHHXuOwx459/KQfu/rF
8cgGfMmDuORHXpyrHXjisL5eyqUruy4ue7XH/63bbyYae9089fzl2887+98c
PvIoURvedLqjF/w0ztOvD2YGR5z+6Mo9ccgfnTiHDzji6PuAUx3A45/1WfXa
yHSmu87wC558wWGn+nJP/uiDP+wexmqTqbrLAx0Up/WodQk/8Mm5gYsXtp3O
6DFUXq1ufOiuK+JgB3/8+lKnWlfwBce5xkM/9vAPqyP2Go979NN+Ub3JU+tJ
31N177yHzBONhx946XzBDj3C6gtcmB/eFZwf0v/gtd6Jr/OL+edL/Wpf9Qd2
OmfY63yBh/YHfktb7y6PlrrftzNngvyz8h7a18pT5zH5UC9h/aV10Mkv4AFe
5wS8wN8I3gk77SPlh73mp98PrXeNr/Y6nzrfL5kLqid2/wC/bNKJ
                    "], "Method" -> "NaiveSampler", "VectorLength" -> 241, 
                   "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 241]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                   True, "Invertibility" -> "Perfect", "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 92]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                "Model" -> Association["Matrix" -> CompressedData["
1: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
J2B0aBhZlxYU4976w9h94tymRAPYCOczSFUkQg+hoPpOaDjIqPVcvOvri97f
3s4npDWit51Z8u9BZ6DekdnOuTcZ/MItU3+KNWJshe5jy8MU3Lja+V1Jpwxj
nI9ZM57Ox9+6t7KP3cnEdv+N+VddndjxL8g0k0sXoszULQzts8GjUiK49+8R
sP9DfGuoQ8SGgYc6QSKp8EvaL0H3ChFZD+W/9V5IAjlK+d47lcbwJMf4euYb
ErCKjgQ0/24Efv4dwVWHG1Dra0LWebUYYBlxU5ysQvhvSupFsSQJxr7nFN9V
JQJdkEoJvuiAD4qpsQwJRJAUdOAfbuwFzfc7/Hk+kSAvTeh5HJMXyiQGTdX0
tEJVUmvEbVIx/mS9y3xFsw0eOlyO3PuwGtibPIWYTMrBLeD54C/rTtQbmpXv
GmxAvUwrmcvqlbD5VmT1TH0a6j32aHj4DnH1bIUSx3ICLKn/MyzZQcH8mfKh
4eUWmOURPJjWXYo1vv9YDiemoeRl6dWGgERwOLz7sPsKCYlek8yJ9fXolPnT
jMeuAl9O9LZ6m7fBYX6HY8oxZRit67pX/lc9fssQ1l/Ii0fGncG1aiF2eMPN
8cHtMx2gZX1Azrq/FKkjMcF8koJGlgunOv8VwBO32y2sKpWQMMZP/pcTAmvE
2eY3YgUgbrGV6TSVgYn335sIcpOQKbnQNoGQgjcqxtOeqMRgnmeYt/YPJfD8
FDuaAx3w5GbNnXc92x7ukhfyfa4OFWzlXwZ6iiG7EuvlgyqlUHGWk9H7VQFI
RjYx5XE1I59Qt9ZHliAM6UneaX+gACYPqe2xDQ5Gdh+XF5zxfnAaFLnrGVJQ
t6M5Oa2vDP9lBZ4z/1KBc8NBZbE6tVArQS7eY10ItcrDhY4NlfiP5rjDC3IB
fqMSdh7a3pNBmXA5ozd5cOjPXqPXXwlwHjxbman7Qfqc+MvePSQwfCBeVa4Q
A2/rTSxN//WgedH8C8fBWCT0Rhwe72zCJhPbrS93itHltXTKWncbXjiddvLS
Nkft+dwip0FPRMvn0sPSlghXncxsPwfm4hD9phhddAykPDoqya/8CDkbt0QB
i9Ff8r/uJVIZfN2hZ+Q2EQ+ar+5uTj2owE4RGeVr8Sk4cVGX1uZVFUgd27Wv
KT8Pz8Z5FOTSELGyrJvy5U4dyrtUdK0VpeGJFFYPkmAoCh751iNoXoapkxWr
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
q9VSDkTvLu1XNirCx0q73jeN1aB63HJDzedy6H9wTeGCui/4ugid3CUWB75r
LGn73jhBrjnKTDTWQJmz1cbZyFhk7n14IIe8xQlrd0IjjznAwJuFjJu0W75m
mHth5z93YCAc2W1ZkA8hiYXDHDZbfSRG/H7dqxD1RZJ2hxV1gnmi32nXs52Y
pbvsmdkWDrITJGIToQJMapjilGSbkW20b4HMmAD/jZ07s287BSa8Nr89whwI
q+sKuFDcCHoSD64/GC7EHv3AJ7iWjh2V139KcTjgSEBCyKJZNWoZ7GETm/VG
ydBYK7e0TPBx0A1h4gjHJ7t0q1N7KeBvWe48N14HXs483RIfifCZ7Zp523oi
WrpGqW5+yoHxh7aetedzoC0167jzPzK0qC3RM8R3455dzGVq/e5IP3jrTO7O
OKzxUuBUVWqCkf6CG9u2PJWmz4LfZSAbQrW0Zt49yQcmEZp3AUJRaNNs8Ghk
noLvKO8C7DPzYF+XitaHs3kwy2wrmbuQDB6MAg/1+sggYy3FNHa1EZ/PFiub
VlfjZZGTZtT3ueixn4e693E1hL5h1JXuDwSjgtT30xRH4BcP+nrVkARnyhO8
tWdCgX81j1NMCZGtOy1qsDEDL276qTl8zMZ4zZ7BcxwJ4FyVoMEqkgTgLuxk
+ZEM3ts2NwcfP0ZmYZ6zZkPN+BgP++0VyIcqJvrKTMkoOJt5rrumugG6TxxQ
W/QMhYKRkvNdx4vQ4kuClKJTIqxp5ipcsngKdvvSgt9uEvDO0eH7Xf4ZOPE0
UcDBIQ8TUxmG5PaQUXxpgUv/sR+4H7HmzWSpBJLM2o6PlCgs8F/qPhrSiAuz
jDPcL1thRILJUdYhCCbejN8TPWwPZ3vWVy6I5MGta8VOgpLFyLP+IijuxBZ/
4+0pjgsU+KHxpenGV094ONV5WphDFcMXZl8crAmF+zUp3jdqIlE5ie2U8AYJ
xRtShslHMvCWNtX1cxEFfRjfnGC+Wo10Mimeltv9Qa+fzdj/RjXGtb2TeGBR
AZf0VlZICXl4IdJKlv16PtIxVbIJnMhCkaoPN7NdiuDXON1r2r9UsBtcaYoc
agGRt7KZHmpEVJSYtInoDkZG+wMb431JKKk6Wy5v641LdMxC9WPlKJDx91ea
XziWTZqnfWFqBc3DzQevjuZB8r4LDYntRBTXsflHGnuIchEzvlTDCkiUnLmr
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
k9c=
                   "], "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJx1lT9I20EUxyOKhYJDQemgCA6WCIpbhRS5bAqVFJ0cFCWi4GBtoRRxsCi0
KB0UBZ2EQgc7FSoKOgmCg6KgOIgm+eX3iw4FS0XFQqGIdz/4vMD70YPkuLv3
3vfPvVzq0qNdgyWxWOzaftLv5+6HxlaTr78clydGfFP1vS0Yr/RMx8SPi6cv
PdNyOFy6/Nw3jxIjNqJgeme37+I9eTOVqv65NumZWDh8Q34muVLx7sw3T8IR
yPle8+K/9G7eFMYrLcKZ2az9eNm54cn8J95jK/vm6rcbntQhDz7PtrpvPtdH
1zWWTaral3V/49+d+b6s8Ai3t3xza7+7bzKCiz50sY9e1uTDh/lt6+OTr29y
gstax1P/m1WVXMmJX/DU+wf7bmRF1wcndyIQ37kn+GmcVy4sdS7+42vXhkso
3hf68QkdTY5WY2Bmpt3wBYc19+PlwhHxAT0LfU5gXnCO3HR4KvypAz/y0Us+
990ehA0k/lIX/fgDT+KW7GnzYlZ04IPO0/3ITD344fPAritQ7HP8+NXpAALB
oS44+A1/7oNz+k/3Ff2AL+w3OJrxrOCVWZeHS3Oyhj/74KCPNXj4zDn+gUtd
8rg/dOp+Ahe96CAfP/GRPPA4pw79Qzz1iMP///UXeboO/cC94hs8OQePfPod
fdwHcfDg/aMe+sChz+ecjNlC5J1hrd8XeOj3h7qfLp0hmUg/8c6gnzx8pA/o
T/0+sw9v9KxPOoFB5J71u8s5fOBBPv1HffqO/BfuZ5Io9oP+Hen/JeKpgz58
xB/wwQEfX3Q85+gAT78L2k/yHgB4bcsU
                    "], "StandardDeviation" -> CompressedData["
1:eJx1lTFoU1EUhp+kXbsEJTZFEKyQweog4mC5muDiUqgtWZwsoeSJlBYpoUTp
UBAnB0NDlUIp6CIlm5iKIQQVRCpkcWq5Ftqhg7SBQKy2apD35cIfXiBc7r3n
P+c//z3nvLN3p0YzJzzPa7T/R/mxYm1+5XqiuXzl1LE1qZ995eGGNR/PLSTT
TWvun+kt3PxrzUFk43xPxZreX9HHd/5Y4xeeX4q2rPH+/74b8OAO11u5Tz/c
vXd6MlNv+4mPvb83u2jNqyfjL6YP3UrctXS+OPPb+QHHXuOwx459/KQfu/rF
8cgGfMmDuORHXpyrHXjisL5eyqUruy4ue7XH/63bbyYae9089fzl2887+98c
PvIoURvedLqjF/w0ztOvD2YGR5z+6Mo9ccgfnTiHDzji6PuAUx3A45/1WfXa
yHSmu87wC558wWGn+nJP/uiDP+wexmqTqbrLAx0Up/WodQk/8Mm5gYsXtp3O
6DFUXq1ufOiuK+JgB3/8+lKnWlfwBce5xkM/9vAPqyP2Go979NN+Ub3JU+tJ
31N177yHzBONhx946XzBDj3C6gtcmB/eFZwf0v/gtd6Jr/OL+edL/Wpf9Qd2
OmfY63yBh/YHfktb7y6PlrrftzNngvyz8h7a18pT5zH5UC9h/aV10Mkv4AFe
5wS8wN8I3gk77SPlh73mp98PrXeNr/Y6nzrfL5kLqid2/wC/bNKJ
                    "], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 92, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.026991, "MaxTrainingMemory" -> 2099168, 
                  "DataMemory" -> 578552, "FunctionMemory" -> 218224, 
                  "LanguageVersion" -> {11.3, 0}, "Date" -> 
                  DateObject[{
                    2019, 4, 4, 17, 12, 48.2356539`9.43594302859207}, 
                    "Instant", "Gregorian", -6.], "ProcessorCount" -> 10, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 241, "Output" -> 
             Association[
              "(f241(f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22\
f23f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48\
f49f50f51f52f53f54f55f56f57f58f59f60f61f62f63f64f65f66f67f68f69f70f71f72f73f74\
f75f76f77f78f79f80f81f82f83f84f85f86f87f88f89f90f91f92f93f94f95f96f97f98f99f10\
0f101f102f103f104f105f106f107f108f109f110f111f112f113f114f115f116f117f118f119f\
120f121f122f123f124f125f126f127f128f129f130f131f132f133f134f135f136f137f138f13\
9f140f141f142f143f144f145f146f147f148f149f150f151f152f153f154f155f156f157f158f\
159f160f161f162f163f164f165f166f167f168f169f170f171f172f173f174f175f176f177f17\
8f179f180f181f182f183f184f185f186f187f188f189f190f191f192f193f194f195f196f197f\
198f199f200f201f202f203f204f205f206f207f208f209f210f211f212f213f214f215f216f21\
7f218f219f220f221f222f223f224f225f226f227f228f229f230f231f232f233f234f235f236f\
237f238f239f240))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 241.]], 
             "Type" -> "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
             6647517985228922276]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f241(f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22\
f23f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48\
f49f50f51f52f53f54f55f56f57f58f59f60f61f62f63f64f65f66f67f68f69f70f71f72f73f74\
f75f76f77f78f79f80f81f82f83f84f85f86f87f88f89f90f91f92f93f94f95f96f97f98f99f10\
0f101f102f103f104f105f106f107f108f109f110f111f112f113f114f115f116f117f118f119f\
120f121f122f123f124f125f126f127f128f129f130f131f132f133f134f135f136f137f138f13\
9f140f141f142f143f144f145f146f147f148f149f150f151f152f153f154f155f156f157f158f\
159f160f161f162f163f164f165f166f167f168f169f170f171f172f173f174f175f176f177f17\
8f179f180f181f182f183f184f185f186f187f188f189f190f191f192f193f194f195f196f197f\
198f199f200f201f202f203f204f205f206f207f208f209f210f211f212f213f214f215f216f21\
7f218f219f220f221f222f223f224f225f226f227f228f229f230f231f232f233f234f235f236f\
237f238f239f240))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 241.]], 
             "Mean" -> CompressedData["
1:eJx1lT9I20EUxyOKhYJDQemgCA6WCIpbhRS5bAqVFJ0cFCWi4GBtoRRxsCi0
KB0UBZ2EQgc7FSoKOgmCg6KgOIgm+eX3iw4FS0XFQqGIdz/4vMD70YPkuLv3
3vfPvVzq0qNdgyWxWOzaftLv5+6HxlaTr78clydGfFP1vS0Yr/RMx8SPi6cv
PdNyOFy6/Nw3jxIjNqJgeme37+I9eTOVqv65NumZWDh8Q34muVLx7sw3T8IR
yPle8+K/9G7eFMYrLcKZ2az9eNm54cn8J95jK/vm6rcbntQhDz7PtrpvPtdH
1zWWTaral3V/49+d+b6s8Ai3t3xza7+7bzKCiz50sY9e1uTDh/lt6+OTr29y
gstax1P/m1WVXMmJX/DU+wf7bmRF1wcndyIQ37kn+GmcVy4sdS7+42vXhkso
3hf68QkdTY5WY2Bmpt3wBYc19+PlwhHxAT0LfU5gXnCO3HR4KvypAz/y0Us+
990ehA0k/lIX/fgDT+KW7GnzYlZ04IPO0/3ITD344fPAritQ7HP8+NXpAALB
oS44+A1/7oNz+k/3Ff2AL+w3OJrxrOCVWZeHS3Oyhj/74KCPNXj4zDn+gUtd
8rg/dOp+Ahe96CAfP/GRPPA4pw79Qzz1iMP///UXeboO/cC94hs8OQePfPod
fdwHcfDg/aMe+sChz+ecjNlC5J1hrd8XeOj3h7qfLp0hmUg/8c6gnzx8pA/o
T/0+sw9v9KxPOoFB5J71u8s5fOBBPv1HffqO/BfuZ5Io9oP+Hen/JeKpgz58
xB/wwQEfX3Q85+gAT78L2k/yHgB4bcsU
              "], "StandardDeviation" -> CompressedData["
1:eJx1lTFoU1EUhp+kXbsEJTZFEKyQweog4mC5muDiUqgtWZwsoeSJlBYpoUTp
UBAnB0NDlUIp6CIlm5iKIQQVRCpkcWq5Ftqhg7SBQKy2apD35cIfXiBc7r3n
P+c//z3nvLN3p0YzJzzPa7T/R/mxYm1+5XqiuXzl1LE1qZ995eGGNR/PLSTT
TWvun+kt3PxrzUFk43xPxZreX9HHd/5Y4xeeX4q2rPH+/74b8OAO11u5Tz/c
vXd6MlNv+4mPvb83u2jNqyfjL6YP3UrctXS+OPPb+QHHXuOwx459/KQfu/rF
8cgGfMmDuORHXpyrHXjisL5eyqUruy4ue7XH/63bbyYae9089fzl2887+98c
PvIoURvedLqjF/w0ztOvD2YGR5z+6Mo9ccgfnTiHDzji6PuAUx3A45/1WfXa
yHSmu87wC558wWGn+nJP/uiDP+wexmqTqbrLAx0Up/WodQk/8Mm5gYsXtp3O
6DFUXq1ufOiuK+JgB3/8+lKnWlfwBce5xkM/9vAPqyP2Go979NN+Ub3JU+tJ
31N177yHzBONhx946XzBDj3C6gtcmB/eFZwf0v/gtd6Jr/OL+edL/Wpf9Qd2
OmfY63yBh/YHfktb7y6PlrrftzNngvyz8h7a18pT5zH5UC9h/aV10Mkv4AFe
5wS8wN8I3gk77SPlh73mp98PrXeNr/Y6nzrfL5kLqid2/wC/bNKJ
              "], "Output" -> 
             Association[
              "(f241(f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22\
f23f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48\
f49f50f51f52f53f54f55f56f57f58f59f60f61f62f63f64f65f66f67f68f69f70f71f72f73f74\
f75f76f77f78f79f80f81f82f83f84f85f86f87f88f89f90f91f92f93f94f95f96f97f98f99f10\
0f101f102f103f104f105f106f107f108f109f110f111f112f113f114f115f116f117f118f119f\
120f121f122f123f124f125f126f127f128f129f130f131f132f133f134f135f136f137f138f13\
9f140f141f142f143f144f145f146f147f148f149f150f151f152f153f154f155f156f157f158f\
159f160f161f162f163f164f165f166f167f168f169f170f171f172f173f174f175f176f177f17\
8f179f180f181f182f183f184f185f186f187f188f189f190f191f192f193f194f195f196f197f\
198f199f200f201f202f203f204f205f206f207f208f209f210f211f212f213f214f215f216f21\
7f218f219f220f221f222f223f224f225f226f227f228f229f230f231f232f233f234f235f236f\
237f238f239f240))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 241.]], 
             "Version" -> {11.3, 0}, "ID" -> 5839351075552015063]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 5670373434037548305]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[1 -> 1, 2 -> 2, 3 -> 3]}, "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 4014856558673524135, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 5141443666621982786]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[
       1 -> 0.3333333333333333, 2 -> 0.3333333333333333, 3 -> 
        0.3333333333333333]], "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {3, 4}, 0., {
      1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0, 
    "TieBreaker" -> RandomChoice, "PerformanceGoal" -> Automatic, 
    "BatchProcessing" -> Automatic, "Model" -> Association["Trees" -> {
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.5533822774887085, 
            0.058756135404109955`, -1.1012853384017944`}], "LeafValues" -> 
          RawArray["Real32",{
            0.05372093245387077, -0.004285714589059353, \
-0.030000001192092896`, 0.0274468082934618}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {-1, -4}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 1, 85}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 
            1.0318546295166016`, -0.5735495090484619, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.025813953951001167`, 
            0., -0.015483871102333069`, 0.006818181835114956, 
            0.03847826272249222}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, 4}, {-4, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 241, 1, 23}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.7759479880332947, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.0260869562625885, 0.026511628180742264`, 
            0.05372093245387077, -0.008478260599076748, \
-0.030000001192092896`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 1, 85}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.5533822774887085, 
            0.058756135404109955`, -1.1012853384017944`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{
            0.0507768914103508, -0.004142955876886845, -0.02959340065717697, 
            0.026257118210196495`, -0.029520388692617416`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 4}, {-1, -4}, {-3, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 1, 85}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 
            1.0318546295166016`, -0.5735495090484619, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.02537056803703308, -3.7587917631753953`*^-6, \
-0.015166934579610825`, 0.006489981431514025, 0.036904774606227875`}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {-2, 4}, {-4, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 241, 1, 26}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.7759479880332947, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.029589325189590454`, 0.025286469608545303`, 
            0.051083121448755264`, -0.00830367673188448, \
-0.025615012273192406`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 1, 85}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.5533822774887085, 
            0.058756135404109955`, -1.1012853384017944`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{
            0.04815434291958809, -0.003998165484517813, \
-0.029210718348622322`, 0.02515030838549137, -0.029073577374219894`}], 
          "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 4}, {-1, -4}, {-3, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 56, 155}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 1.0318546295166016`, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.024942442774772644`, -0.008084986358880997, \
-0.014849470928311348`, 0.024979690089821815`, 0.01767517812550068}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, -4}, {-2, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 241, 1, 26}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.7759479880332947, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.029184825718402863`, 0.02414434589445591, 
            0.048723749816417694`, -0.008128988556563854, \
-0.025188054889440536`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 1, 241}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.5533822774887085, 
            0.058756135404109955`, -1.1012853384017944`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{
            0.04581040143966675, -0.0039337025955319405`, \
-0.028883470222353935`, 0.024333717301487923`, -0.02867509052157402}], 
          "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 4}, {-1, -4}, {-3, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 152, 16, 232}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 1.1255943775177002`, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.024526430293917656`, -0.007530435919761658, \
-0.01806379295885563, 0.032145947217941284`, 0.01492537185549736, 
            0.012483960017561913`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 
            5}, {-2, -5}, {-4, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 241, 1, 23}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.5759793519973755, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.024733608588576317`, 0.02267797850072384, 
            0.04373553395271301, -0.009769127704203129, -0.0287909135222435}],
           "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 1, 241}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.5533822774887085, 
            0.058756135404109955`, -1.1012853384017944`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{
            0.04371029511094093, -0.003895072964951396, -0.02855123020708561, 
            0.023522084578871727`, -0.028293337672948837`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 4}, {-1, -4}, {-3, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 152, 16, 232}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 1.1255943775177002`, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.0241197869181633, -0.007484150119125843, \
-0.017727702856063843`, 0.031051691621541977`, 0.014439753256738186`, 
            0.012148113921284676`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 
            5}, {-2, -5}, {-4, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 126, 1, 12}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.7759479880332947, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.02436039410531521, 0.04743305221199989, 
            0.023476440459489822`, -0.007956823334097862, \
-0.02845221385359764}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 1, 1, 241}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.5533822774887085, 
            0.058756135404109955`, -1.1012853384017944`, 0.8457717299461365, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{
            0.0418105274438858, -0.003848609747365117, -0.028278226032853127`,
             0.022760597988963127`, -0.02816610224545002, \
-0.02781580574810505}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 4}, {-1, -4}, {-3, 
            5}, {-5, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 152, 16, 232}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 1.1255943775177002`, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.023724814876914024`, -0.00743061164394021, \
-0.017389357089996338`, 0.02998821623623371, 0.014009946025907993`, 
            0.011818804778158665`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 
            5}, {-2, -5}, {-4, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 241, 1, 170}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.5759793519973755, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.02808079496026039, 0.020548449829220772`, 
            0.040597233921289444`, -0.009506689384579659, \
-0.023912210017442703`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 1, 1, 241}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.5533822774887085, 
            0.058756135404109955`, -1.1012853384017944`, 0.8457717299461365, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{
            0.040081050246953964`, -0.003805650630965829, \
-0.027989398688077927`, 
            0.022043565288186073`, -0.027862923219799995`, \
-0.027456143870949745`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 4}, {-1, -4}, {-3, 
            5}, {-5, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 152, 16, 232}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 1.1255943775177002`, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.023341694846749306`, -0.0073767355643212795`, \
-0.01705700345337391, 0.029039887711405754`, 0.013569002039730549`, 
            0.011514567770063877`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 
            5}, {-2, -5}, {-4, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 126, 1, 12}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.7759479880332947, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.023570699617266655`, 0.04414619877934456, 
            0.021399198099970818`, -0.007778341416269541, \
-0.02778289094567299}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 1, 1, 241}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.5533822774887085, 
            0.058756135404109955`, -1.1012853384017944`, 0.8457717299461365, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{
            0.03850782290101051, -0.0037567017134279013`, \
-0.027729667723178864`, 
            0.02136431448161602, -0.027528733015060425`, \
-0.0271531343460083}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 4}, {-1, -4}, {-3, 
            5}, {-5, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 169, 241, 43}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.710597038269043, 0.7759479880332947, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.023839527741074562`, 0.010384051129221916`, 
            0.004196864552795887, 
            0.03764940798282623, -0.02217799983918667, \
-0.007226209621876478}], "Children" -> 
          RawArray["Integer16",{{5, 2}, {3, 
            4}, {-2, -4}, {-3, -5}, {-1, -6}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 241, 1, 170}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.5759793519973755, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.027441447600722313`, 0.018673978745937347`, 
            0.03794197738170624, -0.009246132336556911, \
-0.023162653669714928`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 104, 1, 241}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.5533822774887085, 0.058756135404109955`, 
            9.999999682655225*^-21, 0.8457717299461365, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{
            0.036928705871105194`, -0.0035951300524175167`, \
-0.027423754334449768`, 
            0.020229291170835495`, -0.027235286310315132`, \
-0.026865839958190918`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 4}, {-1, -4}, {-3, 
            5}, {-5, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 152, 16, 232}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 1.1255943775177002`, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.02267630025744438, -0.007467322982847691, \
-0.016473915427923203`, 0.027670666575431824`, 0.01285569742321968, 
            0.011150313541293144`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 
            5}, {-2, -5}, {-4, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 149, 1, 12}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.5759793519973755, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.022859277203679085`, 0.03586238995194435, 
            0.016632307320833206`, -0.00897424016147852, \
-0.02718426287174225}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 1, 1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.5533822774887085, 
            0.058756135404109955`, -1.1012853384017944`, 0.8457717299461365, 
            1.1359221935272217`}], "LeafValues" -> 
          RawArray["Real32",{
            
            0.035980019718408585`, -0.0035494074691087008`, \
-0.027177823707461357`, 
            0.019712252542376518`, -0.026579108089208603`, \
-0.02693370170891285}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 4}, {-1, -4}, {-3, 
            5}, {-5, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 169, 241, 115}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.710597038269043, 0.7759479880332947, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.023357762023806572`, 0.009654928930103779, 
            0.004302723798900843, 
            0.03556572645902634, -0.02161490172147751, \
-0.0066952831111848354`}], "Children" -> 
          RawArray["Integer16",{{5, 2}, {3, 
            4}, {-2, -4}, {-3, -5}, {-1, -6}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 126, 1, 170}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.7759479880332947, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.02688232809305191, 0.04028290510177612, 
            0.018550409004092216`, -0.007394346874207258, \
-0.0224634800106287}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 104, 1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.5533822774887085, 0.058756135404109955`, 
            9.999999682655225*^-21, 0.8457717299461365, 1.1359221935272217`}],
           "LeafValues" -> 
          RawArray["Real32",{
            0.034577276557683945`, -0.0033831011969596148`, \
-0.026912130415439606`, 
            0.018627800047397614`, -0.026321688666939735`, \
-0.02665974199771881}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, 4}, {-1, -4}, {-3, 
            5}, {-5, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 152, 16, 49}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 1.1255943775177002`, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.022084716707468033`, -0.007468164898455143, \
-0.015914278104901314`, 0.010608842596411705`, 0.012307674624025822`, 
            0.02641323395073414}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 
            5}, {-2, -5}, {-4, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 149, 1, 23}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.5759793519973755, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.022130876779556274`, 0.033632390201091766`, 
            0.01508533488959074, -0.008587280288338661, \
-0.026628542691469193`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 43, 1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, -0.710597038269043, 
            9.999999682655225*^-21, 0.8199498653411865, 1.1255943775177002`}],
           "LeafValues" -> 
          RawArray["Real32",{0.03607339784502983, -0.027021214365959167`, 
            0.002345039276406169, 
            
            0.022426828742027283`, -0.025951020419597626`, \
-0.026425693184137344`}], "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {-2, 
            5}, {-5, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 152, 61, 232}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 1.1255943775177002`, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.021784063428640366`, -0.007760562933981419, \
-0.015607907436788082`, 0.025820162147283554`, 0.01198927965015173, 
            0.010385476052761078`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 
            5}, {-2, -5}, {-4, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 126, 1, 170}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.5759793519973755, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.02638043463230133, 0.03512333333492279, 
            0.016753142699599266`, -0.008446043357253075, \
-0.021804828196763992`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 43, 1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, -0.710597038269043, 
            9.999999682655225*^-21, 0.8199498653411865, 1.1255943775177002`}],
           "LeafValues" -> 
          RawArray["Real32",{0.034990593791007996`, -0.026803039014339447`, 
            0.002233393955975771, 
            
            0.021683238446712494`, -0.025692738592624664`, \
-0.02619650401175022}], "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {-2, 
            5}, {-5, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 241, 169, 43}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.710597038269043, 0.7759479880332947, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.022701112553477287`, 0.008628221228718758, 
            0.004727690946310759, -0.021000588312745094`, 
            0.03313817083835602, -0.00595836853608489}], "Children" -> 
          RawArray["Integer16",{{5, 2}, {4, 
            3}, {-3, -4}, {-2, -5}, {-1, -6}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 126, 1, 12}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.7759479880332947, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.02152608148753643, 0.03697013109922409, 
            0.01631074957549572, -0.00704397214576602, \
-0.026173124089837074`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 115, 1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, -0.710597038269043, 
            9.999999682655225*^-21, 0.8199498653411865, 1.1255943775177002`}],
           "LeafValues" -> 
          RawArray["Real32",{0.03379932418465614, -0.02655811794102192, 
            0.002239515306428075, 
            0.020940391346812248`, -0.02548004314303398, \
-0.02595854364335537}], "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {-2, 
            5}, {-5, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 37, 169}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 1.1255943775177002`, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.021242160350084305`, -0.0074287415482103825`, \
-0.015059889294207096`, 0.018258292227983475`, 0.014283005148172379`}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, -4}, {-2, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 241, 1, 12}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.5759793519973755, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.021237580105662346`, 0.013967893086373806`, 
            0.03187001496553421, -0.008096051402390003, \
-0.025944175198674202`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 43, 1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, -0.710597038269043, 
            9.999999682655225*^-21, 0.8199498653411865, 1.1255943775177002`}],
           "LeafValues" -> 
          RawArray["Real32",{0.032903607934713364`, -0.026354379951953888`, 
            0.0021368786692619324`, 
            0.020240414887666702`, -0.02526063844561577, \
-0.025745373219251633`}], "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {-2, 
            5}, {-5, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 37, 169}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 1.1319799423217773`, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.020945047959685326`, -0.008114511147141457, \
-0.01584620401263237, 0.01789105497300625, 0.013973147608339787`}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, -4}, {-2, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 126, 1, 23}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.7759479880332947, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.020893888548016548`, 0.03517650067806244, 
            0.01490623690187931, -0.006738215684890747, \
-0.02569456584751606}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, -0.8463739156723022, 
            0.8199498653411865, 1.1255943775177002`}], "LeafValues" -> 
          RawArray["Real32",{0.027477575466036797`, -0.02616812102496624, 
            0.004743127152323723, -0.025045230984687805`, \
-0.025540227070450783`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -3}, {-2, 4}, {-4, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 37, 169}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 1.1319799423217773`, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.020653391256928444`, -0.007977016270160675, \
-0.01553588267415762, 0.017412487417459488`, 0.013676829636096954`}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, -4}, {-2, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 149, 1, 12}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.5759793519973755, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.02062794752418995, 0.029518717899918556`, 
            0.011510771699249744`, -0.007844297215342522, \
-0.025528520345687866`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 115, 1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, -0.710597038269043, 
            9.999999682655225*^-21, 0.8199498653411865, 1.1255943775177002`}],
           "LeafValues" -> 
          RawArray["Real32",{0.03144843876361847, -0.025982806459069252`, 
            0.001893874490633607, 
            0.018830707296729088`, -0.024841688573360443`, \
-0.025348611176013947`}], "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {-2, 
            5}, {-5, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 241, 169, 115}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.710597038269043, 0.7759479880332947, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.0218811072409153, 0.007490681484341621, 
            0.005295732524245977, -0.020187146961688995`, 
            0.030204348266124725`, -0.00501357764005661}], "Children" -> 
          RawArray["Integer16",{{5, 2}, {4, 
            3}, {-3, -4}, {-2, -5}, {-1, -6}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 241, 1, 170}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.5759793519973755, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.02529706060886383, 0.012050083838403225`, 
            0.029726490378379822`, -0.007703603710979223, \
-0.020303161814808846`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, -0.8463739156723022, 
            0.8199498653411865, 1.1255943775177002`}], "LeafValues" -> 
          RawArray["Real32",{0.025971630588173866`, -0.025770025327801704`, 
            0.004405974876135588, -0.02467745915055275, \
-0.025150595232844353`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -3}, {-2, 4}, {-4, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 37, 169}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 1.1319799423217773`, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.02013951726257801, -0.007913107052445412, \
-0.01501171849668026, 0.01681385561823845, 0.013247726485133171`}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, -4}, {-2, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 126, 1, 12}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.7759479880332947, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.020061874762177467`, 0.03298969566822052, 
            0.012978704646229744`, -0.006352687254548073, \
-0.025151913985610008`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, -0.8463739156723022, 
            0.8199498653411865, 1.1255943775177002`}], "LeafValues" -> 
          RawArray["Real32",{0.025281313806772232`, -0.02560582384467125, 
            0.004271014127880335, -0.024494603276252747`, \
-0.024971837177872658`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -3}, {-2, 4}, {-4, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 37, 169}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 1.1319799423217773`, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.01984887756407261, -0.007774059195071459, \
-0.014710926450788975`, 0.01638639345765114, 0.012941064313054085`}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, -4}, {-2, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 149, 1, 69}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.5759793519973755, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.01987072452902794, 0.027492640540003777`, 
            0.009746212512254715, -0.007331382017582655, \
-0.02504158951342106}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 43, 1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, -0.710597038269043, 
            9.999999682655225*^-21, 0.8199498653411865, 1.1255943775177002`}],
           "LeafValues" -> 
          RawArray["Real32",{0.029485085979104042`, -0.02544289268553257, 
            0.001650835620239377, 
            0.016855264082551003`, -0.024321233853697777`, \
-0.024804502725601196`}], "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {-2, 
            5}, {-5, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 85, 43}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.710597038269043, 1.0318546295166016`, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.0213551614433527, 
            0.0027842477429658175`, -0.010483136400580406`, 
            0.02470131777226925, -0.004239782691001892}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {3, -3}, {-2, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 241, 1, 12}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.5759793519973755, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.019508004188537598`, 0.010441296733915806`, 
            0.027784280478954315`, -0.007193474564701319, \
-0.024807866662740707`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, -0.8463739156723022, 
            0.8199498653411865, 1.1255943775177002`}], "LeafValues" -> 
          RawArray["Real32",{0.023987742140889168`, -0.025265740230679512`, 
            0.003955768886953592, -0.02416890673339367, \
-0.02463695779442787}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -3}, {-2, 4}, {-4, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 200, 167, 109}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 1.1319799423217773`, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.019359275698661804`, -0.008123782463371754, \
-0.014179869554936886`, 0.025707542896270752`, 0.0034866170026361942`, 
            0.009467946365475655}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {5, 
            4}, {-4, -5}, {-2, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 102, 1, 26}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.7759479880332947, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.024612613022327423`, 0.02940106764435768, 
            0.009795855730772018, -0.006013970822095871, \
-0.019212624058127403`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, -0.8463739156723022, 
            0.8199498653411865, 1.1255943775177002`}], "LeafValues" -> 
          RawArray["Real32",{0.023373069241642952`, -0.025120651349425316`, 
            0.0038560288958251476`, -0.024008003994822502`, \
-0.024478614330291748`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -3}, {-2, 4}, {-4, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 152, 16, 110}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 1.1319799423217773`, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.019081512466073036`, -0.008834912441670895, \
-0.013890177942812443`, 0.00701879383996129, 0.01078232005238533, 
            0.022334350273013115`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 
            5}, {-2, -5}, {-4, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 126, 1, 51}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.7759479880332947, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.019152957946062088`, 0.030646322295069695`, 
            0.010772675275802612`, -0.005924909375607967, \
-0.024629952386021614`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 43, 1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, -0.710597038269043, 
            9.999999682655225*^-21, 0.8199498653411865, 1.1255943775177002`}],
           "LeafValues" -> 
          RawArray["Real32",{0.027781615033745766`, -0.02498413622379303, 
            0.0014720442704856396`, 
            0.015102767385542393`, -0.02385970577597618, \
-0.024328608065843582`}], "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {-2, 
            5}, {-5, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 85, 115}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.710597038269043, 1.0318546295166016`, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.02085264027118683, 
            0.0023369204718619585`, -0.0097432229667902, 
            0.023313846439123154`, -0.003437682753428817}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {3, -3}, {-2, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 149, 1, 12}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.5759793519973755, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.018722722306847572`, 0.0252617709338665, 
            0.007727081421762705, -0.006781346630305052, \
-0.02434559352695942}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, -0.8463739156723022, 
            0.8199498653411865, 1.1255943775177002`}], "LeafValues" -> 
          RawArray["Real32",{0.022229844704270363`, -0.02482709474861622, 
            0.003603946417570114, -0.023722797632217407`, \
-0.024185368791222572`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -3}, {-2, 4}, {-4, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 153, 30, 199}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 1.1319799423217773`, 
            9.999999682655225*^-21, -9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.018613241612911224`, 
            0.023079507052898407`, -0.013378104194998741`, \
-0.012765249237418175`, 0.011689719744026661`, 0.006600635591894388}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {5, 
            4}, {-4, -5}, {-2, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 241, 1, 23}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.5759793519973755, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.018420366570353508`, 0.008438501507043839, 
            0.02581688016653061, -0.006590924225747585, \
-0.02417644113302231}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, -0.8463739156723022, 
            0.8199498653411865, 1.1255943775177002`}], "LeafValues" -> 
          RawArray["Real32",{0.021681135520339012`, -0.024685002863407135`, 
            0.0034920312464237213`, -0.02359190210700035, \
-0.024045974016189575`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -3}, {-2, 4}, {-4, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 200, 167, 109}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 1.1319799423217773`, 
            9.999999682655225*^-21, -9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.01834471896290779, -0.008205962367355824, \
-0.013092782348394394`, 0.02436508983373642, 0.002928757341578603, 
            0.008900394663214684}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {5, 
            4}, {-4, -5}, {-2, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 126, 1, 26}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.7759479880332947, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.024045241996645927`, 0.02917622961103916, 
            0.00935461837798357, -0.005588709842413664, \
-0.018171383067965508`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, -0.8463739156723022, 
            0.8199498653411865, 1.1255943775177002`}], "LeafValues" -> 
          RawArray["Real32",{0.02115856111049652, -0.024559900164604187`, 
            0.0034116285387426615`, -0.023460716009140015`, \
-0.023913783952593803`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -3}, {-2, 4}, {-4, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 153, 30, 199}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 1.1319799423217773`, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.01808030717074871, 
            0.02233262173831463, -0.012812926433980465`, -0.01263658981770277,
             0.011216728016734123`, 0.0062895361334085464`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {5, 
            4}, {-4, -5}, {-2, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 102, 1, 12}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.7759479880332947, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.01796354353427887, 0.02691652625799179, 
            
            0.007373705040663481, -0.005501595325767994, \
-0.023945771157741547`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 43, 1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, -0.710597038269043, 
            9.999999682655225*^-21, 0.8199498653411865, 1.130399227142334}], 
          "LeafValues" -> 
          RawArray["Real32",{0.025922076776623726`, -0.024431971833109856`, 
            0.0012196623720228672`, 
            0.012959339655935764`, -0.02335425280034542, \
-0.023799998685717583`}], "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {-2, 
            5}, {-5, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 200, 167, 109}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 1.1319799423217773`, 
            9.999999682655225*^-21, -9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.017818134278059006`, -0.008188643492758274, \
-0.012538637034595013`, 0.023579031229019165`, 0.00274202530272305, 
            0.008562186732888222}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {5, 
            4}, {-4, -5}, {-2, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 149, 1, 26}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.5759793519973755, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.023794541135430336`, 0.023408761247992516`, 
            
            0.006007245276123285, -0.006242834497243166, \
-0.017671186476945877`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, -0.8463739156723022, 
            0.8199498653411865, 1.130399227142334}], "LeafValues" -> 
          RawArray["Real32",{0.020204782485961914`, -0.024312542751431465`, 
            0.003185938810929656, -0.023234711959958076`, \
-0.023681001737713814`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -3}, {-2, 4}, {-4, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 85, 115}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.710597038269043, 1.0318546295166016`, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.020098086446523666`, 
            0.0016608830774202943`, -0.008658619597554207, 
            0.021496089175343513`, -0.0021733916364610195`}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {3, -3}, {-2, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 126, 1, 23}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.7759479880332947, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.01742400974035263, 0.027831602841615677`, 
            0.008112804964184761, -0.00532951857894659, \
-0.023670470342040062`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, -0.8463739156723022, 
            0.8199498653411865, 1.130399227142334}], "LeafValues" -> 
          RawArray["Real32",{0.019702015444636345`, -0.024185404181480408`, 
            0.0030929676722735167`, -0.02312636747956276, \
-0.023562850430607796`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -3}, {-2, 4}, {-4, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 152, 16, 206}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 1.1319799423217773`, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.017380699515342712`, -0.009235559962689877, \
-0.012054047547280788`, 0.006329135503619909, 0.01014429610222578, 
            0.021205298602581024`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {4, 
            5}, {-2, -5}, {-4, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 241, 1, 12}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.5759793519973755, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.01722746528685093, 0.006348629482090473, 
            0.02381325513124466, -0.005962403491139412, \
-0.02359478734433651}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 26, 55, 1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 0.8199498653411865, 1.130399227142334}], 
          "LeafValues" -> 
          RawArray["Real32",{0.008762074634432793, -0.024077553302049637`, 
            0.001970035256817937, 
            0.028421495109796524`, -0.02302432246506214, \
-0.02344997227191925}], "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {-2, 
            5}, {-5, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 153, 30, 110}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 1.1319799423217773`, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.017125776037573814`, 
            0.005896617658436298, -0.011782079935073853`, \
-0.012651204131543636`, 0.010555984452366829`, 0.021499114111065865`}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {5, 
            4}, {-4, -5}, {-2, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 102, 1, 51}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.7759479880332947, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.017153868451714516`, 0.02528504468500614, 
            0.005713443271815777, -0.005092640407383442, \
-0.023630604147911072`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 26, 55, 1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 0.8199498653411865, 1.130399227142334}], 
          "LeafValues" -> 
          RawArray["Real32",{0.008435926400125027, -0.023970231413841248`, 
            0.0018404739676043391`, 
            0.027814626693725586`, -0.022918449714779854`, \
-0.0233431626111269}], "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {-2, 
            5}, {-5, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 181, 43}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.710597038269043, 1.0318546295166016`, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.0197219867259264, 
            0.0018502301536500454`, -0.00798555463552475, 
            0.021141406148672104`, -0.0015102650504559278`}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {3, -3}, {-2, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 241, 1, 23}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.5759793519973755, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.016718193888664246`, 0.005690630991011858, 
            0.023033566772937775`, -0.005714524537324905, \
-0.023352446034550667`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, -0.8463739156723022, 
            0.8199498653411865, 1.130399227142334}], "LeafValues" -> 
          RawArray["Real32",{0.018582619726657867`, -0.023854076862335205`, 
            0.002523241564631462, -0.022828299552202225`, \
-0.02323700115084648}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -3}, {-2, 4}, {-4, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 200, 167, 109}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 1.1319799423217773`, 
            9.999999682655225*^-21, -9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.016795042902231216`, -0.008186412043869495, \
-0.01130092702805996, 0.02248472161591053, 0.0022827263455837965`, 
            0.007910405285656452}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {5, 
            4}, {-4, -5}, {-2, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 126, 1, 23}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.7759479880332947, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.016513163223862648`, 0.026428697630763054`, 
            0.006522090174257755, -0.00481957895681262, \
-0.02325393445789814}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 131, 1, 126}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, 9.999999682655225*^-21, 
            0.8199498653411865, -9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.01776927337050438, -0.02375633269548416, 
            0.0015754111809656024`, -0.022718926891684532`, \
-0.023131418973207474`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -3}, {-2, 4}, {-4, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 153, 30, 110}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 1.1319799423217773`, 
            9.999999682655225*^-21, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.016544969752430916`, 
            0.005493565462529659, -0.0110414894297719, -0.0124823534861207, 
            0.010103017091751099`, 0.020884137600660324`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {5, 
            4}, {-4, -5}, {-2, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 149, 1, 12}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.5759793519973755, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.016309333965182304`, 0.021165015175938606`, 
            0.0036447844468057156`, -0.005422511603683233, \
-0.023193886503577232`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 26, 55, 1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 0.8199498653411865, 1.130399227142334}], 
          "LeafValues" -> 
          RawArray["Real32",{0.007416282314807177, -0.023656917735934258`, 
            0.001133382203988731, 
            0.02669452130794525, -0.022640366107225418`, \
-0.0230454932898283}], "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {-2, 
            5}, {-5, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 181, 115}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.710597038269043, 1.0318546295166016`, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.01937112770974636, 
            0.0016784255858510733`, -0.007393951993435621, 
            0.02024347521364689, -0.000984161626547575}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {3, -3}, {-2, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 102, 1, 69}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.7759479880332947, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.016183791682124138`, 0.023882906883955002`, 
            0.004259924404323101, -0.004642396699637175, \
-0.023171667009592056`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 131, 1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, 9.999999682655225*^-21, 
            0.8199498653411865, 1.130399227142334}], "LeafValues" -> 
          RawArray["Real32",{0.01701248809695244, -0.023554593324661255`, 
            
            0.001166056958027184, -0.022555163130164146`, \
-0.022953204810619354`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -3}, {-2, 4}, {-4, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 200, 167, 198}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 1.1319799423217773`, 
            9.999999682655225*^-21, -9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.016223978251218796`, -0.008301597088575363, \
-0.010593853890895844`, 0.02180398628115654, 0.0021382977720350027`, 
            0.007633144035935402}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {5, 
            4}, {-4, -5}, {-2, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 241, 1, 23}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.5759793519973755, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.015827057883143425`, 0.004298830404877663, 
            0.021799061447381973`, -0.005111110862344503, \
-0.022987207397818565`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 26, 55, 1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 0.8199498653411865, 1.130399227142334}], 
          "LeafValues" -> 
          RawArray["Real32",{0.0068091521970927715`, -0.023463904857635498`, 
            0.0007577287033200264, 
            0.02587633952498436, -0.02247670665383339, -0.02286408096551895}],
           "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -4}, {-2, 
            5}, {-5, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 55, 95, 163}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 1.1319799423217773`, 
            9.999999682655225*^-21, 
            9.999999682655225*^-21, -9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.016031282022595406`, 
            0.022505225613713264`, -0.010338103398680687`, 
            0.01127070002257824, -0.011849767528474331`, 
            0.00252857175655663}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {5, 
            4}, {-4, -5}, {-2, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 126, 4, 63}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.7759479880332947, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.004581961315125227, 0.025189828127622604`, 
            0.005128865130245686, -0.02231975644826889, \
-0.01658644713461399}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 1, 126}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, -0.8463739156723022, 
            0.8199498653411865, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.017022158950567245`, -0.02338249795138836, 
            0.0016380761517211795`, -0.02237400971353054, \
-0.022778967395424843`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -3}, {-2, 4}, {-4, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 85, 115}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.710597038269043, 1.0318546295166016`, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.019057735800743103`, 
            0.0009278443176299334, -0.006773951929062605, 
            0.018939785659313202`, -0.0005224443157203496}], "Children" -> 
          RawArray["Integer16",{{4, 2}, {3, -3}, {-2, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 241, 1, 23}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.7759479880332947, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.015429153107106686`, 0.003576883114874363, 
            0.02324187383055687, -0.004130265675485134, \
-0.022843606770038605`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 131, 1, 126}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, 9.999999682655225*^-21, 
            0.8199498653411865, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.01609443500638008, -0.02328803762793541, 
            0.0005547332111746073, -0.022301308810710907`, \
-0.022695621475577354`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -3}, {-2, 4}, {-4, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{126, 26, 1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            0.8199498653411865, -0.7101784348487854}], "LeafValues" -> 
          RawArray["Real32",{-0.013742893002927303`, -0.005167852621525526, 
            0.01920534297823906, -0.01935482956469059, 0.009565325453877449}],
           "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 149, 1, 12}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.5759793519973755, 
            9.999999682655225*^-21, -0.32882124185562134`, \
-9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.01523882057517767, 0.019598575308918953`, 
            0.001992059638723731, -0.004530133213847876, \
-0.022800220176577568`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 30, 1, 241}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, 9.999999682655225*^-21, 
            0.8199498653411865, -9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.01675473526120186, -0.02319563925266266, 
            0.001501859282143414, -0.02263394370675087, \
-0.02226926200091839}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -3}, {-2, 4}, {-4, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 200, 167, 109}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 1.1319799423217773`, 
            9.999999682655225*^-21, -9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.015580471605062485`, -0.008260258473455906, \
-0.009719771333038807, 0.021045172587037086`, 0.0020129806362092495`, 
            0.007251218426972628}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -3}, {5, 
            4}, {-4, -5}, {-2, -6}}], "NominalSplits" -> {}, "RootIndex" -> 1,
           "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 102, 4, 63}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.7759479880332947, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.005417471751570702, 0.02234364114701748, 
            0.002605573507025838, -0.02198410965502262, \
-0.016077013686299324`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 131, 1, 241}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, 9.999999682655225*^-21, 
            0.8199498653411865, -9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0155052924528718, -0.02312508597970009, 
            0.000229641271289438, -0.022557761520147324`, \
-0.022198593243956566`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -3}, {-2, 4}, {-4, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 49, 167, 44}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.01538896095007658, 0.005677049048244953, 
            0.02034638077020645, -0.0005340771749615669, \
-0.010174687951803207`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {4, 3}, {-3, -4}, {-2, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 241, 4, 63}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.7759479880332947, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.005367403384298086, 0.0026581762358546257`, 
            0.022412611171603203`, -0.021846409887075424`, \
-0.01586911454796791}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 55, 1, 241}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, 9.999999682655225*^-21, 
            0.8199498653411865, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0011823595268651843`, -0.023056725040078163`, 
            0.016363056376576424`, -0.022492583841085434`, \
-0.022111643105745316`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -3}, {-2, 4}, {-4, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{126, 26, 1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            0.8199498653411865, -0.7101784348487854}], "LeafValues" -> 
          RawArray["Real32",{-0.013252032920718193`, -0.00495481863617897, 
            0.018699290230870247`, -0.018947221338748932`, 
            0.009051108732819557}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 70, 1, 23}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.5759793519973755, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.014610388316214085`, 0.002704133978113532, 
            0.020285017788410187`, -0.0038518160581588745`, \
-0.022592589259147644`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 145, 1, 241}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, 9.999999682655225*^-21, 
            0.8199498653411865, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{
            0.014863495714962482`, -0.022972390055656433`, \
-0.00031862128525972366`, -0.022419657558202744`, -0.022046005353331566`}], 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -3}, {-2, 4}, {-4, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{126, 26, 1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            0.8199498653411865, -0.7101784348487854}], "LeafValues" -> 
          RawArray["Real32",{-0.013037994503974915`, -0.004804950673133135, 
            0.018308451399207115`, -0.01868463307619095, 
            0.008845211006700993}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 241, 1, 26}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.5759793519973755, 
            9.999999682655225*^-21, -0.32882124185562134`, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.02252335287630558, 0.002376705640926957, 
            0.019785113632678986`, -0.0036845493596047163`, \
-0.014419862069189548`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 55, 1, 241}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, 9.999999682655225*^-21, 
            0.8199498653411865, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.0007750248769298196, -0.022890202701091766`, 
            0.01584867388010025, -0.022362221032381058`, \
-0.021970853209495544`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -3}, {-2, 4}, {-4, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 49, 167, 44}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.015064477920532227`, 0.0056731547228991985`, 
            0.019820526242256165`, -0.00048459338722750545`, \
-0.009941878728568554}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {4, 3}, {-3, -4}, {-2, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 70, 12}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.1768825650215149, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.011040656827390194`, -0.00192510976921767, 
            0.01682819053530693, -0.022843249142169952`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {-1, -4}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 55, 1, 241}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, 9.999999682655225*^-21, 
            0.8199498653411865, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.000628184643574059, -0.02281108684837818, 
            0.01550330687314272, -0.022296544164419174`, \
-0.02191438525915146}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -3}, {-2, 4}, {-4, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{126, 26, 1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            0.8199498653411865, -0.7101784348487854}], "LeafValues" -> 
          RawArray["Real32",{-0.01274209376424551, -0.004621485713869333, 
            0.017925923690199852`, -0.018421024084091187`, 
            0.008599157445132732}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 102, 4, 63}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.7759479880332947, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{0.006400976330041885, 0.02105698548257351, 
            0.0013558248756453395`, -0.021516915410757065`, \
-0.015348190441727638`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 145, 1, 241}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, 9.999999682655225*^-21, 
            0.8199498653411865, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{
            0.014113536104559898`, -0.02274187095463276, \
-0.0008521559648215771, -0.02223259024322033, -0.021855812519788742`}], 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -3}, {-2, 4}, {-4, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 200, 42, 30}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.014829539693892002`, -0.011792875826358795`, \
-0.0027773119509220123`, 0.01863238587975502, 0.009227138012647629}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {4, 3}, {-3, -4}, {-2, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 70, 23}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.32882124185562134`, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.013775190338492393`, -0.0014546246966347098`, 
            0.014684733003377914`, -0.022367000579833984`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {-1, -4}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 131, 1, 241}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, 9.999999682655225*^-21, 
            0.8199498653411865, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{
            0.013975134119391441`, -0.022671310231089592`, \
-0.0009292798349633813, -0.022171318531036377`, -0.02180466800928116}], 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -3}, {-2, 4}, {-4, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 40, 174, 70}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.01465295348316431, -0.004422319587320089, 
            0.006279760971665382, 
            0.019245127215981483`, -0.011647462844848633`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 4}, {-2, -4}, {-3, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 70, 26}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.32882124185562134`, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.02230905182659626, -0.0014609926147386432`, 
            0.014375411905348301`, -0.013587097637355328`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {-1, -4}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 55, 1, 241}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, 9.999999682655225*^-21, 
            0.8199498653411865, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-2.8187744760543865`*^-7, -0.02259134128689766, 
            0.014840791001915932`, -0.022114049643278122`, \
-0.021755844354629517`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -3}, {-2, 4}, {-4, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{126, 26, 1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            0.8199498653411865, -0.7101784348487854}], "LeafValues" -> 
          RawArray["Real32",{-0.012310883030295372`, -0.004506738390773535, 
            0.017364555969834328`, -0.018085148185491562`, 
            0.008498757146298885}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 70, 23}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.32882124185562134`, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.013370479457080364`, -0.0014118030667304993`, 
            0.014024797827005386`, -0.022249286994338036`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {-1, -4}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 55, 1, 241}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, 9.999999682655225*^-21, 
            0.8199498653411865, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.00009611636778572574, -0.022514808923006058`, 
            0.014566660858690739`, -0.02206006646156311, \
-0.021709414198994637`}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -3}, {-2, 4}, {-4, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 200, 42, 30}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.01442557293921709, -0.011539715342223644`, \
-0.002671437105163932, 0.01819862797856331, 0.009023639373481274}], 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {4, 3}, {-3, -4}, {-2, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 70, 26}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.32882124185562134`, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.022197300568223, -0.0014339045155793428`, 
            0.013705231249332428`, -0.013169124722480774`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {-1, -4}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 145, 1, 241}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, 9.999999682655225*^-21, 
            0.8199498653411865, -9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{
            0.013188233599066734`, -0.022451559081673622`, \
-0.0016019032336771488`, -0.022004714235663414`, -0.02166368067264557}], 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -3}, {-2, 4}, {-4, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 49, 167, 44}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-1.1012853384017944`, 9.999999682655225*^-21, 
            9.999999682655225*^-21, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.01426311582326889, 0.005503104534000158, 
            0.01909048855304718, -0.0004978918586857617, \
-0.009618140757083893}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {4, 3}, {-3, -4}, {-2, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 70, 12}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.1768825650215149, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.009547518566250801, -0.0020367985125631094`, 
            0.01512750145047903, -0.022601567208766937`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {-1, -4}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 55, 1, 241}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.030135665088891983`, 9.999999682655225*^-21, 
            0.8199498653411865, 9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.00046770903281867504`, -0.022386446595191956`,
             0.014091209508478642`, -0.0219512190669775, \
-0.02161852829158306}], "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -3}, {-2, 4}, {-4, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{126, 26, 1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{9.999999682655225*^-21, 9.999999682655225*^-21, 
            0.8199498653411865, -0.7101784348487854}], "LeafValues" -> 
          RawArray["Real32",{-0.011961025185883045`, -0.004389258101582527, 
            0.016913026571273804`, -0.017814161255955696`, 
            0.00841898750513792}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {4, -4}, {-1, -5}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 64, 23}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.32882124185562134`, 9.999999682655225*^-21, 
            9.999999682655225*^-21}], "LeafValues" -> 
          RawArray["Real32",{-0.012744257226586342`, -0.0023868768475949764`, 
            0.012612058781087399`, -0.022097690030932426`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {-2, -3}, {-1, -4}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]]}, "ClassNumber" -> 3, "IterationsNumber" -> 
      50, "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "(f241(f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f\
24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f\
50f51f52f53f54f55f56f57f58f59f60f61f62f63f64f65f66f67f68f69f70f71f72f73f74f75f\
76f77f78f79f80f81f82f83f84f85f86f87f88f89f90f91f92f93f94f95f96f97f98f99f100f10\
1f102f103f104f105f106f107f108f109f110f111f112f113f114f115f116f117f118f119f120f\
121f122f123f124f125f126f127f128f129f130f131f132f133f134f135f136f137f138f139f14\
0f141f142f143f144f145f146f147f148f149f150f151f152f153f154f155f156f157f158f159f\
160f161f162f163f164f165f166f167f168f169f170f171f172f173f174f175f176f177f178f17\
9f180f181f182f183f184f185f186f187f188f189f190f191f192f193f194f195f196f197f198f\
199f200f201f202f203f204f205f206f207f208f209f210f211f212f213f214f215f216f217f21\
8f219f220f221f222f223f224f225f226f227f228f229f230f231f232f233f234f235f236f237f\
238f239f240))" -> Association["Type" -> "NumericalVector", "Weight" -> 241.]],
          "Output" -> 
         Association[
          "(f241(f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f23f\
24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f49f\
50f51f52f53f54f55f56f57f58f59f60f61f62f63f64f65f66f67f68f69f70f71f72f73f74f75f\
76f77f78f79f80f81f82f83f84f85f86f87f88f89f90f91f92f93f94f95f96f97f98f99f100f10\
1f102f103f104f105f106f107f108f109f110f111f112f113f114f115f116f117f118f119f120f\
121f122f123f124f125f126f127f128f129f130f131f132f133f134f135f136f137f138f139f14\
0f141f142f143f144f145f146f147f148f149f150f151f152f153f154f155f156f157f158f159f\
160f161f162f163f164f165f166f167f168f169f170f171f172f173f174f175f176f177f178f17\
9f180f181f182f183f184f185f186f187f188f189f190f191f192f193f194f195f196f197f198f\
199f200f201f202f203f204f205f206f207f208f209f210f211f212f213f214f215f216f217f21\
8f219f220f221f222f223f224f225f226f227f228f229f230f231f232f233f234f235f236f237f\
238f239f240))" -> Association["Type" -> "NumericalVector", "Weight" -> 241.]],
          "Processors" -> {
           MachineLearning`MLProcessor["DensifyNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "(f241(f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22\
f23f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48\
f49f50f51f52f53f54f55f56f57f58f59f60f61f62f63f64f65f66f67f68f69f70f71f72f73f74\
f75f76f77f78f79f80f81f82f83f84f85f86f87f88f89f90f91f92f93f94f95f96f97f98f99f10\
0f101f102f103f104f105f106f107f108f109f110f111f112f113f114f115f116f117f118f119f\
120f121f122f123f124f125f126f127f128f129f130f131f132f133f134f135f136f137f138f13\
9f140f141f142f143f144f145f146f147f148f149f150f151f152f153f154f155f156f157f158f\
159f160f161f162f163f164f165f166f167f168f169f170f171f172f173f174f175f176f177f17\
8f179f180f181f182f183f184f185f186f187f188f189f190f191f192f193f194f195f196f197f\
198f199f200f201f202f203f204f205f206f207f208f209f210f211f212f213f214f215f216f21\
7f218f219f220f221f222f223f224f225f226f227f228f229f230f231f232f233f234f235f236f\
237f238f239f240))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 241.]], 
             "Version" -> {11.3, 0}, "ID" -> 4323687531265921268, "Output" -> 
             Association[
              "(f241(f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22\
f23f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48\
f49f50f51f52f53f54f55f56f57f58f59f60f61f62f63f64f65f66f67f68f69f70f71f72f73f74\
f75f76f77f78f79f80f81f82f83f84f85f86f87f88f89f90f91f92f93f94f95f96f97f98f99f10\
0f101f102f103f104f105f106f107f108f109f110f111f112f113f114f115f116f117f118f119f\
120f121f122f123f124f125f126f127f128f129f130f131f132f133f134f135f136f137f138f13\
9f140f141f142f143f144f145f146f147f148f149f150f151f152f153f154f155f156f157f158f\
159f160f161f162f163f164f165f166f167f168f169f170f171f172f173f174f175f176f177f17\
8f179f180f181f182f183f184f185f186f187f188f189f190f191f192f193f194f195f196f197f\
198f199f200f201f202f203f204f205f206f207f208f209f210f211f212f213f214f215f216f21\
7f218f219f220f221f222f223f224f225f226f227f228f229f230f231f232f233f234f235f236f\
237f238f239f240))" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 241.]]]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "NumericalVector", "Weight" -> 241.], "Key" -> 
             "(f241(f1f2f3f4f5f6f7f8f9f10f11f12f13f14f15f16f17f18f19f20f21f22f\
23f24f25f26f27f28f29f30f31f32f33f34f35f36f37f38f39f40f41f42f43f44f45f46f47f48f\
49f50f51f52f53f54f55f56f57f58f59f60f61f62f63f64f65f66f67f68f69f70f71f72f73f74f\
75f76f77f78f79f80f81f82f83f84f85f86f87f88f89f90f91f92f93f94f95f96f97f98f99f100\
f101f102f103f104f105f106f107f108f109f110f111f112f113f114f115f116f117f118f119f1\
20f121f122f123f124f125f126f127f128f129f130f131f132f133f134f135f136f137f138f139\
f140f141f142f143f144f145f146f147f148f149f150f151f152f153f154f155f156f157f158f1\
59f160f161f162f163f164f165f166f167f168f169f170f171f172f173f174f175f176f177f178\
f179f180f181f182f183f184f185f186f187f188f189f190f191f192f193f194f195f196f197f1\
98f199f200f201f202f203f204f205f206f207f208f209f210f211f212f213f214f215f216f217\
f218f219f220f221f222f223f224f225f226f227f228f229f230f231f232f233f234f235f236f2\
37f238f239f240))", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], "Method" -> 
      "GradientBoostedTrees", "Options" -> 
      Association[
       "BoostingMethod" -> 
        Association["Value" -> "Gradient", "Options" -> Association[]], 
        MaxTrainingRounds -> 
        Association["Value" -> 50, "Options" -> Association[]], 
        "LeavesNumber" -> 
        Association["Value" -> 60, "Options" -> Association[]], 
        "LearningRate" -> 
        Association["Value" -> 0.04, "Options" -> Association[]], 
        ValidationSet -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "MaxBinNumber" -> 
        Association["Value" -> 255, "Options" -> Association[]], 
        "ThreadNumber" -> 
        Association["Value" -> 10, "Options" -> Association[]], "MaxDepth" -> 
        Association["Value" -> 6, "Options" -> Association[]], "LeafSize" -> 
        Association["Value" -> 35, "Options" -> Association[]], 
        "FeatureFraction" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "BaggingFraction" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "BaggingFrequency" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "MinGainToSplit" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], "LossFunction" -> 
        Association["Value" -> Automatic, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.7510281147268718, 0.06276441674258271], "Accuracy" -> 
         PlusMinus[0.6626319578160518, 0.05438068322009094], "EvaluationTime" -> 
         0.00033243722222222217`, "TestSize" -> 120, "TrainingSize" -> 240, 
         "TrainingTime" -> 0.18535363333333332`, "TrainingMemory" -> 
         1.9191573333333333`*^6, "ModelMemory" -> 299397.3333333333, 
         "ExperimentCount" -> 2, "ModelUtility" -> 0.5646461724110458, 
         "MeanCrossEntropyHistory" -> {
           PlusMinus[0.718809709327634, 0.06122474270617016], 
           PlusMinus[0.800516320152053, 0.07587973412098405]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.6939890710382515, 0.060060407020934826`], 
           PlusMinus[0.6284153005464482, 0.06273920681867995]}, 
         "Configuration" -> {
          "GradientBoostedTrees", "BoostingMethod" -> "Gradient", 
           MaxTrainingRounds -> 50, "LeavesNumber" -> 60, "LearningRate" -> 
           0.04, ValidationSet -> Automatic, "MaxBinNumber" -> 255, 
           "ThreadNumber" -> 10, "MaxDepth" -> 6, "LeafSize" -> 35, 
           "FeatureFraction" -> 1, "BaggingFraction" -> 1, "BaggingFrequency" -> 
           0, "MinGainToSplit" -> 0, "L1Regularization" -> 0, 
           "L2Regularization" -> 0, "LossFunction" -> Automatic}], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Vector[TypeSystem`AnyType, 17]}], 
        Association["ID" -> 49375109898388]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0941776133465504`, 0.018063740457780263`], 
              "Accuracy" -> 
              PlusMinus[0.3758071312842348, 0.03509636113574135], 
              "EvaluationTime" -> 6.209310344827586*^-6, "TestSize" -> 580, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.04041776666666666, 
              "TrainingMemory" -> 396616., "ModelMemory" -> 12416., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.39345856349073605`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.1060708542027973`, 0.013660748168634298`], 
                PlusMinus[1.0767238788918772`, 0.016548878231925714`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3478365755011819, 0.027911512543093174`], 
                PlusMinus[0.40548095528391775`, 0.028748790764976592`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0982806970955739`, 0.03507614676227889], "Accuracy" -> 
              PlusMinus[0.3848240838848854, 0.04315840301572838], 
              "EvaluationTime" -> 6.3191999999999996`*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.035479, 
              "TrainingMemory" -> 551104, "ModelMemory" -> 12416, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.3907867641980832, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0982806970955739`, 0.024802581233501965`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3848240838848854, 0.03051759943760348]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.9982224879217182, 0.10458866469368233`], "Accuracy" -> 
              PlusMinus[0.5464480874316944, 0.0910949841504262], 
              "EvaluationTime" -> 6.14*^-6, "TestSize" -> 60, "TrainingSize" -> 
              240, "TrainingTime" -> 0.0313322, "TrainingMemory" -> 1423040, 
              "ModelMemory" -> 12416, "ExperimentCount" -> 1, "ModelUtility" -> 
              0.4238229537155057, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.9982224879217182, 0.07395535404014882]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5464480874316944, 0.06441388102484744]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 6.14*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.9982224879217182, 0.10458866469368233`], 
             "ModelMemory" -> 12416, "TrainingMemory" -> 1423040, 
             "TrainingTime" -> 0.07958301666666666], "Index" -> 1], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.9510372834754357, 0.08861110927650345], "Accuracy" -> 
              PlusMinus[0.5050125909718506, 0.05846218923600123], 
              "EvaluationTime" -> 0.000011074942528735631`, "TestSize" -> 580,
               "TrainingSize" -> 10, "TrainingTime" -> 0.010195233333333333`, 
              "TrainingMemory" -> 418269.3333333333, "ModelMemory" -> 6768., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.4458641026465289, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8740940330736203, 0.031388841092363534`], 
                PlusMinus[1.045091162864839, 0.03470390722906923]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5597462618125759, 0.02920000526404511], 
                PlusMinus[0.4503517254703566, 0.029180578248766506`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8519939774871477, 0.08728461198947107], "Accuracy" -> 
              PlusMinus[0.641942884263055, 0.048129525816937996`], 
              "EvaluationTime" -> 8.205*^-6, "TestSize" -> 200, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.0066236, 
              "TrainingMemory" -> 265096, "ModelMemory" -> 6768, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.4967906627289971, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8519939774871477, 0.06171954103099162]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.641942884263055, 0.03403271408044986]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7853546310033245, 0.10818022925782304`], "Accuracy" -> 
              PlusMinus[0.6308619600735921, 0.06604666054934194], 
              "EvaluationTime" -> 7.5500000000000006`*^-6, "TestSize" -> 120, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.013231933333333334`, 
              "TrainingMemory" -> 1.0141626666666666`*^6, "ModelMemory" -> 
              6896., "ExperimentCount" -> 2, "ModelUtility" -> 
              0.5352417318145996, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7193424126043189, 0.0965224802534454], 
                PlusMinus[0.8777073490385919, 0.11416714744088934`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6775956284153006, 0.06084988374677634], 
                PlusMinus[0.5792349726775959, 0.06395628194867231]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 7.5500000000000006`*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.7853546310033245, 0.10818022925782304`], 
             "ModelMemory" -> 6896., "TrainingMemory" -> 
             1.0141626666666666`*^6, "TrainingTime" -> 0.02673515], "Index" -> 
           2], Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.1001595075321253`, 0.004134432227831978], 
              "Accuracy" -> 
              PlusMinus[0.32334999708516093`, 0.026780463671407455`], 
              "EvaluationTime" -> 0.00006171083333333333, "TestSize" -> 400, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.01631063333333333, 
              "TrainingMemory" -> 175762.66666666666`, "ModelMemory" -> 
              86840., "ExperimentCount" -> 2, "ModelUtility" -> 
              0.39231552854302426`, "MeanCrossEntropyHistory" -> {
                PlusMinus[1.099963869281686, 0.005852150141477699], 
                PlusMinus[1.1003535919803469`, 0.005828864279116099]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.33691914641541554`, 0.03293165329636713], 
                PlusMinus[0.31005324219969527`, 0.03259943364210635]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.1053135434805466`, 0.01228652449151466], "Accuracy" -> 
              PlusMinus[0.2508250825082507, 0.06104263609350442], 
              "EvaluationTime" -> 0.000081198, "TestSize" -> 100, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.0136774, 
              "TrainingMemory" -> 302120, "ModelMemory" -> 88664, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.38991279501314496`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.1053135434805466`, 0.008687884785164614]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.2508250825082507, 0.04316366192321967]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0824505772487334`, 0.010894227135408857`], 
              "Accuracy" -> PlusMinus[0.3979343194934497, 0.05525476831244], 
              "EvaluationTime" -> 0.00007507444444444443, "TestSize" -> 120, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.010070266666666666`, 
              "TrainingMemory" -> 944520., "ModelMemory" -> 104088., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.3982317162398223, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0814659276138305`, 0.014351469669700785`], 
                PlusMinus[1.0837551433296158`, 0.016519182708546257`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.43169398907103845`, 0.06385287022054223], 
                PlusMinus[0.3661202185792351, 0.06198564965748828]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00007507444444444443, "MeanCrossEntropy" -> 
             PlusMinus[1.0824505772487334`, 0.010894227135408857`], 
             "ModelMemory" -> 104088., "TrainingMemory" -> 944520., 
             "TrainingTime" -> 0.028898466666666664`], "Index" -> 3], 
         Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[31.297220354161254`, 5.487076059172509], "Accuracy" -> 
              PlusMinus[0.37574696966827803`, 0.06841255313029337], 
              "EvaluationTime" -> 0.00014831933333333332`, "TestSize" -> 200, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.019231366666666666`, 
              "TrainingMemory" -> 280333.3333333333, "ModelMemory" -> 165976.,
               "ExperimentCount" -> 2, "ModelUtility" -> 
              0.013333473870097865`, "MeanCrossEntropyHistory" -> {
                PlusMinus[36.4513531179748, 3.7550629547328933`], 
                PlusMinus[26.755380303512684`, 3.5249693060933707`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.32013201320131995`, 0.04652212577396786], 
                PlusMinus[0.43894389438943904`, 0.04959201136774846]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[4.509426621904372, 0.7563158014759398], "Accuracy" -> 
              PlusMinus[0.3894389438943895, 0.06885342152629535], 
              "EvaluationTime" -> 0.000022323, "TestSize" -> 100, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.0181995, 
              "TrainingMemory" -> 655424, "ModelMemory" -> 174392, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.0926757616706128, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[4.509426621904372, 0.5347960319421756]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3894389438943895, 0.04868672126913925]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.23084811931417, 0.7308543575786612], "Accuracy" -> 
              PlusMinus[0.5792349726775959, 0.09044784133076995], 
              "EvaluationTime" -> 0.00026788666666666664`, "TestSize" -> 60, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.051326, 
              "TrainingMemory" -> 2547928, "ModelMemory" -> 192488, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.18171190200503484`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.23084811931417, 0.5167920723036091]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5792349726775959, 0.06395628194867231]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00026788666666666664`, "MeanCrossEntropy" -> 
             PlusMinus[2.23084811931417, 0.7308543575786612], "ModelMemory" -> 
             192488, "TrainingMemory" -> 2547928, "TrainingTime" -> 
             0.08338886666666666], "Index" -> 4], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.4251943462196506`, 0.05568693180498206], "Accuracy" -> 
              PlusMinus[0.36280568656092943`, 0.04921535122652217], 
              "EvaluationTime" -> 0.000012111034482758621`, "TestSize" -> 580,
               "TrainingSize" -> 10, "TrainingTime" -> 0.004155933333333333, 
              "TrainingMemory" -> 117728., "ModelMemory" -> 28832., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.3007207874850127, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.3914688094801946`, 0.05606203790756142], 
                PlusMinus[1.4658500545331237`, 0.061553139878205786`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3199459378274688, 0.027278727378029343`], 
                PlusMinus[0.41009686120801725`, 0.028654269809381527`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.1201016171780933`, 0.04751206930203411], "Accuracy" -> 
              PlusMinus[0.3951117299585674, 0.04364050794105234], 
              "EvaluationTime" -> 9.986*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.0045698, 
              "TrainingMemory" -> 379800, "ModelMemory" -> 103744, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.382376352284793, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.1201016171780933`, 0.033596106391673514`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3951117299585674, 0.030858499099543486`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0796442196126128`, 0.02949885322789339], "Accuracy" -> 
              PlusMinus[0.41509729725062305`, 0.047770959526184015`], 
              "EvaluationTime" -> 0.000012497777777777776`, "TestSize" -> 120,
               "TrainingSize" -> 240, "TrainingTime" -> 0.006704166666666666, 
              "TrainingMemory" -> 2.350712*^6, "ModelMemory" -> 471736., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.38967703975606827`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0873319099569134`, 0.04416834799322777], 
                PlusMinus[1.074001809241454, 0.037839513970417425`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.43169398907103845`, 0.06385287022054223], 
                PlusMinus[0.3989071038251367, 0.06306605679624089]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000012497777777777776`, "MeanCrossEntropy" -> 
             PlusMinus[1.0796442196126128`, 0.02949885322789339], 
             "ModelMemory" -> 471736., "TrainingMemory" -> 2.350712*^6, 
             "TrainingTime" -> 0.012536141666666663`], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[3.016642009798112, 0.2438078026783458], "Accuracy" -> 
              PlusMinus[0.39513302278789897`, 0.033759465392733126`], 
              "EvaluationTime" -> 5.211954022988506*^-6, "TestSize" -> 580, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.031107133333333332`, 
              "TrainingMemory" -> 396442.6666666666, "ModelMemory" -> 12416., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.14090641220502476`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.8675633849763016`, 0.2037376493203962], 
                PlusMinus[3.239441654783674, 0.2490696722845858]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.36872004581801104`, 0.028293824132102765`], 
                PlusMinus[0.42277050976890695`, 0.028942247220608605`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[3.249464864936426, 0.350963595541072], "Accuracy" -> 
              PlusMinus[0.3678089332135524, 0.04259838156565199], 
              "EvaluationTime" -> 6.3664000000000006`*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.026807, 
              "TrainingMemory" -> 551512, "ModelMemory" -> 12416, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.13011432884933122`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[3.249464864936426, 0.24816873835670475`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3678089332135524, 0.030121604472644538`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[5.699803726510756, 1.678782449976802], "Accuracy" -> 
              PlusMinus[0.5792349726775959, 0.09044784133076995], 
              "EvaluationTime" -> 9.823333333333333*^-6, "TestSize" -> 60, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.0381096, 
              "TrainingMemory" -> 1423056, "ModelMemory" -> 12416, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.07156502488089335, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[5.699803726510756, 1.1870784545155626`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5792349726775959, 0.06395628194867231]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 9.823333333333333*^-6, "MeanCrossEntropy" -> 
             PlusMinus[5.699803726510756, 1.678782449976802], "ModelMemory" -> 
             12416, "TrainingMemory" -> 1423056, "TrainingTime" -> 
             0.07874413333333333], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0985485239263673`, 0.003443794321313841], 
              "Accuracy" -> 
              PlusMinus[0.3794083108268705, 0.03236703588401786], 
              "EvaluationTime" -> 6.919655172413792*^-6, "TestSize" -> 580, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.020178366666666666`, 
              "TrainingMemory" -> 367181.3333333333, "ModelMemory" -> 12416., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.39294065538064576`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0985918154991818`, 0.004870182754001215], 
                PlusMinus[1.098505243262475, 0.004869569103488351]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3548708241664637, 0.02773750571929696], 
                PlusMinus[0.40581495726351696`, 0.028774579904722566`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.098516857005804, 0.007687994250801233], "Accuracy" -> 
              PlusMinus[0.3768164952946219, 0.04300866929097569], 
              "EvaluationTime" -> 5.9716*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.0088181, 
              "TrainingMemory" -> 375448, "ModelMemory" -> 12416, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.3926487606397589, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.098516857005804, 0.005436232868464743]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3768164952946219, 0.030411721705458528`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0978967096059582`, 0.01906246869423895], "Accuracy" -> 
              PlusMinus[0.5136612021857927, 0.09135255766400033], 
              "EvaluationTime" -> 0.000010486666666666667`, "TestSize" -> 60, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.0109955, 
              "TrainingMemory" -> 1423120, "ModelMemory" -> 12416, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.39205900746450334`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0978967096059582`, 0.013479200879852632`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5136612021857927, 0.06459601300294975]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000010486666666666667`, "MeanCrossEntropy" -> 
             PlusMinus[1.0978967096059582`, 0.01906246869423895], 
             "ModelMemory" -> 12416, "TrainingMemory" -> 1423120, 
             "TrainingTime" -> 0.033922741666666666`], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.2993436119491826`, 0.06696140069818048], "Accuracy" -> 
              PlusMinus[0.3865148443062418, 0.03231077335599089], 
              "EvaluationTime" -> 3.835287356321839*^-6, "TestSize" -> 580, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.029777966666666662`, 
              "TrainingMemory" -> 396648., "ModelMemory" -> 12416., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.32903421187299464`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.35375445224612, 0.054852738074616936`], 
                PlusMinus[1.2446562468792475`, 0.05499194671333363]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.36182639615904627`, 0.02817697433521481], 
                PlusMinus[0.4123453448153912, 0.02882132024416947]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.6538405166489132`, 0.14444389409282496`], 
              "Accuracy" -> 
              PlusMinus[0.37143620055092946`, 0.042588679839080865`], 
              "EvaluationTime" -> 7.962000000000001*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.0281092, 
              "TrainingMemory" -> 551288, "ModelMemory" -> 12416, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.2566871682996222, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.6538405166489132`, 0.10213725701402801`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.37143620055092946`, 0.03011474431599688]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.9379116290101754`, 0.5000705049781222], "Accuracy" -> 
              PlusMinus[0.5956284153005467, 0.08997575230481654], 
              "EvaluationTime" -> 6.29*^-6, "TestSize" -> 60, "TrainingSize" -> 
              240, "TrainingTime" -> 0.0373017, "TrainingMemory" -> 1422976, 
              "ModelMemory" -> 12416, "ExperimentCount" -> 1, "ModelUtility" -> 
              0.21194836113548224`, "MeanCrossEntropyHistory" -> {
                PlusMinus[1.9379116290101754`, 0.35360324514141134`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5956284153005467, 0.0636224645970969]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 6.29*^-6, "MeanCrossEntropy" -> 
             PlusMinus[1.9379116290101754`, 0.5000705049781222], 
             "ModelMemory" -> 12416, "TrainingMemory" -> 1422976, 
             "TrainingTime" -> 0.07640509166666666], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[3.219069051281404, 0.20243082553607125`], "Accuracy" -> 
              PlusMinus[0.39315221631163344`, 0.02960892987136463], 
              "EvaluationTime" -> 4.153333333333333*^-6, "TestSize" -> 580, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.0341879, 
              "TrainingMemory" -> 396506.6666666666, "ModelMemory" -> 12416., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.13251348446001124`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[3.118018719209361, 0.2126414978039694], 
                PlusMinus[3.360026492366046, 0.25114420046887703`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.37185702495474476`, 0.028326372513699023`], 
                PlusMinus[0.415163514800164, 0.02879870905269395]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[4.584407003625757, 0.5097069229963901], "Accuracy" -> 
              PlusMinus[0.37628896901107717`, 0.04285169373348377], 
              "EvaluationTime" -> 6.6392*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.0285313, 
              "TrainingMemory" -> 551272, "ModelMemory" -> 12416, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.09216878103322686, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[4.584407003625757, 0.36041722166847684`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.37628896901107717`, 0.030300723224275454`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[9.493847523858259, 2.770083559049813], "Accuracy" -> 
              PlusMinus[0.5628415300546451, 0.0908205118878937], 
              "EvaluationTime" -> 0.000011738333333333334`, "TestSize" -> 60, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.0406845, 
              "TrainingMemory" -> 1422880, "ModelMemory" -> 12416, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.04298774407241076, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[9.493847523858259, 1.958744869057489]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5628415300546451, 0.06421979982676308]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000011738333333333334`, "MeanCrossEntropy" -> 
             PlusMinus[9.493847523858259, 2.770083559049813], "ModelMemory" -> 
             12416, "TrainingMemory" -> 1422880, "TrainingTime" -> 
             0.08504352500000001], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.098606013273591, 0.0030073536857357025`], 
              "Accuracy" -> 
              PlusMinus[0.37961342567293055`, 0.032570161765540125`], 
              "EvaluationTime" -> 5.650229885057472*^-6, "TestSize" -> 580, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.009705066666666665, 
              "TrainingMemory" -> 195698.66666666666`, "ModelMemory" -> 
              12416., "ExperimentCount" -> 2, "ModelUtility" -> 
              0.3929513082378905, "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0986102338790462`, 0.00487026597351004], 
                PlusMinus[1.0986034121831612`, 0.003823340938779658]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3548708241664637, 0.02773750571929696], 
                PlusMinus[0.40631063685131286`, 0.028812283068610868`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0986027113065564`, 0.007688666722496082], 
              "Accuracy" -> 
              PlusMinus[0.3768164952946219, 0.04300866929097569], 
              "EvaluationTime" -> 6.0744*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.0099226, 
              "TrainingMemory" -> 350136, "ModelMemory" -> 12416, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.39261807052343, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0986027113065564`, 0.005436708377760327]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3768164952946219, 0.030411721705458528`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0985201128233217`, 0.009537372841464619], 
              "Accuracy" -> 
              PlusMinus[0.4889798295184923, 0.05180019417565552], 
              "EvaluationTime" -> 0.000010068888888888889`, "TestSize" -> 120,
               "TrainingSize" -> 240, "TrainingTime" -> 0.010346633333333332`,
               "TrainingMemory" -> 1.423152*^6, "ModelMemory" -> 12416., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.39251562020737607`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0985401008249496`, 0.013488292135026673`], 
                PlusMinus[1.0985001274279864`, 0.013487412717896987`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5136612021857927, 0.06459601300294975], 
                PlusMinus[0.46448087431694024`, 0.06435685907644231]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000010068888888888889`, "MeanCrossEntropy" -> 
             PlusMinus[1.0985201128233217`, 0.009537372841464619], 
             "ModelMemory" -> 12416., "TrainingMemory" -> 1.423152*^6, 
             "TrainingTime" -> 0.02263835833333333], "Index" -> 10], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 60], "LearningRate" -> 
             Association["Value" -> 0.04], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 10], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 35], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0986122886681107`, 0.007688781904213582], 
              "Accuracy" -> 
              PlusMinus[0.33194002446602267`, 0.04198132154292408], 
              "EvaluationTime" -> 0.000018992800000000002`, "TestSize" -> 250,
               "TrainingSize" -> 50, "TrainingTime" -> 0.0320279, 
              "TrainingMemory" -> 345256, "ModelMemory" -> 25368, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.3926144912946575, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0986122886681107`, 0.005436789823533839]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.33194002446602267`, 0.02968527714617451]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7510281147268718, 0.06276441674258271], "Accuracy" -> 
              PlusMinus[0.6626319578160518, 0.05438068322009094], 
              "EvaluationTime" -> 0.00033243722222222217`, "TestSize" -> 120, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.18535363333333332`, 
              "TrainingMemory" -> 1.9191573333333333`*^6, "ModelMemory" -> 
              299397.3333333333, "ExperimentCount" -> 2, "ModelUtility" -> 
              0.5646461724110458, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.718809709327634, 0.06122474270617016], 
                PlusMinus[0.800516320152053, 0.07587973412098405]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6939890710382515, 0.060060407020934826`], 
                PlusMinus[0.6284153005464482, 0.06273920681867995]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00033243722222222217`, "MeanCrossEntropy" -> 
             PlusMinus[0.7510281147268718, 0.06276441674258271], 
             "ModelMemory" -> 299397.3333333333, "TrainingMemory" -> 
             1.9191573333333333`*^6, "TrainingTime" -> 0.2637199416666667], 
           "Index" -> 11], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0899474964828129`, 0.009256129077777672], 
              "Accuracy" -> 
              PlusMinus[0.3835901570561315, 0.04343386596789377], 
              "EvaluationTime" -> 5.2776*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.0247982, 
              "TrainingMemory" -> 551168, "ModelMemory" -> 12416, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.39561780958909354`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0899474964828129`, 0.006545071638434576]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3835901570561315, 0.03071238115904529]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0602307409554892`, 0.03707041091375794], "Accuracy" -> 
              PlusMinus[0.5136612021857927, 0.09135255766400033], 
              "EvaluationTime" -> 9.338333333333333*^-6, "TestSize" -> 60, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.0413619, 
              "TrainingMemory" -> 1423056, "ModelMemory" -> 12416, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.40456808098806374`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0602307409554892`, 0.02621273893849004]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5136612021857927, 0.06459601300294975]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 9.338333333333333*^-6, "MeanCrossEntropy" -> 
             PlusMinus[1.0602307409554892`, 0.03707041091375794], 
             "ModelMemory" -> 12416, "TrainingMemory" -> 1423056, 
             "TrainingTime" -> 0.07650057499999999], "Index" -> 12]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 12], 
        Association["ID" -> 49370814931091]], "MaxTrainingSize" -> 300, 
      "LastReportingTime" -> 3.7633867711532203`17.328153843128465*^9, 
      "PreprocessorEvaluationTime" -> 5.609375`1.*^-6, "PreprocessorMemory" -> 
      715552, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.6400000000000001, 
          "ElapsedTimes" -> 0.7392824999999998, "ExperimentCounts" -> 20], 
         Association[
         "TrainingSizes" -> 50, "TimeBudgets" -> 0.8, "ElapsedTimes" -> 
          0.8240654000000001, "ExperimentCounts" -> 12], 
         Association[
         "TrainingSizes" -> 240, "TimeBudgets" -> 1., "ElapsedTimes" -> 
          1.0629448, "ExperimentCounts" -> 17]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[49379404865684]], "ID" -> 49383699832980]]], 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7830644310314103648], "f2" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           621010109939972101], "f3" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7571529294795387964], "f4" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           194817127346357887], "f5" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2950464368323762355], "f6" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4944785870995585352], "f7" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5530822723121145182], "f8" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7353070011836773988], "f9" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1087972001376475556], "f10" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7901685407936578293], "f11" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6017839540808778113], "f12" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2623763167809008208], "f13" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2554704833150123229], "f14" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8635572115975258415], "f15" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5470592036792741804], "f16" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           1716182119409792445], "f17" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5372181888172240513], "f18" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3451686780949221348], "f19" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3085818245517229708], "f20" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3476667777582201558], "f21" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2052600957485062807], "f22" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3896194227899886124], "f23" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5972554446682157495], "f24" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6573108442557463714], "f25" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6339974333818899834], "f26" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8229305170270554329], "f27" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           150515017981974378], "f28" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3757261926576544772], "f29" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2523310068550538990], "f30" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           414767104180887788], "f31" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2512830227220793654], "f32" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1453765012881772645], "f33" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8182992746739161272], "f34" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4058606323210936183], "f35" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2341890393626659761], "f36" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           1558218245050121222], "f37" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           1208297994289996473], "f38" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2048064841983878733], "f39" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3284671193961801273], "f40" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1739608775884445825], "f41" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8761118589596778705], "f42" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4876452844649101533], "f43" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5101060789958394157], "f44" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6013999336108444596], "f45" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8019547491196180750], "f46" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           647125115247461476], "f47" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3167642681132286248], "f48" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4213468898162490343], "f49" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           1851127103456267247], "f50" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3949197085030529611], "f51" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8627966819740134195], "f52" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4106009534450975842], "f53" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           1014513909459274201], "f54" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3369757831563099299], "f55" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7787908825240129421], "f56" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1138755024558332817], "f57" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3480720240384127933], "f58" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2545747835713784392], "f59" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6143419049563815185], "f60" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8372781128230223887], "f61" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7446399566586564546], "f62" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4674426829504777857], "f63" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2331196464482842798], "f64" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           499987734298574870], "f65" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7239045408027856444], "f66" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           585657028726996208], "f67" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5344211350841867484], "f68" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5676202749513711937], "f69" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2637219039685430046], "f70" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8270478925001514433], "f71" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2639459283459680394], "f72" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           830862869946349477], "f73" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           1701349372211846127], "f74" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8549377805830405596], "f75" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7039812055687631230], "f76" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6610446064746342348], "f77" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4323715821692920835], "f78" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4334725566736849752], "f79" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4877066703410125689], "f80" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3135119121654715577], "f81" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8509808511920875108], "f82" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4582768838719340850], "f83" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           9159114439111855655], "f84" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5166176520198435146], "f85" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4115000922625168189], "f86" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8108203045823152023], "f87" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7673844621695827001], "f88" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           765523308617578238], "f89" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           802720938695596803], "f90" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5641955398733955544], "f91" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7607517604453907755], "f92" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6674023362600297085], "f93" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4878607827278722004], "f94" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3234259157912002180], "f95" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1027962446965165187], "f96" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7890591969203727270], "f97" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8688277787054865129], "f98" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6107905037993906642], "f99" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4885170188108355766], "f100" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7884977647152560358], "f101" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3904653613505953516], "f102" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1927945415258217539], "f103" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           9027525351915795982], "f104" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8458944754110997095], "f105" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2926958526968354325], "f106" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8915411529315821520], "f107" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4342949452048469221], "f108" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7918508663572870981], "f109" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2713903142467947481], "f110" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6984990192131848954], "f111" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3428715377137460129], "f112" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4648188150551078432], "f113" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1567992663478030052], "f114" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7966815767792736883], "f115" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3499161067771431248], "f116" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6931882183993329527], "f117" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           462153083644591218], "f118" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6312043508195524507], "f119" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5328049920662318348], "f120" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4740135196976874536], "f121" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8959705304220807116], "f122" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2435281229224538752], "f123" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7763519074981977680], "f124" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           666163047313829075], "f125" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6979352024707939515], "f126" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1877875817728719038], "f127" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5098047374514985277], "f128" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8137348066792278670], "f129" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2326925602794325088], "f130" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7185387038310987452], "f131" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7413823707801337888], "f132" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4651424201561784483], "f133" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           983647595599061381], "f134" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7199683939435071891], "f135" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           1000666385815988797], "f136" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7443684595617377890], "f137" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5458651306559403973], "f138" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2745898324206627890], "f139" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6107321312880433866], "f140" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3472414749105047474], "f141" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5464930053186321982], "f142" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           1433956136310874934], "f143" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3097016954052892088], "f144" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3969277474212709083], "f145" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           1439308310122289377], "f146" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5582702565165290635], "f147" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2840368676335706191], "f148" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5696884139349897809], "f149" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3956749800345999735], "f150" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4179117467070568802], "f151" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4166819016528320143], "f152" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7380766355618432823], "f153" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1103768021901163195], "f154" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           648062683471850563], "f155" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           930156469844482777], "f156" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7011636074832920538], "f157" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5485313399632660040], "f158" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           599354825961163999], "f159" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           9133143020369809367], "f160" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2694204905101424296], "f161" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3890894000892222528], "f162" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2130586448161719005], "f163" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6312271880319476994], "f164" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           159230683262036724], "f165" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7658017427999916450], "f166" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5527099844009087472], "f167" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1846373514861194509], "f168" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7783140934825442264], "f169" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5243573095978684367], "f170" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           9064732658162822051], "f171" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6506464959878253665], "f172" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           18700177534333329], "f173" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7864919256222409609], "f174" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           856095597934359349], "f175" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8111248242660185431], "f176" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5186762914633712805], "f177" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           785809826545904675], "f178" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1112453100424916359], "f179" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           900182517700596458], "f180" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           376390292916334051], "f181" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5271321569047658550], "f182" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1838958291456071079], "f183" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3507835318192405274], "f184" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5155577534052342782], "f185" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3916288618911928741], "f186" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5668930420269440748], "f187" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2835478915380918962], "f188" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2962999608884657418], "f189" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           127199183504580316], "f190" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4512833397471271648], "f191" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6881100437246485078], "f192" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6855768574593766257], "f193" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           3519275918859277844], "f194" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3625358243277427065], "f195" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2746686343969550868], "f196" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5437566237589549953], "f197" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7353303293808669630], "f198" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           2904849085942304187], "f199" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5211402667928780112], "f200" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7584447352272495509], "f201" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           174074712395781637], "f202" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7030776121301409830], "f203" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4710634053312420437], "f204" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4242711318868530216], "f205" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           164823880341595003], "f206" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7655166571608555104], "f207" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2048925122916280798], "f208" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           4601353028678233021], "f209" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3859310265184206539], "f210" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6486177474544730119], "f211" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8859023560841653395], "f212" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7310417199953465018], "f213" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           6150590376241774550], "f214" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2111767090806544775], "f215" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           180090455411372765], "f216" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5045938658898485585], "f217" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           1814580358194780115], "f218" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5900377299519129958], "f219" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7500437144899836566], "f220" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1022708843855580346], "f221" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4100066610840302052], "f222" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8289313958491869112], "f223" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2331969217016615701], "f224" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3885146948663682697], "f225" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1954546438097760622], "f226" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           1662920590903158382], "f227" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           8118120884304612457], "f228" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           4411130975185596546], "f229" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           7453813165501534248], "f230" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           8940357626632930261], "f231" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           5632372431413497550], "f232" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3510644965285903578], "f233" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           3104682843927747854], "f234" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           630931102596907758], "f235" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           9100901601872747269], "f236" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           626396585265505172], "f237" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2708495633823280310], "f238" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {1}, "ID" -> 
           2142367511470305552], "f239" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           584922403484604141], "f240" -> 
         Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           6562472054128851599], "f241" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {1800.8725017384777`}, "ID" -> 4858784514147644761]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 3.5350279, "MaxTrainingMemory" -> 6508872, 
      "DataMemory" -> 1797768, "FunctionMemory" -> 1709128, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2019, 4, 4, 17, 12, 51.5545467`9.464841822675407}, 
        "Instant", "Gregorian", -6.], "ProcessorCount" -> 10, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellEditDuplicate->True,
 CellChangeTimes->{3.7633085846936502`*^9, 3.763398462399186*^9, 
  3.7634025983410225`*^9, 3.7634075595461254`*^9, 3.763408371604519*^9},
 CellLabel->"Out[79]=",ExpressionUUID->"e748b15b-f09f-44f5-94e5-191c45529218"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{
  "combClass", " ", ",", " ", "combTestSample", ",", " ", 
   "\"\<Accuracy\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.7633086005945463`*^9, 3.763308622662609*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"484a75e1-f12b-4289-b2f7-38a81953e086"],

Cell[BoxData["0.6966666666666667`"], "Output",
 CellChangeTimes->{3.76330862390499*^9, 3.763398462886613*^9, 
  3.763402598799946*^9, 3.7634075600361385`*^9, 3.763408372111148*^9},
 CellLabel->"Out[80]=",ExpressionUUID->"df31691b-37c5-4e5b-b96c-bebbbf771672"]
}, Open  ]],

Cell["70%, the small difference is not significant.", "Text",
 CellChangeTimes->{{3.7633086320628386`*^9, 
  3.763308656773971*^9}},ExpressionUUID->"80a0fbbe-4afd-4f53-aa4b-\
2c26df63ea7f"],

Cell["Let\[CloseCurlyQuote]s try a simple Neural Network.", "Text",
 CellChangeTimes->{{3.763309337581126*^9, 
  3.763309347093317*^9}},ExpressionUUID->"051f92f3-c5ce-414e-a529-\
0a343360116e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nn2", " ", "=", " ", 
  RowBox[{"NetChain", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", " ", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"LinearLayer", "[", 
       RowBox[{
        RowBox[{"n", "*", "10"}], "+", "1"}], "]"}], ",", "Ramp", ",", 
      RowBox[{"DropoutLayer", "[", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"LinearLayer", "[", "]"}], ",", "Ramp", ",", 
      RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", "\n", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Class\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "}"}], "]"}]}], ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"n", "*", "10"}], "+", "1"}], "}"}]}]}], "\[IndentingNewLine]",
    "]"}]}]], "Input",
 CellChangeTimes->{{3.7633093498064413`*^9, 3.763309362959276*^9}, {
  3.7633094261306553`*^9, 3.763309426383054*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"0f5e816c-76ca-4ea6-a346-da629347292a"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"241\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["6", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{241, 241}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{241}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {241}, "$OutputSize" -> 241, 
                    "$InputSize" -> 241, "$InputDimensions" -> {241}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{241}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{241}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {241}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{241}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{241}, NeuralNetworks`RealT]]], 
                    "3" -> Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{241}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{241}, NeuralNetworks`RealT]]], 
                    "4" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{3, 241}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 241, "$InputDimensions" -> {241}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{241}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {3}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{241}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {1, 2, 3}, "InputDepth" -> 1, "Dimensions" -> 
                    3, "$Rank" -> 0], 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"241\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"241\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"241\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"241\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7633093652551975`*^9, 3.763309427156602*^9, 
  3.7633984630505195`*^9, 3.763402598856913*^9, 3.763407560088109*^9, 
  3.76340837221309*^9},
 CellLabel->"Out[81]=",ExpressionUUID->"dac0e255-ae74-4615-aa81-fe0207ada5bc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"SeedRandom", "[", "02042019", "]"}], "\[IndentingNewLine]", 
 RowBox[{"net2", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"nn2", ",", "combTrainingSample", ",", " ", 
    RowBox[{"ValidationSet", "\[Rule]", "combValidationSample"}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.7633093801278887`*^9, 3.7633094077572546`*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"1d2e569e-3bda-4a41-8521-d6b8b4a3cc60"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"241\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["6", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{241, 241}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{241}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {241}, "$OutputSize" -> 241, 
                    "$InputSize" -> 241, "$InputDimensions" -> {241}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{241}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{241}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {241}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{241}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{241}, NeuralNetworks`RealT]]], 
                    "3" -> Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{241}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{241}, NeuralNetworks`RealT]]], 
                    "4" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{3, 241}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{3}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 241, "$InputDimensions" -> {241}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{241}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {3}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{241}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {1, 2, 3}, "InputDepth" -> 1, "Dimensions" -> 
                    3, "$Rank" -> 0], 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"241\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"241\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"241\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"241\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7633094096789293`*^9, 3.7633094762695765`*^9, 
  3.7633961512344465`*^9, 3.7633985560475435`*^9, 3.7634026697277303`*^9, 
  3.763407624636015*^9, 3.763408440824565*^9},
 CellLabel->"Out[83]=",ExpressionUUID->"b3ebe04b-8f90-45fa-92db-d9d01a626978"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"241\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["6", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{241, 241}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{241}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {241}, "$OutputSize" -> 241, 
                    "$InputSize" -> 241, "$InputDimensions" -> {241}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{241}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{241}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {241}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{241}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{241}, NeuralNetworks`RealT]]], 
                    "3" -> Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{241}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{241}, NeuralNetworks`RealT]]], 
                    "4" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{3, 241}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{3}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3}, "$OutputSize" -> 3, 
                    "$InputSize" -> 241, "$InputDimensions" -> {241}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{241}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {3}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{241}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {1, 2, 3}, "InputDepth" -> 1, "Dimensions" -> 
                    3, "$Rank" -> 0], 
                    NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"241\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"241\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"241\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"241\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7633094096789293`*^9, 3.7633094762695765`*^9, 
  3.7633961512344465`*^9, 3.7633985560475435`*^9, 3.7634026697277303`*^9, 
  3.763407624636015*^9, 3.763408440824565*^9, 3.7650513112179413`*^9},
 CellLabel->"Out[83]=",ExpressionUUID->"7d50bd7b-54dc-4e62-8023-0efd9ce29c52"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{"net2", ",", " ", "combTestSample", ",", " ", "\"\<Accuracy\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.763309459973033*^9, 3.763309486678056*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"86e0047f-80ae-49a6-b602-6626e5afb646"],

Cell[BoxData["0.32666666666666666`"], "Output",
 CellChangeTimes->{3.76330948969526*^9, 3.7633961516542063`*^9, 
  3.7633985565566397`*^9, 3.7634026701866436`*^9, 3.7634076251108837`*^9, 
  3.763408441326401*^9, 3.7650513117928658`*^9},
 CellLabel->"Out[84]=",ExpressionUUID->"664468d5-c8ff-47dd-a796-730840dd32af"]
}, Open  ]],

Cell["\<\
Performance dropped significantly to random classification. I did not \
expected this result. But help us to show that the used topology has no real \
way to discern on the useful information for the classification.\
\>", "Text",
 CellChangeTimes->{{3.763309529325739*^9, 3.7633095458446426`*^9}, {
  3.76339597455112*^9, 
  3.7633960316149993`*^9}},ExpressionUUID->"030b14a0-0605-4e36-8c9a-\
1af0f48ea0aa"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{
  "net2", ",", " ", "combTrainingSample", ",", " ", "\"\<Accuracy\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7633960427053995`*^9, 3.7633960545843754`*^9}},
 CellLabel->"In[85]:=",ExpressionUUID->"c8f3f84b-ad6a-49f7-81b1-b93d48cb08ca"],

Cell[BoxData["0.32666666666666666`"], "Output",
 CellChangeTimes->{3.763396055488495*^9, 3.7633961522768497`*^9, 
  3.7633985570386925`*^9, 3.7634026707042475`*^9, 3.7634076256085987`*^9, 
  3.7634084418261147`*^9, 3.765051312320129*^9},
 CellLabel->"Out[85]=",ExpressionUUID->"b94de0d4-cb90-4835-8619-385070c8613e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["The Model", "Subchapter",
 CellChangeTimes->{{3.763393385051691*^9, 
  3.763393389960454*^9}},ExpressionUUID->"7eeb62a2-2755-46e1-a3ad-\
e45b0a725ab0"],

Cell[TextData[{
 "The first task is to define the proper model. For this problem, a class is \
an integer that defines the number of interactions between the nodes of the \
networks. Follows that a class is composed of ",
 StyleBox["all possible interactions ",
  FontSlant->"Italic"],
 "of degree ",
 StyleBox["k.",
  FontSlant->"Italic"]
}], "Text",
 CellChangeTimes->{{3.7633967680071435`*^9, 3.763396805335478*^9}, {
  3.7633968695590677`*^9, 3.763396875662999*^9}, {3.763397007255756*^9, 
  3.763397016518819*^9}, {3.763397059303087*^9, 3.7633970989913907`*^9}, {
  3.7634077545277805`*^9, 
  3.7634077554698524`*^9}},ExpressionUUID->"6b0742e9-84d1-4385-b3f6-\
bdb5027357ba"],

Cell[TextData[{
 "In other words, the model is composed of the ",
 StyleBox["sets of",
  FontWeight->"Bold"],
 " ",
 StyleBox["adjacency matrices ",
  FontWeight->"Bold"],
 "of the interactions between the vertices of the network corresponding to \
the evolution of the model ",
 StyleBox["and ",
  FontWeight->"Bold"],
 "the . This is of course a really big set. But the complexity of these \
matrices, "
}], "Text",
 CellChangeTimes->{{3.7633933939842186`*^9, 3.763393437087446*^9}, {
  3.7633937049926825`*^9, 3.7633937253756113`*^9}, {3.763393790536425*^9, 
  3.7633938101844077`*^9}, {3.7633939052154093`*^9, 3.7633939882973557`*^9}, {
  3.7633967617990575`*^9, 3.7633967638878164`*^9}, {3.7633971105271683`*^9, 
  3.763397126279236*^9}, {3.763397245111727*^9, 3.7633972556315427`*^9}, {
  3.763407769014767*^9, 
  3.7634077861757574`*^9}},ExpressionUUID->"df435fba-8aed-4317-b973-\
a0ae1ea05dfb"],

Cell[TextData[{
 "The main challenge we have with algorithmic classification is that NW \
networks is that mutations aren\[CloseCurlyQuote]t ",
 StyleBox["local, ",
  FontSlant->"Italic"],
 "therefore we can expect that the the block partition approach used by the \
Cellular automaton case will yield worse results. Also, doing conditional \
algorithmic complexity over 2^24 strings in order to get over the block size \
limitation (for this case) is too costly. "
}], "Text",
 CellChangeTimes->{{3.76339143640797*^9, 3.763391646792248*^9}, {
  3.763391912808131*^9, 
  3.763392110360403*^9}},ExpressionUUID->"36f2ca9b-5f37-40c6-a210-\
0204c2126c57"],

Cell[TextData[{
 "Now, from the previous experiment, is clear that BDM works on some \
capacity, but that is with the ",
 StyleBox["universal ",
  FontSlant->"Italic"],
 "distribution. I\[CloseCurlyQuote]m not confident that algorithmic  \
classification restricted to the set of rules will work nearly as well."
}], "Text",
 CellChangeTimes->{{3.763392112114991*^9, 3.7633921408081455`*^9}, {
  3.7633930434078174`*^9, 3.7633930440325327`*^9}, {3.7633930950085316`*^9, 
  3.7633931018719425`*^9}},ExpressionUUID->"4ed967c6-ed91-45cc-b028-\
da96d35e8f4f"],

Cell[TextData[{
 "As consequence of the previous points, we have that ",
 StyleBox["classification by BDM weights is an",
  FontWeight->"Bold"],
 " ",
 StyleBox["instance of algorithmic classification ",
  FontWeight->"Bold"],
 "given the following:"
}], "Text",
 CellChangeTimes->{{3.7634078807038755`*^9, 
  3.763408066181958*^9}},ExpressionUUID->"8451e67c-517c-4acf-ac0d-\
d0023844c036"],

Cell[TextData[{
 "The ",
 StyleBox["real centers ",
  FontSlant->"Italic"],
 "are the sets of all possible algorithmic relations, including the adjacency \
matrix and related binary operations, related to k=3. Therefore, the expected \
complexity of specifying a member of each class increases in function of this \
value (k). "
}], "Text",
 CellChangeTimes->{{3.763408070150543*^9, 3.7634081129505816`*^9}, {
  3.7634085067571077`*^9, 3.7634085307495737`*^9}, {3.7634086980850515`*^9, 
  3.7634087177972984`*^9}, {3.763409491812278*^9, 3.763409672339752*^9}, {
  3.7634118860183353`*^9, 
  3.7634119012988596`*^9}},ExpressionUUID->"0554018a-8bba-4885-9f9c-\
85d1607f592c"],

Cell["\<\
For instance, the number of possible boolean operations of degree k is \
2^(2^k) and the number of possible adjacency matrices is n\\times Comb(n,k) \
(for row of each matrix, we must choose k incoming edges out of n possible \
nodes) . Follows that the total number of possible network topologies is n^2 \
\\times 2^(2^k) \\times  Comb(n,k)  and the expected number of bits required \
to specify a member of this set is Log(n^2 \\times 2^(2^k) \\times  \
Comb(n,k)).\
\>", "Text",
 CellChangeTimes->{{3.763410026359419*^9, 3.7634100907072525`*^9}, {
  3.763411542427598*^9, 3.763411861315563*^9}, {3.763411909779905*^9, 
  3.7634119137306995`*^9}},ExpressionUUID->"5adb069b-8ad1-4506-8a05-\
5f013afb4abe"],

Cell[TextData[{
 "Therefore, the ",
 StyleBox["expected ",
  FontSlant->"Italic"],
 "algorithmic complexity of the members of  each class increases with k and n \
and we can do a ",
 StyleBox["coarse ",
  FontSlant->"Italic"],
 "algorithmic classification instance according to this idea."
}], "Text",
 CellChangeTimes->{{3.763409610468504*^9, 3.7634096163153486`*^9}, 
   3.7634096695522203`*^9, {3.7634119460592933`*^9, 3.763411950890444*^9}, {
   3.7634121411465263`*^9, 3.7634121486822753`*^9}, {3.7634121971782455`*^9, 
   3.763412274033976*^9}},ExpressionUUID->"35a2910e-04f8-40e1-96a0-\
45a04ee0589a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"model", " ", "=", " ", 
  RowBox[{"AssociationMap", "[", 
   RowBox[{
    RowBox[{"0", "&"}], ",", " ", "classes"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7634122786821203`*^9, 3.7634123441430655`*^9}},
 CellLabel->"In[86]:=",ExpressionUUID->"7f1d22c7-f1c9-4956-9dee-c126ccf28e30"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"1", "\[Rule]", "0"}], ",", 
   RowBox[{"2", "\[Rule]", "0"}], ",", 
   RowBox[{"3", "\[Rule]", "0"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.7634123377583284`*^9, 3.7634123448161087`*^9}, 
   3.765051312403083*^9},
 CellLabel->"Out[86]=",ExpressionUUID->"5db3f1bb-90a9-450d-904b-362acc2df66c"]
}, Open  ]],

Cell["Training the model:", "Text",
 CellChangeTimes->{{3.76341234974494*^9, 
  3.7634123537861433`*^9}},ExpressionUUID->"9ae18cd8-ce61-48e1-9b8f-\
4419c20170d9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ChooseDat", "[", 
   RowBox[{"data_", ",", " ", "dig_"}], "]"}], ":=", 
  RowBox[{"Select", "[", 
   RowBox[{"data", ",", " ", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", "dig"}], ")"}], "&"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{3.7634128797158947`*^9},
 CellLabel->"In[87]:=",ExpressionUUID->"cb2607d7-e70b-45ae-b620-36dd755f4aac"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Mean", "@", 
  RowBox[{"Keys", "@", 
   RowBox[{"ChooseDat", "[", 
    RowBox[{"BDMTestSample", ",", "1"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.7634128923697147`*^9, 3.7634129506117964`*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"abb6f580-6714-434a-a77e-e28d81b6c35d"],

Cell[BoxData["2671.456749257046`"], "Output",
 CellChangeTimes->{{3.763412907634223*^9, 3.7634129510795283`*^9}, 
   3.7650513124690447`*^9},
 CellLabel->"Out[88]=",ExpressionUUID->"26cfeb3a-a6dd-4f6a-835e-929592f49f97"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"With", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"cls", "=", 
       RowBox[{"classes", "[", 
        RowBox[{"[", "i", "]"}], "]"}]}], "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{
      RowBox[{"model", "[", "cls", "]"}], "=", " ", 
      RowBox[{"Mean", "@", 
       RowBox[{"Keys", "@", 
        RowBox[{"ChooseDat", "[", 
         RowBox[{"BDMTestSample", ",", "cls"}], "]"}]}]}]}]}], 
    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", 
     RowBox[{"Length", "@", "classes"}]}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.7634123577549825`*^9, 3.7634124615623865`*^9}, {
  3.7634128698595943`*^9, 3.763412885905838*^9}, {3.763412956467448*^9, 
  3.7634129665537715`*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"2b58b809-8f5c-436a-ad29-4114ce355efc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2671.456749257046`", ",", "4937.35101399998`", ",", "6837.638552323586`"}],
   "}"}]], "Output",
 CellChangeTimes->{{3.7634124417698646`*^9, 3.7634124508039885`*^9}, {
   3.763412960475353*^9, 3.7634129671294413`*^9}, 3.765051312505024*^9},
 CellLabel->"Out[89]=",ExpressionUUID->"6706fc62-9573-4f0f-94fb-304b17b5e19d"]
}, Open  ]],

Cell["\<\
And we classify a sample with respect to which BDM is the closest to it.\
\>", "Text",
 CellChangeTimes->{{3.7634129833883433`*^9, 
  3.763413022040905*^9}},ExpressionUUID->"b33d4a8c-b1e2-41c0-a52f-\
40b740be68f1"],

Cell[BoxData[
 RowBox[{"Remove", "[", "pred", "]"}]], "Input",
 CellChangeTimes->{{3.7634135041782274`*^9, 3.763413508617399*^9}},
 CellLabel->"In[90]:=",ExpressionUUID->"0d8014e0-4925-4417-a2e9-acfd2c685ea5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"pred", "[", 
   RowBox[{"m_", ",", "x_"}], "]"}], ":=", " ", 
  RowBox[{
   RowBox[{"MinimalBy", "[", 
    RowBox[{
     RowBox[{"Keys", "@", "m"}], ",", " ", 
     RowBox[{
      RowBox[{"Abs", "[", 
       RowBox[{
        RowBox[{"m", "[", "#", "]"}], "-", "x"}], "]"}], "&"}]}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.763413093852894*^9, 3.7634131076263475`*^9}, {
   3.7634131650902905`*^9, 3.7634131958909082`*^9}, 3.76341347401201*^9, 
   3.763413529499078*^9, {3.7634135883431654`*^9, 3.763413589393383*^9}, {
   3.763413812404727*^9, 3.763413813225733*^9}},
 CellLabel->"In[91]:=",ExpressionUUID->"def0926f-7f8f-4c9c-b172-1f4d4466955e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"right", " ", "=", " ", "0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"wrong", " ", "=", " ", 
  RowBox[{"List", "[", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Table", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"If", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"pred", "[", "\[IndentingNewLine]", 
        RowBox[{"model", ",", " ", 
         RowBox[{
          RowBox[{"BDMTestSample", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "\[IndentingNewLine]", "]"}], 
       "\[Equal]", " ", 
       RowBox[{
        RowBox[{"BDMTestSample", "[", 
         RowBox[{"[", "i", "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"right", " ", "=", " ", 
       RowBox[{"right", " ", "+", "1"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"wrong", "=", 
       RowBox[{"Append", "[", 
        RowBox[{"wrong", ",", 
         RowBox[{"BDMTestSample", "[", 
          RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
     "]"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", 
      RowBox[{"Length", "[", "BDMTestSample", "]"}]}], "}"}]}], "]"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.7634135759380274`*^9, 3.7634136139747868`*^9}, {
  3.763413684619102*^9, 3.763413686168891*^9}, {3.7634137372582293`*^9, 
  3.763413764068917*^9}, {3.763413827491764*^9, 3.7634138300090837`*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"dab57b50-d4e6-4b2f-bb4c-3f3bc221e5ee"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{
  3.763413617077386*^9, 3.7634136873117204`*^9, 3.763413765092848*^9, {
   3.7634138181717277`*^9, 3.7634138313370714`*^9}, 3.7650513125639925`*^9},
 CellLabel->"Out[93]=",ExpressionUUID->"81202f59-2929-4d13-81fe-aa6a4c589546"]
}, Open  ]],

Cell["And the accuracy is:", "Text",
 CellChangeTimes->{{3.7634136416438727`*^9, 
  3.7634136495050945`*^9}},ExpressionUUID->"498c484f-82ba-4e20-a518-\
b0bc08f1c99c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"N", "@", "right"}], "/", 
  RowBox[{"Length", "[", "BDMTestSample", "]"}]}]], "Input",
 CellChangeTimes->{{3.7634136302032824`*^9, 3.7634136364431295`*^9}},
 CellLabel->"In[95]:=",ExpressionUUID->"db927f2a-1b60-44c0-9f17-32eaf76033b0"],

Cell[BoxData["0.7133333333333334`"], "Output",
 CellChangeTimes->{3.763413650872128*^9, 3.7634136890308495`*^9, 
  3.7634138337014923`*^9, 3.765051312634951*^9},
 CellLabel->"Out[95]=",ExpressionUUID->"82b5ad13-17d1-4e9a-908b-36b552adb82a"]
}, Open  ]],

Cell["On the test set.", "Text",
 CellChangeTimes->{{3.76506315677977*^9, 
  3.7650631600607347`*^9}},ExpressionUUID->"a5747a2f-4885-4112-955e-\
816bc8e4bbb4"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"right", " ", "=", " ", "0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"wrong2", " ", "=", " ", 
  RowBox[{"List", "[", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Table", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"If", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"pred", "[", "\[IndentingNewLine]", 
        RowBox[{"model", ",", " ", 
         RowBox[{
          RowBox[{"BDMTrainingSample", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "\[IndentingNewLine]", "]"}], 
       "\[Equal]", " ", 
       RowBox[{
        RowBox[{"BDMTrainingSample", "[", 
         RowBox[{"[", "i", "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"right", " ", "=", " ", 
       RowBox[{"right", " ", "+", "1"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"wrong2", "=", 
       RowBox[{"Append", "[", 
        RowBox[{"wrong2", ",", 
         RowBox[{"BDMTrainingSample", "[", 
          RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
     "]"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", 
      RowBox[{"Length", "[", "BDMTrainingSample", "]"}]}], "}"}]}], "]"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.7650631618340235`*^9, 3.7650632195418477`*^9}},
 CellLabel->
  "In[122]:=",ExpressionUUID->"07e72e9a-7e7a-49dc-b3a8-7d9f5b524252"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{{3.765063198896862*^9, 3.765063221990492*^9}},
 CellLabel->
  "Out[123]=",ExpressionUUID->"53818d3b-9cf6-4152-a9b6-993252720bd1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"N", "@", "right"}], "/", 
  RowBox[{"Length", "[", "BDMTrainingSample", "]"}]}]], "Input",
 CellChangeTimes->{{3.765063209919117*^9, 3.765063234894594*^9}},
 CellLabel->
  "In[125]:=",ExpressionUUID->"1df02bb1-964a-4c7c-af97-ab3e3f07af73"],

Cell[BoxData["0.7000000000000001`"], "Output",
 CellChangeTimes->{3.765063236356097*^9},
 CellLabel->
  "Out[125]=",ExpressionUUID->"3ec2d0c4-f606-49a6-81d6-fe5536a41d10"]
}, Open  ]],

Cell["71 % for which is almost the same as nearest neighbors!", "Text",
 CellChangeTimes->{{3.7634138420742455`*^9, 
  3.7634138670527115`*^9}},ExpressionUUID->"5bc1bdb1-6ff2-48cf-aaab-\
32387f01babf"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Entropy-based Classification", "Chapter",
 CellChangeTimes->{{3.7634843925619745`*^9, 
  3.7634844036896896`*^9}},ExpressionUUID->"5d2d32e4-363e-4bbb-9989-\
2f3989ef09df"],

Cell["\<\
For completeness sake, we will try to see how entropy-based algorithmic \
information measure does in this classification task.\
\>", "Text",
 CellChangeTimes->{{3.763484407867391*^9, 3.763484457568655*^9}, {
  3.7634850588336916`*^9, 
  3.763485070425605*^9}},ExpressionUUID->"c60be89b-13f1-481f-88ca-\
c5d13d05a430"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"EntropyTrainingSample", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Entropy", "[", 
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}], "\[Rule]", 
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ")"}], "&"}], "/@", 
    "TrainingSample"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"EntropyTestSample", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Entropy", "[", 
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}], "\[Rule]", 
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ")"}], "&"}], "/@", 
    "TestSample"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.7634850728653064`*^9, 3.763485110841732*^9}},
 CellLabel->"In[97]:=",ExpressionUUID->"1d00babc-64dd-46fa-9422-4e8002709a7e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"entClass", " ", "=", " ", 
  RowBox[{"Classify", "[", "EntropyTrainingSample", " ", "]"}]}]], "Input",
 CellChangeTimes->{{3.7634851513464537`*^9, 3.763485167628186*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"418ae61b-2baa-481a-9285-cb5d81eb78f7"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Numerical\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "1", "2", "3"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Numerical\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "1", "2", "3"}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"GradientBoostedTrees\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["300", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 300, "ClassNumber" -> 3, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Numerical"]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 7654441683129891127]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 300, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {0.6723792178369615}, "Method" -> "Naive", 
                   "VectorLength" -> 1, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {0.6723792178369615}, 
                   "StandardDeviation" -> {0.03841488043311387}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 1, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                   True, "Invertibility" -> "Perfect", "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                "Model" -> 
                Association[
                 "Matrix" -> {{1.}}, "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.6723792178369615}, 
                    "StandardDeviation" -> {0.03841488043311387}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 1, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0181647, "MaxTrainingMemory" -> 66368, 
                  "DataMemory" -> 2680, "FunctionMemory" -> 21760, 
                  "LanguageVersion" -> {11.3, 0}, "Date" -> 
                  DateObject[{
                    2019, 4, 23, 18, 35, 12.8548257`8.861641148801597}, 
                    "Instant", "Gregorian", -5.], "ProcessorCount" -> 10, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 1, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
             "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
             1884974815402472505]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {0.6723792178369612}, 
             "StandardDeviation" -> {0.038414880433116756`}, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 6593175435314376500]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 5764960275667318102]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[1 -> 1, 2 -> 2, 3 -> 3]}, "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 689074351820263694, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 5167563583747307827]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[
       1 -> 0.3333333333333333, 2 -> 0.3333333333333333, 3 -> 
        0.3333333333333333]], "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {3, 4}, 0., {
      1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0, 
    "TieBreaker" -> RandomChoice, "PerformanceGoal" -> Automatic, 
    "BatchProcessing" -> Automatic, "Model" -> Association["Trees" -> {
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.03500000014901161, -0.004285714589059353, \
-0.025714285671710968`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{-0.006724138278514147, 0.006290322635322809}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.0325000025331974, 0., 0.027857143431901932`}],
           "Children" -> RawArray["Integer16",{{-1, 2}, {-2, -3}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.03168940916657448, -0.004090063739567995, \
-0.023936500772833824`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{-0.006387556437402964, 0.005977458320558071}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.030665678903460503`, -0.00011999899288639426`,
             0.025659432634711266`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.02874058112502098, -0.0039056697860360146`, \
-0.022273767739534378`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{-0.006058949511498213, 0.005696324165910482}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.02894645556807518, -0.00022787471243645996`, 
            0.02368372119963169}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.026099149137735367`, -0.0037315022200345993`, \
-0.020716054365038872`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{-0.005740875843912363, 0.005442166700959206}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.02733170986175537, -0.00032432645093649626`, 
            0.021900949999690056`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.02372182346880436, -0.0035666697658598423`, \
-0.019254930317401886`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{-0.005435221828520298, 0.0052110375836491585`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.025812648236751556`, -0.0004100833320990205, 
            0.02028712071478367}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.021573606878519058`, -0.0036521165166050196`, \
-0.018179012462496758`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{-0.005143307615071535, 0.004999659955501556}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.024381890892982483`, -0.0004858608008362353, 
            0.01882217824459076}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.019625866785645485`, -0.003471172181889415, \
-0.016881629824638367`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{-0.004868205636739731, 0.004807233810424805}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.023033173754811287`, -0.0005583330057561398, 
            0.017495688050985336`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.017854822799563408`, -0.0033005625009536743`, \
-0.015661893412470818`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{-0.004607871640473604, 0.004629218485206366}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.021761110052466393`, -0.0006211238796822727, 
            0.016285458579659462`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.01624060980975628, -0.003139510052278638, \
-0.014515010640025139`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{-0.004362542647868395, 0.004463775549083948}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.0205609742552042, -0.0006750343018211424, 
            0.015179294161498547`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.01476641558110714, -0.002987317508086562, \
-0.013436662964522839`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{-0.004132207483053207, 0.004309367388486862}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.019428569823503494`, -0.0007208397728390992, 
            0.014166656881570816`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.013417864218354225`, -0.0028433743864297867`, \
-0.012422927655279636`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{-0.003916676621884108, 0.004164717625826597}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.01836010068655014, -0.0007592530455440283, 
            0.013238321989774704`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.012182551436126232`, -0.002707121893763542, \
-0.011470197699964046`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{-0.003715603146702051, 0.00402873707935214}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.017352145165205002`, -0.0007909559644758701, 
            0.01238622609525919}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.011049681343138218`, -0.002578058047220111, \
-0.010575131513178349`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{-0.00352852582000196, 0.0039005212020128965`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.01640152744948864, -0.000816588755697012, 
            0.011603230610489845`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.010009794495999813`, -0.0024557276628911495`, \
-0.009734601713716984}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.229803204536438, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.005471311509609222, -0.0017006692942231894`, \
-0.002989286556839943}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.015505300834774971`, -0.000836735125631094, 
            0.010883024893701077`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.009308729320764542, -0.0023566570598632097`, \
-0.009085527621209621}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{-0.003536792006343603, 0.003987714182585478}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.014505263417959213`, -0.0008657592115923762, 
            0.010020119138062}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.008411694318056107, -0.0022465845104306936`, \
-0.008337839506566525}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.229803204536438, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.00542131531983614, -0.0017984774895012379`, \
-0.002756029600277543}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.013715939596295357`, -0.0008768895640969276, 
            0.009425739757716656}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.007841737940907478, -0.0021620537154376507`, \
-0.007773641962558031}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{-0.0035474058240652084`, 0.00405163923278451}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.012817054986953735`, -0.0009009629720821977, 
            0.008681919425725937}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.00706378323957324, -0.002062734914943576, \
-0.007109062280505896}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{-0.0033787479624152184`, 0.003909911494702101}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.012124009430408478`, -0.0009047726634889841, 
            0.008192397654056549}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.00634786207228899, -0.0019683712162077427`, \
-0.006486475467681885}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.229803204536438, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.0055513083934783936`, -0.0020024478435516357`, \
-0.002622197149321437}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.011472330428659916`, -0.0009053784888237715, 
            0.007740287110209465}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.005945782642811537, -0.0019031624542549253`, \
-0.006036932580173016}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{-0.0034152520820498466`, 
            0.0039651780389249325`}], "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.010703065432608128`, -0.0009248581482097507, 
            0.0071320487186312675`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.42067378759384155`}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.005320012103766203, -0.005370172206312418, \
-0.0016898579197004437`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.229803204536438, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.005453068297356367, -0.002075168304145336, \
-0.0024446025490760803`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.010133834555745125`, -0.0009202390210703015, 
            0.006761663593351841}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.42067378759384155`}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.005000786855816841, -0.005145978648215532, \
-0.0015040828147903085`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{-0.0034833073150366545`, 0.004026118665933609}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.00944260973483324, -0.0010109590366482735`, 
            0.00630869111046195}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.42067378759384155`}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.004450105130672455, -0.004933953285217285, \
-0.0011948089813813567`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{-0.0033593419939279556`, 
            0.0038988867308944464`}], "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{0.005679069086909294, -0.0045005870051681995`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.004245031159371138, -0.0011622757883742452`, \
-0.0049363416619598866`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.229803204536438, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.005709439050406218, -0.0024389829486608505`, \
-0.0025204564444720745`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.4587354063987732, 0.0800827145576477}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.009143993258476257, 
            0.006396681070327759, -0.001215011696331203}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.42067378759384155`}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.004010975360870361, -0.004649467766284943, \
-0.0008687640656717122}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.229803204536438, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.005400299094617367, -0.0023674482945352793`, \
-0.0022793575190007687`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{0.005753034725785255, -0.004562139976769686}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.004088068380951881, -0.0009572907583788037, \
-0.004712811205536127}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.229803204536438, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.0053214565850794315`, -0.00235729874111712, \
-0.002327441703528166}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.4587354063987732, 0.0800827145576477}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.008568119257688522, 
            0.006041048094630241, -0.0013779510045424104`}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.42067378759384155`}], 
          "LeafValues" -> 
          RawArray["Real32",{
            
            0.0038647991605103016`, -0.004398901015520096, \
-0.0007147928117774427}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{-0.003445209702476859, 0.00382254458963871}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{0.005944391712546349, -0.00476481020450592}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.003690142650157213, -0.0007460376364178956, \
-0.004389252979308367}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.229803204536438, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.00541887991130352, -0.0024415128864347935`, \
-0.002454821951687336}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{0.005567917600274086, -0.004455478396266699}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.003780024591833353, -0.0007138499058783054, \
-0.004350366070866585}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.229803204536438, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.005343793425709009, -0.002353800693526864, \
-0.0025520813651382923`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.4587354063987732, 0.0800827145576477}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.008253253996372223, 
            0.005975216627120972, -0.0015839464031159878`}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.39890754222869873`}], "LeafValues" -> 
          RawArray["Real32",{-0.0023808276746422052`, 
            0.0035214372910559177`}], "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.229803204536438, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.005055444780737162, -0.0022853496484458447`, \
-0.002311035990715027}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{0.005800142884254456, -0.004689433611929417}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.003968860022723675, -0.0006360825500451028, \
-0.004302930552512407}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{-0.0034207634162157774`, 0.003584908554330468}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{0.005488795693963766, -0.004470482002943754}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.003779943799600005, -0.0006346507580019534, \
-0.004217309877276421}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.229803204536438, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.005209792871028185, -0.0022771048825234175`, \
-0.0026795256417244673`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.4587354063987732, 0.0800827145576477}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.008118237368762493, 
            0.0059953234158456326`, -0.0017014977056533098`}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.39890754222869873`}], "LeafValues" -> 
          RawArray["Real32",{-0.0022852448746562004`, 0.003530778456479311}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.229803204536438, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.00493048457428813, -0.00221334770321846, \
-0.0024292354937642813`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{0.0055814520455896854`, -0.004532299004495144}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.003955151420086622, -0.0005629597580991685, \
-0.004183627665042877}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], 
          "NumericalThresholds" -> RawArray["Real32",{0.3226293623447418}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.0033705178648233414`, 0.003429422853514552}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.4587354063987732, 0.0800827145576477}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.007777136750519276, 
            0.0057569281198084354`, -0.0017469202866777778`}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.39890754222869873`}], "LeafValues" -> 
          RawArray["Real32",{-0.0022769044153392315`, 
            0.0035422013606876135`}], "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.229803204536438, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.0048756166361272335`, -0.0022202751133590937`, \
-0.002450494794175029}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{0.005532925482839346, -0.004462807904928923}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.0038701877929270267`, -0.000529867596924305, \
-0.004097542259842157}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{-0.003332677762955427, 0.003343957243487239}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.4587354063987732, 0.0800827145576477}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.007601392921060324, 
            0.005707436706870794, -0.001768608228303492}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.39890754222869873`}], "LeafValues" -> 
          RawArray["Real32",{-0.0022664349526166916`, 
            0.0035474414471536875`}], "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.229803204536438, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.004821165930479765, -0.0022238106466829777`, \
-0.0024641486816108227`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{0.005481048487126827, -0.004396082367748022}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.0037911657709628344`, -0.0004998602089472115, \
-0.0040173656307160854`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.229803204536438, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.004595267586410046, -0.0021360311657190323`, \
-0.002422432182356715}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.4587354063987732, 0.0800827145576477}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.00743330642580986, 
            0.005656043998897076, -0.0017899003578349948`}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.39890754222869873`}], "LeafValues" -> 
          RawArray["Real32",{-0.0021157192531973124`, 
            0.0034139438066631556`}], "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{-0.003451831638813019, 0.0034421023447066545`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{0.00555963721126318, -0.004490293562412262}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.0037033502012491226`, -0.0004748789651785046, \
-0.003935490734875202}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.229803204536438, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.004567467141896486, -0.002142516663298011, \
-0.0024457694962620735`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.4587354063987732, 0.0800827145576477}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.007280603051185608, 
            0.005615220870822668, -0.0018075840780511498`}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.39890754222869873`}], "LeafValues" -> 
          RawArray["Real32",{-0.002113211899995804, 0.003418439067900181}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{-0.003394489176571369, 0.003352700499817729}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{0.005492497235536575, -0.004414422437548637}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.003622558433562517, -0.0004520255606621504, \
-0.0038590976037085056`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.229803204536438, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.004536698572337627, -0.0021462133154273033`, \
-0.0024609146639704704`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.4587354063987732, 0.1586674153804779}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.0008569949422962964, 
            0.0055710794404149055`, -0.006151643581688404}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.39890754222869873`}], "LeafValues" -> 
          RawArray["Real32",{-0.0020801646169275045`, 0.00339491362683475}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{-0.00331830233335495, 0.0032345319632440805`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{0.005332749802619219, -0.00428028404712677}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.0036721243523061275`, -0.000584596476983279, \
-0.00385648338124156}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.229803204536438, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.004571374971419573, -0.0022513261064887047`, \
-0.0024656737223267555`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.4587354063987732, 0.0800827145576477}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.007273863535374403, 
            0.005519502330571413, -0.001641823910176754}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.39890754222869873`}], "LeafValues" -> 
          RawArray["Real32",{-0.0020759047474712133`, 0.003391757607460022}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{-0.003269478213042021, 0.003166052047163248}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{0.005274759139865637, -0.004219281952828169}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.0800827145576477, 0.4587354063987732}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.003590631764382124, -0.0005045359139330685, \
-0.0037197801284492016`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.229803204536438, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.004530928563326597, -0.0022407080978155136`, \
-0.0024665084201842546`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.4587354063987732, 0.0800827145576477}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.0071143703535199165`, 
            0.005467933136969805, -0.0016721817664802074`}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.39890754222869873`}], "LeafValues" -> 
          RawArray["Real32",{-0.002070227637887001, 0.0033865165896713734`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{-0.0032223896123468876`, 
            0.0031022171024233103`}], "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{0.005215827375650406, -0.004160525742918253}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.2935314178466797}], "LeafValues" -> 
          RawArray["Real32",{0.002725839614868164, -0.0025237035006284714`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.229803204536438, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.004489388316869736, -0.0022306328173726797`, \
-0.0024616357404738665`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.4587354063987732, 0.1586674153804779}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.0007426351075991988, 
            0.005414030514657497, -0.005986874923110008}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.39890754222869873`}], "LeafValues" -> 
          RawArray["Real32",{-0.0020222675520926714`, 
            0.0033333145547658205`}], "Children" -> 
          RawArray["Integer16",{{-1, -2}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.229803204536438, 0.4750361442565918}], 
          "LeafValues" -> 
          RawArray["Real32",{
            0.00431795185431838, -0.0022942903451621532`, \
-0.0022098461631685495`}], "Children" -> 
          RawArray["Integer16",{{-1, 2}, {-2, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{0.005070425104349852, -0.004039455205202103}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.2935314178466797}], "LeafValues" -> 
          RawArray["Real32",{0.00296202814206481, -0.002652836265042424}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1}], "NumericalThresholds" -> 
          RawArray["Real32",{0.3226293623447418}], "LeafValues" -> 
          RawArray["Real32",{-0.003252256428822875, 0.0030393118504434824`}], 
          "Children" -> RawArray["Integer16",{{-1, -2}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> RawArray["Integer16",{1, 1}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{0.4587354063987732, 0.0800827145576477}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.006977779790759087, 
            0.0052209580317139626`, -0.0015482192393392324`}], "Children" -> 
          RawArray["Integer16",{{2, -2}, {-1, -3}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]]}, "ClassNumber" -> 3, "IterationsNumber" -> 50, "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["DensifyNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 1082235777738126775, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
              "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
             "Allowed"]]}, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Method" -> "GradientBoostedTrees", "Options" -> 
      Association[
       "BoostingMethod" -> 
        Association["Value" -> "Gradient", "Options" -> Association[]], 
        MaxTrainingRounds -> 
        Association["Value" -> 50, "Options" -> Association[]], 
        "LeavesNumber" -> 
        Association["Value" -> 60, "Options" -> Association[]], 
        "LearningRate" -> 
        Association["Value" -> 0.1, "Options" -> Association[]], 
        ValidationSet -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "MaxBinNumber" -> 
        Association["Value" -> 255, "Options" -> Association[]], 
        "ThreadNumber" -> 
        Association["Value" -> 10, "Options" -> Association[]], "MaxDepth" -> 
        Association["Value" -> 6, "Options" -> Association[]], "LeafSize" -> 
        Association["Value" -> 90, "Options" -> Association[]], 
        "FeatureFraction" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "BaggingFraction" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "BaggingFrequency" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "MinGainToSplit" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], "LossFunction" -> 
        Association["Value" -> Automatic, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[1.0758657827226796`, 0.02512451278175275], "Accuracy" -> 
         PlusMinus[0.4223392573658594, 0.060762195217488234`], 
         "EvaluationTime" -> 0.00026640888888888886`, "TestSize" -> 120, 
         "TrainingSize" -> 240, "TrainingTime" -> 0.11664763333333333`, 
         "TrainingMemory" -> 2.181565333333333*^6, "ModelMemory" -> 289136., 
         "ExperimentCount" -> 2, "ModelUtility" -> 0.39961481380012026`, 
         "MeanCrossEntropyHistory" -> {
           PlusMinus[1.0991831688141582`, 0.029667154403211986`], 
           PlusMinus[1.0632667003500746`, 0.02180747672659886]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.38251366120218594`, 0.06256340621116041], 
           PlusMinus[0.46448087431694024`, 0.06435685907644231]}, 
         "Configuration" -> {
          "GradientBoostedTrees", "BoostingMethod" -> "Gradient", 
           MaxTrainingRounds -> 50, "LeavesNumber" -> 60, "LearningRate" -> 
           0.1, ValidationSet -> Automatic, "MaxBinNumber" -> 255, 
           "ThreadNumber" -> 10, "MaxDepth" -> 6, "LeafSize" -> 90, 
           "FeatureFraction" -> 1, "BaggingFraction" -> 1, "BaggingFrequency" -> 
           0, "MinGainToSplit" -> 0, "L1Regularization" -> 0, 
           "L2Regularization" -> 0, "LossFunction" -> Automatic}, 
         "FinalTrainingSize" -> 300], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Vector[TypeSystem`AnyType, 17], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 240011529945189]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0972902363145631`, 0.0029540401224892932`], 
              "Accuracy" -> 
              PlusMinus[0.34586379261307504`, 0.02375229645752099], 
              "EvaluationTime" -> 4.417327586206897*^-6, "TestSize" -> 870, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.008640675, 
              "TrainingMemory" -> 64204., "ModelMemory" -> 8832., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.3934338506659078, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0975720666511632`, 0.0049503013209451045`], 
                PlusMinus[1.098161351755009, 0.004973108115388009], 
                PlusMinus[1.0960804647599702`, 0.005088449535244524]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.32736869601829, 0.027469177968609912`], 
                PlusMinus[0.3309468653500899, 0.027553318229148065`], 
                PlusMinus[0.38157684100904943`, 0.028438044486570543`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.1032487443678531`, 0.008760986258448658], 
              "Accuracy" -> 
              PlusMinus[0.3427131309562443, 0.04225870226075157], 
              "EvaluationTime" -> 3.7596*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.007501, 
              "TrainingMemory" -> 67688, "ModelMemory" -> 8832, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.3908988226729009, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.1032487443678531`, 0.006194952793231205]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3427131309562443, 0.02988141493272072]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.086989911145087, 0.01815879022048675], "Accuracy" -> 
              PlusMinus[0.4234512493422997, 0.0457639113821672], 
              "EvaluationTime" -> 8.956111111111111*^-6, "TestSize" -> 120, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.0165908, 
              "TrainingMemory" -> 86125.33333333333, "ModelMemory" -> 8832., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.39605261576001166`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.1077904674151005`, 0.033675519316200414`], 
                PlusMinus[1.0831260001628424`, 0.014514109100255999`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4153005464480876, 0.06349538512925905], 
                PlusMinus[0.43169398907103845`, 0.06385287022054223]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 8.956111111111111*^-6, "MeanCrossEntropy" -> 
             PlusMinus[1.086989911145087, 0.01815879022048675], "ModelMemory" -> 
             8832., "TrainingMemory" -> 86125.33333333333, "TrainingTime" -> 
             0.029379174999999997`], "Index" -> 1], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.2406683452017027`, 0.024172031157595922`], 
              "Accuracy" -> 
              PlusMinus[0.3713289026150693, 0.033272171743401656`], 
              "EvaluationTime" -> 0.000010879568965517241`, "TestSize" -> 870,
               "TrainingSize" -> 10, "TrainingTime" -> 0.005140674999999999, 
              "TrainingMemory" -> 63294., "ModelMemory" -> 5616., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.34680260961934994`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.2279968658954465`, 0.03560196707435961], 
                PlusMinus[1.2623941150612286`, 0.031445660241176905`], 
                PlusMinus[1.2204804849787587`, 0.041060662195548964`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3951252123216279, 0.02861487569303969], 
                PlusMinus[0.3160567573741434, 0.027174289189011606`], 
                PlusMinus[0.40937614257395044`, 0.02882619980031984]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.2770540760295466`, 0.052693686563901984`], 
              "Accuracy" -> 
              PlusMinus[0.29956766957420167`, 0.04561780048717972], 
              "EvaluationTime" -> 5.889000000000001*^-6, "TestSize" -> 200, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.005183, 
              "TrainingMemory" -> 66176, "ModelMemory" -> 5616, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.3354659968313502, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.2770540760295466`, 0.03726006309505356]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.29956766957420167`, 0.03225665606729977]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.1029723637881081`, 0.04335972195159805], "Accuracy" -> 
              PlusMinus[0.36579402252704374`, 0.04676422526340775], 
              "EvaluationTime" -> 0.000014714999999999999`, "TestSize" -> 120,
               "TrainingSize" -> 240, "TrainingTime" -> 0.013794133333333333`,
               "TrainingMemory" -> 95250.66666666666, "ModelMemory" -> 5744., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.3885627786167608, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.1371646013855785`, 0.056782086591383056`], 
                PlusMinus[1.0836506473737142`, 0.04268452355081049]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.38251366120218594`, 0.06256340621116041], 
                PlusMinus[0.34972677595628426`, 0.0613306645975838]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000014714999999999999`, "MeanCrossEntropy" -> 
             PlusMinus[1.1029723637881081`, 0.04335972195159805], 
             "ModelMemory" -> 5744., "TrainingMemory" -> 95250.66666666666, 
             "TrainingTime" -> 0.022383341666666667`], "Index" -> 2], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.102884389675127, 0.013865948366030402`], "Accuracy" -> 
              PlusMinus[0.37657981879787517`, 0.024365231727523605`], 
              "EvaluationTime" -> 0.000053247375, "TestSize" -> 400, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.010348449999999999`, 
              "TrainingMemory" -> 145178., "ModelMemory" -> 85888., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.3906657767624406, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.1015280542079933`, 0.008856356582611852], 
                PlusMinus[1.1025196840464166`, 0.009712695005611142], 
                PlusMinus[1.138816280272362, 0.04120954731382157]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3795379537953796, 0.04844356649070424], 
                PlusMinus[0.3786008305627611, 0.03417394150197622], 
                PlusMinus[0.3696369636963696, 0.04817904378922287]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.1117585897630975`, 0.022312090028246745`], 
              "Accuracy" -> 
              PlusMinus[0.27062706270627046`, 0.06259179826810429], 
              "EvaluationTime" -> 0.000043857000000000004`, "TestSize" -> 100,
               "TrainingSize" -> 50, "TrainingTime" -> 0.0086682, 
              "TrainingMemory" -> 156296, "ModelMemory" -> 87464, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.3869686722495388, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.1117585897630975`, 0.01577703016141802]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.27062706270627046`, 0.044259085002036944`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0990059491542428`, 0.010030492095111353`], 
              "Accuracy" -> 
              PlusMinus[0.3025335671120422, 0.07074832117887064], 
              "EvaluationTime" -> 0.00009711611111111111, "TestSize" -> 120, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.0115633, 
              "TrainingMemory" -> 228069.3333333333, "ModelMemory" -> 100168.,
               "ExperimentCount" -> 2, "ModelUtility" -> 0.3923139438448546, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0983539114836058`, 0.01489087387410598], 
                PlusMinus[1.099544065101033, 0.013527631760562443`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3661202185792351, 0.06198564965748828], 
                PlusMinus[0.2513661202185793, 0.05560387436996461]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00009711611111111111, "MeanCrossEntropy" -> 
             PlusMinus[1.0990059491542428`, 0.010030492095111353`], 
             "ModelMemory" -> 100168., "TrainingMemory" -> 228069.3333333333, 
             "TrainingTime" -> 0.024802575], "Index" -> 3], 
         Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.8834533550262094`, 0.05654336545112129], "Accuracy" -> 
              PlusMinus[0.37143031654027636`, 0.026286714076462714`], 
              "EvaluationTime" -> 4.8206034482758616`*^-6, "TestSize" -> 870, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.003941275, 
              "TrainingMemory" -> 46608., "ModelMemory" -> 13856., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.22796715213089727`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.8775874139670854`, 0.09819244954359321], 
                PlusMinus[1.9082074728717695`, 0.09056440116245137], 
                PlusMinus[1.8609482495286254`, 0.09664042341414858]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3778460619760569, 0.028367316599871132`], 
                PlusMinus[0.3342397142267757, 0.027618468732993506`], 
                PlusMinus[0.40506473879376675`, 0.0287175743317418]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.4186478729241025`, 0.09689243012517719], "Accuracy" -> 
              PlusMinus[0.25122285336149486`, 0.03824201080942001], 
              "EvaluationTime" -> 3.8123999999999997`*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.0046961, 
              "TrainingMemory" -> 47408, "ModelMemory" -> 14944, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.3003724428174783, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.4186478729241025`, 0.0685132943871565]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.25122285336149486`, 0.02704118516955014]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.1036694877915942`, 0.041208574474982926`], 
              "Accuracy" -> PlusMinus[0.3779037883912492, 0.0788179291367777],
               "EvaluationTime" -> 0.000014470555555555554`, "TestSize" -> 
              120, "TrainingSize" -> 240, "TrainingTime" -> 0.0081573, 
              "TrainingMemory" -> 56421.33333333333, "ModelMemory" -> 15136., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.3884694049420719, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.1144570204089195`, 0.049588264505708766`], 
                PlusMinus[1.086654298425051, 0.062278227205650294`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3169398907103826, 0.05977855637625331], 
                PlusMinus[0.44808743169398935`, 0.06413971334432449]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000014470555555555554`, "MeanCrossEntropy" -> 
             PlusMinus[1.1036694877915942`, 0.041208574474982926`], 
             "ModelMemory" -> 15136., "TrainingMemory" -> 56421.33333333333, 
             "TrainingTime" -> 0.014137899999999998`], "Index" -> 4], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.580007118839325, 0.05512944938485479], "Accuracy" -> 
              PlusMinus[0.35311787919154836`, 0.026422560675701322`], 
              "EvaluationTime" -> 8.751120689655174*^-6, "TestSize" -> 870, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.002479225, 
              "TrainingMemory" -> 57260., "ModelMemory" -> 5976., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.2714862598780164, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.5604583261087888`, 0.06102287727452057], 
                PlusMinus[1.6489842130828407`, 0.057957675806210855`], 
                PlusMinus[1.5056519330932827`, 0.069747162895628]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.36505957378178133`, 0.028206737884914308`], 
                PlusMinus[0.3142577914034904, 0.026830374328011154`], 
                PlusMinus[0.3846952890827078, 0.028464727841969593`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.294532845371666, 0.11369523623157994`], "Accuracy" -> 
              PlusMinus[0.34983498349834974`, 0.0672945610248768], 
              "EvaluationTime" -> 7.656*^-6, "TestSize" -> 100, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.0029464, 
              "TrainingMemory" -> 92416, "ModelMemory" -> 6496, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.3279076986577143, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.294532845371666, 0.08039467252795662]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.34983498349834974`, 0.04758444043766232]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.1273810785173528`, 0.08966305785771922], "Accuracy" -> 
              PlusMinus[0.3901187509660939, 0.05071496673289692], 
              "EvaluationTime" -> 0.000017576666666666664`, "TestSize" -> 120,
               "TrainingSize" -> 240, "TrainingTime" -> 0.011306666666666666`,
               "TrainingMemory" -> 843770.6666666666, "ModelMemory" -> 8064., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.37713997008496225`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.2242750510702358`, 0.0991431364257013], 
                PlusMinus[1.0833214654233232`, 0.06685511072858254]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4153005464480876, 0.06349538512925905], 
                PlusMinus[0.3661202185792351, 0.06198564965748828]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000017576666666666664`, "MeanCrossEntropy" -> 
             PlusMinus[1.1273810785173528`, 0.08966305785771922], 
             "ModelMemory" -> 8064., "TrainingMemory" -> 843770.6666666666, 
             "TrainingTime" -> 0.016612558333333333`], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.546604049305298, 1.4856340332514313`], "Accuracy" -> 
              PlusMinus[0.3847947710851121, 0.022407498126029688`], 
              "EvaluationTime" -> 3.882931034482758*^-6, "TestSize" -> 870, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.019334599999999997`, 
              "TrainingMemory" -> 69298., "ModelMemory" -> 8832., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.2342769096058669, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[5.27552615707801, 0.7189377318753576], 
                PlusMinus[1.460294570275747, 0.07240086333386396], 
                PlusMinus[6.351321326478856, 0.720677441357302]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.39875539127981263`, 0.02867399867303169], 
                PlusMinus[0.35486783184145504`, 0.02804967410805277], 
                PlusMinus[0.4021518734500662, 0.028710196765115173`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.4078986812561418`, 0.12318591088347301`], 
              "Accuracy" -> 
              PlusMinus[0.3103345178043155, 0.040877440534817865`], 
              "EvaluationTime" -> 5.19*^-6, "TestSize" -> 250, "TrainingSize" -> 
              50, "TrainingTime" -> 0.0140801, "TrainingMemory" -> 71832, 
              "ModelMemory" -> 8832, "ExperimentCount" -> 1, "ModelUtility" -> 
              0.3015237367102227, "MeanCrossEntropyHistory" -> {
                PlusMinus[1.4078986812561418`, 0.08710559293234549]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3103345178043155, 0.028904715399719564`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.1947393182346824`, 0.20539102665176834`], 
              "Accuracy" -> 
              PlusMinus[0.3989071038251367, 0.08918887284663578], 
              "EvaluationTime" -> 5.225*^-6, "TestSize" -> 60, "TrainingSize" -> 
              240, "TrainingTime" -> 0.0199385, "TrainingMemory" -> 87776, 
              "ModelMemory" -> 8832, "ExperimentCount" -> 1, "ModelUtility" -> 
              0.34952050627385733`, "MeanCrossEntropyHistory" -> {
                PlusMinus[1.1947393182346824`, 0.1452333877403323]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3989071038251367, 0.06306605679624089]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 5.225*^-6, "MeanCrossEntropy" -> 
             PlusMinus[1.1947393182346824`, 0.20539102665176834`], 
             "ModelMemory" -> 8832, "TrainingMemory" -> 87776, "TrainingTime" -> 
             0.044257725], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0986110309053945`, 0.0025588412400130776`], 
              "Accuracy" -> 
              PlusMinus[0.34466956140755345`, 0.02415049500977404], 
              "EvaluationTime" -> 3.6931034482758618`*^-6, "TestSize" -> 870, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.007641525, 
              "TrainingMemory" -> 62940., "ModelMemory" -> 8832., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.39298936160086473`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0986111450010647`, 0.004870272619804965], 
                PlusMinus[1.098611880285694, 0.003823391489021553], 
                PlusMinus[1.098609538620724, 0.0048702601380088695`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.32736869601829, 0.027469177968609912`], 
                PlusMinus[0.3274917988389335, 0.02750388476728917], 
                PlusMinus[0.38157684100904943`, 0.028438044486570543`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0986159169867769`, 0.006427502479787967], 
              "Accuracy" -> 
              PlusMinus[0.34329431513815095`, 0.042349695924190967`], 
              "EvaluationTime" -> 2.8572*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.0069478, 
              "TrainingMemory" -> 66672, "ModelMemory" -> 8832, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.39271116543323525`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0986159169867769`, 0.0045449305895514215`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.34329431513815095`, 0.029945757169183723`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0985935020655913`, 0.009538477795192348], 
              "Accuracy" -> PlusMinus[0.4234512493422997, 0.0457639113821672],
               "EvaluationTime" -> 0.00001524722222222222, "TestSize" -> 120, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.013121266666666666`, 
              "TrainingMemory" -> 83546.66666666666, "ModelMemory" -> 8832., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.39249713049095064`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0986061746138531`, 0.013489727157322773`], 
                PlusMinus[1.0985808306235287`, 0.01348913837848711]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4153005464480876, 0.06349538512925905], 
                PlusMinus[0.43169398907103845`, 0.06385287022054223]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00001524722222222222, "MeanCrossEntropy" -> 
             PlusMinus[1.0985935020655913`, 0.009538477795192348], 
             "ModelMemory" -> 8832., "TrainingMemory" -> 83546.66666666666, 
             "TrainingTime" -> 0.024043108333333334`], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.160571766228652, 0.021065239046718476`], "Accuracy" -> 
              PlusMinus[0.35645226467632857`, 0.028940333580619104`], 
              "EvaluationTime" -> 3.802931034482758*^-6, "TestSize" -> 870, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.011920175000000002`, 
              "TrainingMemory" -> 66924., "ModelMemory" -> 8832., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.3708355070456125, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.1637677046262982`, 0.03979909697764522], 
                PlusMinus[1.1689285624365826`, 0.023057843847657588`], 
                PlusMinus[1.1328925307172373`, 0.03950489068863386]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3820901465438919, 0.028473516913154834`], 
                PlusMinus[0.310089087885604, 0.027059097402813315`], 
                PlusMinus[0.3821618366770022, 0.02847941803921746]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.2814499510219717`, 0.0746323127138444], "Accuracy" -> 
              PlusMinus[0.3413362355004127, 0.04212652821672109], 
              "EvaluationTime" -> 3.8032000000000007`*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.0142592, 
              "TrainingMemory" -> 70856, "ModelMemory" -> 8832, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.33319301600446954`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.2814499510219717`, 0.05277301441559436]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3413362355004127, 0.029787953769889915`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.189295944116811, 0.19688095566728014`], "Accuracy" -> 
              PlusMinus[0.3989071038251367, 0.08918887284663578], 
              "EvaluationTime" -> 5.183333333333333*^-6, "TestSize" -> 60, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.0252606, 
              "TrainingMemory" -> 87776, "ModelMemory" -> 8832, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.3515531557396079, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.189295944116811, 0.13921585883882182`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3989071038251367, 0.06306605679624089]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 5.183333333333333*^-6, "MeanCrossEntropy" -> 
             PlusMinus[1.189295944116811, 0.19688095566728014`], 
             "ModelMemory" -> 8832, "TrainingMemory" -> 87776, "TrainingTime" -> 
             0.043495925000000005`], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.501465620972473, 4.47162663427194], "Accuracy" -> 
              PlusMinus[0.37675777627027385`, 0.021364472177140117`], 
              "EvaluationTime" -> 4.118448275862068*^-6, "TestSize" -> 870, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.020304324999999998`, 
              "TrainingMemory" -> 69100., "ModelMemory" -> 8832., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.18029267844438804`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[14.70103318165811, 2.162773384719666], 
                PlusMinus[1.4644410632363545`, 0.07348865860927256], 
                PlusMinus[15.047290467401536`, 1.832509970018623]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.37447206288717116`, 0.028311501863920497`], 
                PlusMinus[0.354800233695648, 0.02802549604013863], 
                PlusMinus[0.4021518734500662, 0.028710196765115173`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.408256337053439, 0.12333129809342923`], "Accuracy" -> 
              PlusMinus[0.3103345178043155, 0.040877440534817865`], 
              "EvaluationTime" -> 3.7028*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.0136692, 
              "TrainingMemory" -> 72456, "ModelMemory" -> 8832, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.30144235854694673`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.408256337053439, 0.08720839721440332]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3103345178043155, 0.028904715399719564`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.068665657596483, 0.06648600555562563], "Accuracy" -> 
              PlusMinus[0.423082199955237, 0.051253364973599724`], 
              "EvaluationTime" -> 9.937777777777777*^-6, "TestSize" -> 120, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.021597266666666663`, 
              "TrainingMemory" -> 87882.66666666666, "ModelMemory" -> 8832., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.3992221738358499, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.1947450928804801`, 0.1452397331373522], 
                PlusMinus[1.0667102833212292`, 0.018087488311666025`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3989071038251367, 0.06306605679624089], 
                PlusMinus[0.44808743169398935`, 0.06413971334432449]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 9.937777777777777*^-6, "MeanCrossEntropy" -> 
             PlusMinus[1.068665657596483, 0.06648600555562563], "ModelMemory" -> 
             8832., "TrainingMemory" -> 87882.66666666666, "TrainingTime" -> 
             0.04730090833333332], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0986121628703402`, 0.00255884572039292], "Accuracy" -> 
              PlusMinus[0.34466956140755345`, 0.02415049500977404], 
              "EvaluationTime" -> 3.818103448275861*^-6, "TestSize" -> 870, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.006389499999999999, 
              "TrainingMemory" -> 62488., "ModelMemory" -> 8832., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.39298895649975674`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0986121742921875`, 0.004870280622134929], 
                PlusMinus[1.0986122478066784`, 0.003823393572102318], 
                PlusMinus[1.098612013631348, 0.004870279359620797]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.32736869601829, 0.027469177968609912`], 
                PlusMinus[0.3274917988389335, 0.02750388476728917], 
                PlusMinus[0.38157684100904943`, 0.028438044486570543`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.09861268778182, 0.007688786871065911], "Accuracy" -> 
              PlusMinus[0.3431831720553425, 0.04229670723151046], 
              "EvaluationTime" -> 5.0004000000000004`*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.0060026, 
              "TrainingMemory" -> 66616, "ModelMemory" -> 8832, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.39262227134245115`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.09861268778182, 0.005436793335628802]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3431831720553425, 0.029908288505263128`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0986104072143754`, 0.009538715091461395], 
              "Accuracy" -> PlusMinus[0.4234512493422997, 0.0457639113821672],
               "EvaluationTime" -> 6.468888888888888*^-6, "TestSize" -> 120, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.007320133333333333, 
              "TrainingMemory" -> 83656., "ModelMemory" -> 8832., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.3924910878298065, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0986116743384757`, 0.013489808034307986`], 
                PlusMinus[1.0986091401007587`, 0.013489752227734986`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4153005464480876, 0.06349538512925905], 
                PlusMinus[0.43169398907103845`, 0.06385287022054223]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 6.468888888888888*^-6, "MeanCrossEntropy" -> 
             PlusMinus[1.0986104072143754`, 0.009538715091461395], 
             "ModelMemory" -> 8832., "TrainingMemory" -> 83656., 
             "TrainingTime" -> 0.015539666666666665`], "Index" -> 10], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 60], "LearningRate" -> 
             Association["Value" -> 0.1], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 10], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 90], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0986122886681107`, 0.011550805277122536`], 
              "Accuracy" -> 
              PlusMinus[0.3300330033003299, 0.06632605765313644], 
              "EvaluationTime" -> 0.000018268, "TestSize" -> 100, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.0172742, 
              "TrainingMemory" -> 52848, "ModelMemory" -> 20248, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.3923468155820168, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0986122886681107`, 0.008167652739618702]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3300330033003299, 0.04689960513590268]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0758657827226796`, 0.02512451278175275], "Accuracy" -> 
              PlusMinus[0.4223392573658594, 0.060762195217488234`], 
              "EvaluationTime" -> 0.00026640888888888886`, "TestSize" -> 120, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.11664763333333333`, 
              "TrainingMemory" -> 2.181565333333333*^6, "ModelMemory" -> 
              289136., "ExperimentCount" -> 2, "ModelUtility" -> 
              0.39961481380012026`, "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0991831688141582`, 0.029667154403211986`], 
                PlusMinus[1.0632667003500746`, 0.02180747672659886]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.38251366120218594`, 0.06256340621116041], 
                PlusMinus[0.46448087431694024`, 0.06435685907644231]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0986122886681102`, 0.002957873544230966], 
              "Accuracy" -> 
              PlusMinus[0.33200744613029703`, 0.016982646763862175`], 
              "EvaluationTime" -> 0.00001295237931034483, "TestSize" -> 780, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.017554675, 
              "TrainingMemory" -> 51542., "ModelMemory" -> 20248., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.3929602451731017, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0986122886681107`, 0.005775402638561267], 
                PlusMinus[1.09861228866811, 0.004870281520555273], 
                PlusMinus[1.09861228866811, 0.004870281520555273]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3349462802050136, 0.03328745630835935], 
                PlusMinus[0.33444469636916535`, 0.02763112401800219], 
                PlusMinus[0.32759309443165885`, 0.027482627451951815`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00001295237931034483, "MeanCrossEntropy" -> 
             PlusMinus[1.0986122886681102`, 0.002957873544230966], 
             "ModelMemory" -> 20248., "TrainingMemory" -> 51542., 
             "TrainingTime" -> 0.06993822499999999], "Index" -> 11], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.098601634165352, 0.005407018265247939], "Accuracy" -> 
              PlusMinus[0.3274917988389335, 0.038896366855847124`], 
              "EvaluationTime" -> 2.8168965517241377`*^-6, "TestSize" -> 290, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.0078973, 
              "TrainingMemory" -> 62824, "ModelMemory" -> 8832, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.39278915167740436`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.098601634165352, 0.00382333928135634]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3274917988389335, 0.02750388476728917]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.098652300316593, 0.007689386806175068], "Accuracy" -> 
              PlusMinus[0.3431831720553425, 0.04229670723151046], 
              "EvaluationTime" -> 3.977600000000001*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.0081736, 
              "TrainingMemory" -> 66680, "ModelMemory" -> 8832, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.3926080924927597, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.098652300316593, 0.005437217553812759]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3431831720553425, 0.029908288505263128`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0984271666785872`, 0.009538335628568448], 
              "Accuracy" -> PlusMinus[0.4234512493422997, 0.0457639113821672],
               "EvaluationTime" -> 7.655*^-6, "TestSize" -> 120, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.013022133333333333`, 
              "TrainingMemory" -> 84290.66666666666, "ModelMemory" -> 8832., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.3925564766095156, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0985540520312693`, 0.013492540882899137`], 
                PlusMinus[1.0983004500561562`, 0.013483566808615127`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4153005464480876, 0.06349538512925905], 
                PlusMinus[0.43169398907103845`, 0.06385287022054223]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 7.655*^-6, "MeanCrossEntropy" -> 
             PlusMinus[1.0984271666785872`, 0.009538335628568448], 
             "ModelMemory" -> 8832., "TrainingMemory" -> 84290.66666666666, 
             "TrainingTime" -> 0.024174966666666665`], "Index" -> 12], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.4047279206588739`, 0.12189849651100088`], 
              "Accuracy" -> 
              PlusMinus[0.3103345178043155, 0.040877440534817865`], 
              "EvaluationTime" -> 4.7044*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.0265847, 
              "TrainingMemory" -> 72704, "ModelMemory" -> 8832, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.30224705311919836`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.4047279206588739`, 0.08619525349937342]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3103345178043155, 0.028904715399719564`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.1946868202935839`, 0.2053094403758169], "Accuracy" -> 
              PlusMinus[0.3989071038251367, 0.08918887284663578], 
              "EvaluationTime" -> 5.326666666666667*^-6, "TestSize" -> 60, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.0200231, 
              "TrainingMemory" -> 88568, "ModelMemory" -> 8832, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.3495399700031488, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.1946868202935839`, 0.14517569753135526`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3989071038251367, 0.06306605679624089]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 5.326666666666667*^-6, "MeanCrossEntropy" -> 
             PlusMinus[1.1946868202935839`, 0.2053094403758169], 
             "ModelMemory" -> 8832, "TrainingMemory" -> 88568, "TrainingTime" -> 
             0.051613574999999995`], "Index" -> 13], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^-6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.405362393880495, 0.1359509591655971], "Accuracy" -> 
              PlusMinus[0.3160999803071977, 0.04148830477575622], 
              "EvaluationTime" -> 5.3904*^-6, "TestSize" -> 250, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.0272905, 
              "TrainingMemory" -> 72312, "ModelMemory" -> 8832, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.30152021694334064`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.405362393880495, 0.09613184513480913]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3160999803071977, 0.029336661646871445`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.1947451420132338`, 0.2054000767334486], "Accuracy" -> 
              PlusMinus[0.3989071038251367, 0.08918887284663578], 
              "EvaluationTime" -> 0.00001602, "TestSize" -> 60, 
              "TrainingSize" -> 240, "TrainingTime" -> 0.0221316, 
              "TrainingMemory" -> 88272, "ModelMemory" -> 8832, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.3495183434835398, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.1947451420132338`, 0.1452397871144587]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3989071038251367, 0.06306605679624089]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00001602, "MeanCrossEntropy" -> 
             PlusMinus[1.1947451420132338`, 0.2054000767334486], 
             "ModelMemory" -> 8832, "TrainingMemory" -> 88272, "TrainingTime" -> 
             0.054955000000000004`], "Index" -> 14]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 14], 
        Association["ID" -> 240007234977893]], "MaxTrainingSize" -> 300, 
      "LastReportingTime" -> 3.7650333163947216`17.328343812741128*^9, 
      "PreprocessorEvaluationTime" -> 3.48310546875`3.*^-6, 
      "PreprocessorMemory" -> 39280, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.6400000000000001, 
          "ElapsedTimes" -> 0.8149615, "ExperimentCounts" -> 34], 
         Association[
         "TrainingSizes" -> 50, "TimeBudgets" -> 0.7999999999999999, 
          "ElapsedTimes" -> 1.0743933, "ExperimentCounts" -> 14], 
         Association[
         "TrainingSizes" -> 240, "TimeBudgets" -> 1., "ElapsedTimes" -> 
          1.0518990000000001`, "ExperimentCounts" -> 24]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[240015824912485]], "ID" -> 
         240020119879781]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, 
           "Values" -> {
            Rational[1, 240] ((-99) Log[99] - 141 Log[141]) + Log[240]}, "ID" -> 
           6900269369450652421]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 3.7944597, "MaxTrainingMemory" -> 3694472, 
      "DataMemory" -> 190344, "FunctionMemory" -> 552992, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2019, 4, 23, 18, 35, 16.5606264`8.971651705318486}, 
        "Instant", "Gregorian", -5.], "ProcessorCount" -> 10, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.76348517282526*^9, 3.7650513166511464`*^9},
 CellLabel->"Out[99]=",ExpressionUUID->"52cc844d-c303-45b7-9c3c-c4fcedfd2468"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{
  "entClass", ",", " ", "EntropyTestSample", " ", ",", " ", 
   "\"\<Accuracy\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.7634851912502127`*^9, 3.763485213181117*^9}},
 CellLabel->
  "In[100]:=",ExpressionUUID->"01a131f4-8f32-4b0f-88e4-b238cb43705d"],

Cell[BoxData["0.37666666666666665`"], "Output",
 CellChangeTimes->{3.7634852144279394`*^9, 3.7650513169239902`*^9},
 CellLabel->
  "Out[100]=",ExpressionUUID->"be0b4712-4778-4f01-8771-3bbd45de6ea6"]
}, Open  ]],

Cell["Barely above random choice.", "Text",
 CellChangeTimes->{{3.763485220753541*^9, 
  3.7634852319040685`*^9}},ExpressionUUID->"dfa37a6e-ec89-4cbc-b258-\
7860d0e7ae13"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{
  "entClass", ",", " ", "EntropyTrainingSample", " ", ",", " ", 
   "\"\<Accuracy\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.765063088925395*^9, 3.7650630962863984`*^9}},
 CellLabel->
  "In[118]:=",ExpressionUUID->"2e0b3b4a-134e-43bf-8ff8-cca2b92915d9"],

Cell[BoxData["0.4633333333333333`"], "Output",
 CellChangeTimes->{3.765063097030137*^9},
 CellLabel->
  "Out[118]=",ExpressionUUID->"0b599a3f-dd81-4034-9b49-e6f40cb9bd22"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
Evaluator->"SecondKernel",
WindowSize->{1137, 654},
WindowMargins->{{254, Automatic}, {181, Automatic}},
Magnification->1.5,
FrontEndVersion->"11.3 for Microsoft Windows (64-bit) (March 6, 2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 171, 3, 146, "Title",ExpressionUUID->"1810843b-c7e4-4e97-a98d-1ceb6deca9e6"],
Cell[754, 27, 973, 23, 186, "Text",ExpressionUUID->"42582dfc-ed31-45cb-a9ff-afe371e402d4"],
Cell[CellGroupData[{
Cell[1752, 54, 160, 3, 102, "Chapter",ExpressionUUID->"aaff250b-1a38-431e-8370-cf45fc234b6c"],
Cell[1915, 59, 547, 16, 86, "Text",ExpressionUUID->"f3b8714d-6424-4408-b154-9d87c9e57fc6"],
Cell[CellGroupData[{
Cell[2487, 79, 167, 3, 67, "Subsubsection",ExpressionUUID->"96c302f3-f610-4e7e-93e8-bf14e015e477"],
Cell[2657, 84, 366, 8, 43, "Input",ExpressionUUID->"cad08083-9ef3-41d1-9277-1dfcef64e2ab"],
Cell[3026, 94, 320, 7, 86, "Text",ExpressionUUID->"8709bfe6-9a66-4cd8-be29-624308a90f43"],
Cell[3349, 103, 724, 19, 73, "Input",ExpressionUUID->"00220d97-7608-4384-8385-b0cf22d1dcf0"],
Cell[4076, 124, 274, 6, 43, "Input",ExpressionUUID->"6aea2156-383c-44da-828f-c34097d07f4f"],
Cell[4353, 132, 447, 12, 43, "Input",ExpressionUUID->"218b7cda-8afa-4a40-aac5-0b07304b853b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4837, 149, 155, 3, 94, "Subchapter",ExpressionUUID->"818a5e5b-73fd-4b33-b61b-8961753748df"],
Cell[4995, 154, 221, 5, 52, "Text",ExpressionUUID->"1b758921-8c9d-4fbb-bac4-6a41fc5bd80a"],
Cell[5219, 161, 1474, 33, 276, "Input",ExpressionUUID->"630cba2c-f310-49b2-b364-69c16e0c1452"],
Cell[CellGroupData[{
Cell[6718, 198, 209, 3, 43, "Input",ExpressionUUID->"5b9a01c8-aae9-4782-9719-61b3feb7ac05"],
Cell[6930, 203, 1383, 35, 79, "Output",ExpressionUUID->"283ef520-8491-4c0e-ab8c-438de8f41edf"]
}, Open  ]],
Cell[8328, 241, 250, 4, 52, "Text",ExpressionUUID->"3add9883-94b9-4a9e-93ac-722f6c3ea693"],
Cell[8581, 247, 1567, 33, 450, "Input",ExpressionUUID->"413dae10-d401-4621-b246-83d2d84cead7"],
Cell[10151, 282, 156, 3, 52, "Text",ExpressionUUID->"45c42295-9988-4567-9a35-a51c048c0c91"],
Cell[CellGroupData[{
Cell[10332, 289, 338, 6, 43, "Input",ExpressionUUID->"596cc544-f382-4ed5-b72c-a5978c820dab"],
Cell[10673, 297, 6534, 187, 282, "Output",ExpressionUUID->"516d7764-9d07-4c9c-8815-49fa37307ac6"]
}, Open  ]],
Cell[17222, 487, 378, 12, 52, "Text",ExpressionUUID->"eafcd623-51a2-49a1-81b9-86d7b6352d98"],
Cell[17603, 501, 208, 3, 43, "Input",ExpressionUUID->"0535e1bd-ec30-4af0-9163-8f6eef135fab"],
Cell[17814, 506, 1645, 35, 305, "Input",ExpressionUUID->"f14cfaa0-374d-4226-b8ef-378b6502d902"],
Cell[19462, 543, 156, 3, 52, "Text",ExpressionUUID->"1d1341d7-6ab8-4819-962c-12c0bddbcbd9"],
Cell[19621, 548, 295, 6, 43, "Input",ExpressionUUID->"188a0980-a814-4cf2-9e37-20ce6b835795"],
Cell[CellGroupData[{
Cell[19941, 558, 471, 10, 43, "Input",ExpressionUUID->"aa97f2c0-a25b-4624-bc66-8fbf48d53bd2"],
Cell[20415, 570, 646, 11, 49, "Output",ExpressionUUID->"be2a11db-9b0e-41bf-a62d-a0c8b22d9673"]
}, Open  ]],
Cell[CellGroupData[{
Cell[21098, 586, 271, 5, 43, "Input",ExpressionUUID->"7700ff26-227e-45d2-bce7-58f9ac1c1b67"],
Cell[21372, 593, 480, 9, 49, "Output",ExpressionUUID->"eb963f2a-237f-4a2f-8e0a-689f9423edd8"]
}, Open  ]],
Cell[21867, 605, 187, 3, 52, "Text",ExpressionUUID->"1690238c-0e73-4b73-b901-7a7252dbf5b8"],
Cell[CellGroupData[{
Cell[22079, 612, 452, 11, 43, "Input",ExpressionUUID->"fc54105f-971b-4cb4-8bf1-271949234436"],
Cell[22534, 625, 2019, 51, 137, "Output",ExpressionUUID->"cf3d582f-8c98-416f-8123-015a5e3030c4"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[24614, 683, 162, 3, 102, "Chapter",ExpressionUUID->"f62351f9-2597-4dc3-9697-b8ad8aecb689"],
Cell[24779, 688, 322, 7, 86, "Text",ExpressionUUID->"3e8996e9-bcd1-4900-8dd5-e62d506ec76d"],
Cell[CellGroupData[{
Cell[25126, 699, 202, 3, 43, "Input",ExpressionUUID->"b03f6b8f-512b-4629-838f-668bdf9e4ee5"],
Cell[25331, 704, 349, 5, 49, "Output",ExpressionUUID->"87feac7e-389f-49d2-9a5b-48372d90314b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[25717, 714, 276, 5, 43, "Input",ExpressionUUID->"36a8140b-71fa-4c75-b8ad-304d5fccaf2b"],
Cell[25996, 721, 617, 11, 49, "Output",ExpressionUUID->"e58a115d-20af-4272-b8f4-c7b3f8ef5207"]
}, Open  ]],
Cell[26628, 735, 422, 10, 52, "Text",ExpressionUUID->"6d325d80-2e0d-4475-a4a3-73cc24641770"],
Cell[27053, 747, 207, 3, 52, "Text",ExpressionUUID->"d3fc4c60-4cd9-42e2-9c73-f46f5800ca75"],
Cell[27263, 752, 227, 4, 43, "Input",ExpressionUUID->"d1817d37-d299-4bc0-a6fb-fd0f85f12c82"],
Cell[27493, 758, 1555, 41, 160, "Input",ExpressionUUID->"fce6c3bb-71ad-476a-a55f-86e3f802d769"],
Cell[29051, 801, 220, 4, 52, "Text",ExpressionUUID->"4d04b52e-9bf3-46a3-8747-0427440aca24"],
Cell[CellGroupData[{
Cell[29296, 809, 160, 3, 99, "Section",ExpressionUUID->"3969c6d4-824a-461e-b86d-962bf5ec92a4"],
Cell[29459, 814, 296, 6, 43, "Input",ExpressionUUID->"18313940-5afe-4143-a063-80206582bac5"],
Cell[29758, 822, 428, 8, 43, "Input",ExpressionUUID->"bdf87686-f654-432a-933c-a34697a6eac2"],
Cell[30189, 832, 167, 3, 52, "Text",ExpressionUUID->"350ec4b2-c73e-4897-816d-c5f6b2a41e18"],
Cell[30359, 837, 773, 22, 73, "Input",ExpressionUUID->"919b8455-6d92-44df-a327-abe55ed779cd"],
Cell[31135, 861, 722, 20, 43, "Input",ExpressionUUID->"320485cf-478a-49d3-b08e-049e0802f422"],
Cell[31860, 883, 1022, 28, 131, "Input",ExpressionUUID->"770fb098-f874-4f2f-9ea7-3772d1ef4379"],
Cell[32885, 913, 264, 7, 52, "Text",ExpressionUUID->"ea62fc7d-3b23-4a13-a1b7-c6f80a7c34cb"],
Cell[33152, 922, 1332, 30, 131, "Input",ExpressionUUID->"fa5e7204-cff2-47bc-a570-b5608b3bf163"],
Cell[34487, 954, 754, 18, 160, "Input",ExpressionUUID->"ac7147a1-bb02-47d6-b886-947a783f05c3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[35278, 977, 206, 4, 99, "Section",ExpressionUUID->"971a1988-0476-4e05-b1c0-71a2def90378"],
Cell[35487, 983, 303, 4, 52, "Text",ExpressionUUID->"77c94592-9cda-42e2-baa3-d094f70e9ef1"],
Cell[35793, 989, 668, 15, 43, "Input",ExpressionUUID->"b6e2df2d-a0a3-41ce-8701-19ff6bb0d607"],
Cell[36464, 1006, 295, 6, 43, "Input",ExpressionUUID->"730aba62-b7bf-470d-a8d0-1975859cc882"],
Cell[CellGroupData[{
Cell[36784, 1016, 370, 9, 43, "Input",ExpressionUUID->"dee3e9c5-390b-4053-86fc-4cabb6a46bce"],
Cell[37157, 1027, 462, 6, 49, "Output",ExpressionUUID->"e4779a7b-dc41-4cea-9caa-6621ace947ba"]
}, Open  ]],
Cell[37634, 1036, 206, 3, 52, "Text",ExpressionUUID->"fc429efb-1c6d-4022-b5a5-558630542189"],
Cell[37843, 1041, 1589, 41, 160, "Input",ExpressionUUID->"c0b0388a-9739-42cb-9d69-69c934372cb4"],
Cell[CellGroupData[{
Cell[39457, 1086, 211, 4, 43, "Input",ExpressionUUID->"0e6c85c2-7cb3-48f3-a2ac-0f13f13be1b7"],
Cell[39671, 1092, 468, 7, 49, "Output",ExpressionUUID->"c017fc7e-7011-4cc0-8881-c4335403e31e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[40176, 1104, 239, 4, 43, "Input",ExpressionUUID->"96783f87-e43e-4a98-af87-abcfe7397680"],
Cell[40418, 1110, 438, 6, 49, "Output",ExpressionUUID->"63e01b9f-99bd-4c78-abdc-145cbceeb000"]
}, Open  ]],
Cell[CellGroupData[{
Cell[40893, 1121, 237, 4, 43, "Input",ExpressionUUID->"2df60942-3307-4ebb-8bd9-f711deaac581"],
Cell[41133, 1127, 438, 6, 49, "Output",ExpressionUUID->"5a954a90-d1f3-49d0-be56-1bf32284ff15"]
}, Open  ]],
Cell[CellGroupData[{
Cell[41608, 1138, 235, 4, 43, "Input",ExpressionUUID->"4f545bd0-cb21-4344-91ec-8cf4e9a473c7"],
Cell[41846, 1144, 286, 4, 49, "Output",ExpressionUUID->"cacc2e23-ad00-43f8-9d01-10ba09caf393"]
}, Open  ]],
Cell[42147, 1151, 217, 5, 52, "Text",ExpressionUUID->"9d1b6cda-8201-4823-9323-431f7a27a614"]
}, Open  ]],
Cell[CellGroupData[{
Cell[42401, 1161, 160, 3, 94, "Subchapter",ExpressionUUID->"b6b41eeb-d89e-43e3-a392-3d9af38d71b0"],
Cell[CellGroupData[{
Cell[42586, 1168, 367, 7, 43, "Input",ExpressionUUID->"2fe1778e-61b9-4c91-831f-ada05e386a73"],
Cell[42956, 1177, 443, 7, 49, "Output",ExpressionUUID->"3d0ca191-26fd-4685-8697-71c84416e0cb"]
}, Open  ]],
Cell[43414, 1187, 280, 5, 43, "Input",ExpressionUUID->"9bdc1915-5f30-4358-abdf-d910c630a9a7"],
Cell[43697, 1194, 3762, 85, 885, "Input",ExpressionUUID->"12d3e8b7-d678-4005-9677-714d5e1e64df"],
Cell[47462, 1281, 164, 3, 52, "Text",ExpressionUUID->"44c93c31-18c4-43b9-b19a-bc7a68c628a3"],
Cell[CellGroupData[{
Cell[47651, 1288, 391, 6, 43, "Input",ExpressionUUID->"f70a6f51-5d10-4e93-8dd0-8a86a66d135c"],
Cell[48045, 1296, 3303, 47, 253, "Output",ExpressionUUID->"9baab11d-38f4-4332-865d-61a6670911c5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[51385, 1348, 346, 8, 43, "Input",ExpressionUUID->"6950ed9a-e320-4103-85d8-a9ddf8cb1f95"],
Cell[51734, 1358, 178, 3, 49, "Output",ExpressionUUID->"09c4a486-d2dc-4a9d-b7c0-f627123eb21d"]
}, Open  ]],
Cell[51927, 1364, 365, 8, 86, "Text",ExpressionUUID->"11fa9d1a-4dc7-4a39-b971-366f4165277e"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[52341, 1378, 203, 3, 172, "Chapter",ExpressionUUID->"7615688e-c912-4f2e-850f-b7aa7d5c2246"],
Cell[52547, 1383, 217, 5, 52, "Text",ExpressionUUID->"ace2c4c2-c63c-47dd-9f43-34210f4b43c8"],
Cell[CellGroupData[{
Cell[52789, 1392, 1023, 22, 189, "Input",ExpressionUUID->"e3af811a-791a-465b-9c26-8d18fac400de"],
Cell[53815, 1416, 29307, 606, 138, "Output",ExpressionUUID->"a5d601a8-e9e4-4a8e-8d2c-28c2682624e6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[83159, 2027, 873, 17, 160, "Input",ExpressionUUID->"146d5e7a-e1ba-4870-b3b3-d1cf781c0653"],
Cell[84035, 2046, 28620, 585, 138, "Output",ExpressionUUID->"1015f635-f166-4424-8e63-0f2287cfc4ab"]
}, Open  ]],
Cell[CellGroupData[{
Cell[112692, 2636, 395, 7, 43, "Input",ExpressionUUID->"540aec86-858d-4c99-a7d7-f79cd6bdca1f"],
Cell[113090, 2645, 497, 6, 49, "Output",ExpressionUUID->"1735ec52-0eb1-4260-943f-e9793858e460"]
}, Open  ]],
Cell[CellGroupData[{
Cell[113624, 2656, 302, 6, 43, "Input",ExpressionUUID->"16070b32-af29-4f0f-8e6c-db8f3a49bea5"],
Cell[113929, 2664, 155, 3, 49, "Output",ExpressionUUID->"d9e5f3df-06e9-45b9-8e56-80d6aba38669"]
}, Open  ]],
Cell[CellGroupData[{
Cell[114121, 2672, 917, 21, 189, "Input",ExpressionUUID->"ed95537e-511d-451a-9d9a-f83ec80f1339"],
Cell[115041, 2695, 27061, 562, 138, "Output",ExpressionUUID->"1e22878f-0076-471c-8a8d-8fc15fdd5789"]
}, Open  ]],
Cell[CellGroupData[{
Cell[142139, 3262, 630, 14, 160, "Input",ExpressionUUID->"f503fb4a-cbd5-4010-b8f2-ca4201e760ba"],
Cell[142772, 3278, 26282, 541, 138, "Output",ExpressionUUID->"325e353a-571c-4374-8fa0-48c32baaf7e1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[169091, 3824, 299, 6, 43, "Input",ExpressionUUID->"3025176c-34f0-4eca-8493-43cee9e88294"],
Cell[169393, 3832, 183, 3, 49, "Output",ExpressionUUID->"852a2a3d-7af6-45bd-a74e-3b7e41ba59ed"]
}, Open  ]],
Cell[169591, 3838, 274, 6, 86, "Text",ExpressionUUID->"64daf8a4-ab69-44ca-9291-27df6fcc1cd4"],
Cell[CellGroupData[{
Cell[169890, 3848, 296, 5, 43, "Input",ExpressionUUID->"d143480a-34aa-4c0e-bd24-976dc143823a"],
Cell[170189, 3855, 296, 4, 49, "Output",ExpressionUUID->"1e969605-7d71-45a9-aa5f-0de0daf772ac"]
}, Open  ]],
Cell[CellGroupData[{
Cell[170522, 3864, 371, 8, 43, "Input",ExpressionUUID->"6ae411d4-3a6a-4a4e-be79-5b05410dab8b"],
Cell[170896, 3874, 16792, 437, 489, "Output",ExpressionUUID->"038d5b29-7889-4162-b436-14aebb3b939a"]
}, Open  ]],
Cell[187703, 4314, 226, 5, 117, "Text",ExpressionUUID->"e4314c01-fff0-468d-b291-3f55b7d4c361"],
Cell[187932, 4321, 194, 3, 117, "Text",ExpressionUUID->"08228df2-91e3-4eae-b94f-7a6c34574ff7"],
Cell[CellGroupData[{
Cell[188151, 4328, 259, 4, 96, "Input",ExpressionUUID->"50acee1e-cb53-4959-ba6f-37007770da86"],
Cell[188413, 4334, 431302, 7382, 371, "Output",ExpressionUUID->"e3f8a755-3eba-479c-b1e4-06d62b660e0a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[619752, 11721, 297, 5, 96, "Input",ExpressionUUID->"e2ae1d13-94be-4458-a297-d55eea8f4162"],
Cell[620052, 11728, 297, 4, 110, "Output",ExpressionUUID->"1927d5de-59f9-431b-bef0-0e79a70f3fe6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[620386, 11737, 310, 7, 96, "Input",ExpressionUUID->"d5e9d1af-ab10-40af-b4cc-f86e2fcced77"],
Cell[620699, 11746, 171, 3, 110, "Output",ExpressionUUID->"a700e9b4-6097-41a3-8fef-6627e04143f0"]
}, Open  ]],
Cell[620885, 11752, 290, 7, 117, "Text",ExpressionUUID->"96304e1e-26d6-4d97-bd15-2e98c4cd5efe"],
Cell[CellGroupData[{
Cell[621200, 11763, 205, 3, 180, "Subsection",ExpressionUUID->"6e18a99d-3a4b-4e7d-9823-08edbf9c0953"],
Cell[621408, 11768, 547, 10, 267, "Text",ExpressionUUID->"191026d6-9e60-41bf-8272-b8db2e059726"],
Cell[621958, 11780, 1248, 38, 229, "Input",ExpressionUUID->"6f2bfc9c-14c5-48a4-94c8-54299f04af07"],
Cell[623209, 11820, 1927, 41, 294, "Input",ExpressionUUID->"2d51010a-dde0-4cec-91c6-ea1f58f6830d"],
Cell[CellGroupData[{
Cell[625161, 11865, 633, 12, 229, "Input",ExpressionUUID->"1c7ad212-e094-4a34-9215-4fe7f496743e"],
Cell[625797, 11879, 30751, 625, 1264, "Output",ExpressionUUID->"b5043704-b2d6-466e-a331-ca0e1c709fb5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[656585, 12509, 298, 6, 96, "Input",ExpressionUUID->"0543b224-3095-4dcb-b2bf-48e1d3728f54"],
Cell[656886, 12517, 486, 7, 110, "Output",ExpressionUUID->"614682af-7e8e-4a7d-8239-57baa89cdc59"]
}, Open  ]],
Cell[657387, 12527, 198, 3, 117, "Text",ExpressionUUID->"ab5f28e6-d1be-46d2-902f-ddaa31e9117a"],
Cell[CellGroupData[{
Cell[657610, 12534, 306, 6, 96, "Input",ExpressionUUID->"fe4e59dd-6e52-4c22-8c9a-7ee5bcaf9e08"],
Cell[657919, 12542, 362, 6, 110, "Output",ExpressionUUID->"a8a612f6-b12c-410c-983b-60a4dfbb681f"]
}, Open  ]],
Cell[658296, 12551, 202, 3, 117, "Text",ExpressionUUID->"9b8b7097-2c96-4d0b-bcd3-622ca3aef20f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[658547, 12560, 220, 4, 229, "Chapter",ExpressionUUID->"c56d4c84-eb33-4489-afe8-5ed99345167b"],
Cell[658770, 12566, 217, 4, 117, "Text",ExpressionUUID->"4f6fe55c-cf1f-49cc-99e9-b7ee84284af1"],
Cell[658990, 12572, 961, 27, 164, "Input",ExpressionUUID->"dad86fda-8768-4c8e-b976-57c33e18d036"],
Cell[CellGroupData[{
Cell[659976, 12603, 432, 8, 96, "Input",ExpressionUUID->"53160d79-8e42-490b-bf2a-2da4cb818c2a"],
Cell[660411, 12613, 39103, 726, 371, "Output",ExpressionUUID->"a173f09c-0a58-4716-8c0d-a3dd6e674382"]
}, Open  ]],
Cell[699529, 13342, 185, 3, 117, "Text",ExpressionUUID->"be29fb1e-f974-4ed3-8320-2fad7f3a4ae3"],
Cell[CellGroupData[{
Cell[699739, 13349, 363, 7, 96, "Input",ExpressionUUID->"b747517a-4656-428a-9bfa-278cdc1282c7"],
Cell[700105, 13358, 324, 4, 110, "Output",ExpressionUUID->"412aaf4e-dcb0-4424-ad00-23362c7ac196"]
}, Open  ]],
Cell[700444, 13365, 357, 7, 193, "Text",ExpressionUUID->"d7759cfe-f674-446a-b41b-0ef14897beef"],
Cell[700804, 13374, 191, 3, 117, "Text",ExpressionUUID->"0bfe1288-ae83-4266-8c9e-45d70173959c"],
Cell[CellGroupData[{
Cell[701020, 13381, 324, 6, 96, "Input",ExpressionUUID->"6b726660-a921-473b-b9fe-b1b2cb58101f"],
Cell[701347, 13389, 16878, 440, 1100, "Output",ExpressionUUID->"cee5d4ca-9e37-4d4a-8ddb-315b41e6979a"]
}, Open  ]],
Cell[718240, 13832, 502, 13, 193, "Text",ExpressionUUID->"b1678ee0-8b1e-4309-b432-f4cc917ef3ae"],
Cell[CellGroupData[{
Cell[718767, 13849, 323, 7, 96, "Input",ExpressionUUID->"d7a3a004-efd5-4697-acaa-8756e534507b"],
Cell[719093, 13858, 157, 3, 49, "Output",ExpressionUUID->"52476d2b-9653-46f6-b1b6-647fd85beae9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[719287, 13866, 255, 7, 94, "Subchapter",ExpressionUUID->"9b49325f-619d-4f22-8769-6495d490fb65"],
Cell[719545, 13875, 193, 3, 52, "Text",ExpressionUUID->"d8e1146d-fa76-460d-99b0-c0833028aae1"],
Cell[719741, 13880, 1952, 59, 160, "Input",ExpressionUUID->"90228659-cbc2-408c-92bc-64a3ce820153"],
Cell[CellGroupData[{
Cell[721718, 13943, 269, 4, 43, "Input",ExpressionUUID->"9f79a119-09d9-448a-9aef-8cd2c6451471"],
Cell[721990, 13949, 561756, 9446, 109, "Output",ExpressionUUID->"e748b15b-f09f-44f5-94e5-191c45529218"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1283783, 23400, 313, 6, 43, "Input",ExpressionUUID->"484a75e1-f12b-4289-b2f7-38a81953e086"],
Cell[1284099, 23408, 259, 3, 49, "Output",ExpressionUUID->"df31691b-37c5-4e5b-b96c-bebbbf771672"]
}, Open  ]],
Cell[1284373, 23414, 189, 3, 52, "Text",ExpressionUUID->"80a0fbbe-4afd-4f53-aa4b-2c26df63ea7f"],
Cell[1284565, 23419, 193, 3, 52, "Text",ExpressionUUID->"051f92f3-c5ce-414e-a529-0a343360116e"],
Cell[CellGroupData[{
Cell[1284783, 23426, 1095, 25, 189, "Input",ExpressionUUID->"0f5e816c-76ca-4ea6-a346-da629347292a"],
Cell[1285881, 23453, 29212, 605, 138, "Output",ExpressionUUID->"dac0e255-ae74-4615-aa81-fe0207ada5bc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1315130, 24063, 443, 8, 73, "Input",ExpressionUUID->"1d2e569e-3bda-4a41-8521-d6b8b4a3cc60"],
Cell[1315576, 24073, 28422, 582, 138, "Output",ExpressionUUID->"b3ebe04b-8f90-45fa-92db-d9d01a626978"],
Cell[1344001, 24657, 28446, 582, 138, "Output",ExpressionUUID->"7d50bd7b-54dc-4e62-8023-0efd9ce29c52"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1372484, 25244, 297, 5, 43, "Input",ExpressionUUID->"86e0047f-80ae-49a6-b602-6626e5afb646"],
Cell[1372784, 25251, 315, 4, 49, "Output",ExpressionUUID->"664468d5-c8ff-47dd-a796-730840dd32af"]
}, Open  ]],
Cell[1373114, 25258, 417, 8, 119, "Text",ExpressionUUID->"030b14a0-0605-4e36-8c9a-1af0f48ea0aa"],
Cell[CellGroupData[{
Cell[1373556, 25270, 308, 6, 43, "Input",ExpressionUUID->"c8f3f84b-ad6a-49f7-81b1-b93d48cb08ca"],
Cell[1373867, 25278, 316, 4, 49, "Output",ExpressionUUID->"b94de0d4-cb90-4835-8619-385070c8613e"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1374232, 25288, 157, 3, 94, "Subchapter",ExpressionUUID->"7eeb62a2-2755-46e1-a3ad-e45b0a725ab0"],
Cell[1374392, 25293, 680, 15, 119, "Text",ExpressionUUID->"6b0742e9-84d1-4385-b3f6-bdb5027357ba"],
Cell[1375075, 25310, 902, 21, 119, "Text",ExpressionUUID->"df435fba-8aed-4317-b973-a0ae1ea05dfb"],
Cell[1375980, 25333, 651, 13, 153, "Text",ExpressionUUID->"36f2ca9b-5f37-40c6-a210-0204c2126c57"],
Cell[1376634, 25348, 555, 11, 119, "Text",ExpressionUUID->"4ed967c6-ed91-45cc-b028-da96d35e8f4f"],
Cell[1377192, 25361, 390, 11, 86, "Text",ExpressionUUID->"8451e67c-517c-4acf-ac0d-d0023844c036"],
Cell[1377585, 25374, 673, 14, 119, "Text",ExpressionUUID->"0554018a-8bba-4885-9f9c-85d1607f592c"],
Cell[1378261, 25390, 716, 12, 186, "Text",ExpressionUUID->"5adb069b-8ad1-4506-8a05-5f013afb4abe"],
Cell[1378980, 25404, 608, 14, 86, "Text",ExpressionUUID->"35a2910e-04f8-40e1-96a0-45a04ee0589a"],
Cell[CellGroupData[{
Cell[1379613, 25422, 308, 6, 43, "Input",ExpressionUUID->"7f1d22c7-f1c9-4956-9dee-c126ccf28e30"],
Cell[1379924, 25430, 383, 8, 49, "Output",ExpressionUUID->"5db3f1bb-90a9-450d-904b-362acc2df66c"]
}, Open  ]],
Cell[1380322, 25441, 162, 3, 52, "Text",ExpressionUUID->"9ae18cd8-ce61-48e1-9b8f-4419c20170d9"],
Cell[1380487, 25446, 458, 13, 43, "Input",ExpressionUUID->"cb2607d7-e70b-45ae-b620-36dd755f4aac"],
Cell[CellGroupData[{
Cell[1380970, 25463, 301, 6, 43, "Input",ExpressionUUID->"abb6f580-6714-434a-a77e-e28d81b6c35d"],
Cell[1381274, 25471, 220, 3, 49, "Output",ExpressionUUID->"26cfeb3a-a6dd-4f6a-835e-929592f49f97"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1381531, 25479, 960, 23, 218, "Input",ExpressionUUID->"2b58b809-8f5c-436a-ad29-4114ce355efc"],
Cell[1382494, 25504, 362, 7, 49, "Output",ExpressionUUID->"6706fc62-9573-4f0f-94fb-304b17b5e19d"]
}, Open  ]],
Cell[1382871, 25514, 224, 5, 52, "Text",ExpressionUUID->"b33d4a8c-b1e2-41c0-a52f-40b740be68f1"],
Cell[1383098, 25521, 209, 3, 43, "Input",ExpressionUUID->"0d8014e0-4925-4417-a2e9-acfd2c685ea5"],
Cell[1383310, 25526, 723, 17, 96, "Input",ExpressionUUID->"def0926f-7f8f-4c9c-b172-1f4d4466955e"],
Cell[CellGroupData[{
Cell[1384058, 25547, 1594, 37, 751, "Input",ExpressionUUID->"dab57b50-d4e6-4b2f-bb4c-3f3bc221e5ee"],
Cell[1385655, 25586, 293, 5, 49, "Output",ExpressionUUID->"81202f59-2929-4d13-81fe-aa6a4c589546"]
}, Open  ]],
Cell[1385963, 25594, 166, 3, 52, "Text",ExpressionUUID->"498c484f-82ba-4e20-a518-b0bc08f1c99c"],
Cell[CellGroupData[{
Cell[1386154, 25601, 270, 5, 43, "Input",ExpressionUUID->"db927f2a-1b60-44c0-9f17-32eaf76033b0"],
Cell[1386427, 25608, 240, 3, 49, "Output",ExpressionUUID->"82b5ad13-17d1-4e9a-908b-36b552adb82a"]
}, Open  ]],
Cell[1386682, 25614, 159, 3, 52, "Text",ExpressionUUID->"a5747a2f-4885-4112-955e-816bc8e4bbb4"],
Cell[CellGroupData[{
Cell[1386866, 25621, 1469, 36, 334, "Input",ExpressionUUID->"07e72e9a-7e7a-49dc-b3a8-7d9f5b524252"],
Cell[1388338, 25659, 194, 4, 49, "Output",ExpressionUUID->"53818d3b-9cf6-4152-a9b6-993252720bd1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1388569, 25668, 274, 6, 43, "Input",ExpressionUUID->"1df02bb1-964a-4c7c-af97-ab3e3f07af73"],
Cell[1388846, 25676, 171, 3, 49, "Output",ExpressionUUID->"3ec2d0c4-f606-49a6-81d6-fe5536a41d10"]
}, Open  ]],
Cell[1389032, 25682, 201, 3, 52, "Text",ExpressionUUID->"5bc1bdb1-6ff2-48cf-aaab-32387f01babf"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1389282, 25691, 177, 3, 102, "Chapter",ExpressionUUID->"5d2d32e4-363e-4bbb-9989-2f3989ef09df"],
Cell[1389462, 25696, 328, 7, 86, "Text",ExpressionUUID->"c60be89b-13f1-481f-88ca-c5d13d05a430"],
Cell[1389793, 25705, 910, 26, 73, "Input",ExpressionUUID->"1d00babc-64dd-46fa-9422-4e8002709a7e"],
Cell[CellGroupData[{
Cell[1390728, 25735, 273, 4, 43, "Input",ExpressionUUID->"418ae61b-2baa-481a-9285-cb5d81eb78f7"],
Cell[1391004, 25741, 152518, 2884, 165, "Output",ExpressionUUID->"52cc844d-c303-45b7-9c3c-c4fcedfd2468"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1543559, 28630, 319, 7, 43, "Input",ExpressionUUID->"01a131f4-8f32-4b0f-88e4-b238cb43705d"],
Cell[1543881, 28639, 198, 3, 49, "Output",ExpressionUUID->"be0b4712-4778-4f01-8771-3bbd45de6ea6"]
}, Open  ]],
Cell[1544094, 28645, 171, 3, 52, "Text",ExpressionUUID->"dfa37a6e-ec89-4cbc-b258-7860d0e7ae13"],
Cell[CellGroupData[{
Cell[1544290, 28652, 323, 7, 43, "Input",ExpressionUUID->"2e0b3b4a-134e-43bf-8ff8-cca2b92915d9"],
Cell[1544616, 28661, 171, 3, 49, "Output",ExpressionUUID->"0b599a3f-dd81-4034-9b49-e6f40cb9bd22"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

