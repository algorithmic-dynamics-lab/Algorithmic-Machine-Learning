(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    455206,       9717]
NotebookOptionsPosition[    427122,       9278]
NotebookOutlinePosition[    427498,       9294]
CellTagsIndexPosition[    427455,       9291]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Classifying NK Networks.", "Title",
 CellChangeTimes->{{3.7639422186436477`*^9, 3.7639422321985893`*^9}, {
  3.7640772954687347`*^9, 3.7640772956292596`*^9}, {3.7675616092201033`*^9, 
  3.7675616102445173`*^9}},ExpressionUUID->"874a30a0-675c-4794-b28c-\
8da91f905b05"],

Cell["\<\
In this experiment, we will classify NK networks according to its topology \
and underlying rules.\
\>", "Text",
 CellChangeTimes->{{3.7675616142202387`*^9, 
  3.7675616515078917`*^9}},ExpressionUUID->"be93553c-036d-4d9a-ac7c-\
8939e3748b93"],

Cell[CellGroupData[{

Cell["Helper Functions.", "Subsubsection",
 CellChangeTimes->{{3.763222058593745*^9, 3.763222067985651*^9}, {
  3.767561661308281*^9, 
  3.767561666708189*^9}},ExpressionUUID->"27c249d9-0577-42cd-a5a7-\
d91d85c681e1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"toBinaryInt", "[", 
   RowBox[{"n_", ",", "bits_"}], "]"}], ":=", 
  RowBox[{"IntegerDigits", "[", 
   RowBox[{"n", ",", "2", ",", "bits"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.763222116267547*^9, 3.7632221182108345`*^9}, 
   3.763222231562704*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"12370685-ce73-48af-b529-f259abb75f33"],

Cell["\<\
The following code contains snips from and code inspired by \
https://demonstrations.wolfram.com/BooleanNKNetworks/\
\>", "Text",
 CellChangeTimes->{{3.7632178446754875`*^9, 3.7632178632705097`*^9}, {
  3.763219795585736*^9, 
  3.7632198152898083`*^9}},ExpressionUUID->"b57281c0-fe12-4c88-a6c3-\
c09bb1331545"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ConnectivityMatrix", "[", 
   RowBox[{"n_", ",", "k_"}], "]"}], ":=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"RandomSample", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{"Prepend", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{"0", ",", 
          RowBox[{"{", 
           RowBox[{"n", "-", "k"}], "}"}]}], "]"}], ",", 
        RowBox[{"Table", "[", 
         RowBox[{"1", ",", 
          RowBox[{"{", "k", "}"}]}], "]"}]}], "]"}], "]"}], "]"}], ",", 
    RowBox[{"{", "n", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7632182481582346`*^9, 3.7632182514783287`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"893dee53-b829-44d7-96c7-0ffe75ac63ef"],

Cell[BoxData[
 RowBox[{
  RowBox[{"InitialStates", "[", "n_", "]"}], ":=", 
  RowBox[{"RandomInteger", "[", 
   RowBox[{"1", ",", "n"}], "]"}]}]], "Input",
 CellChangeTimes->{3.76321827663545*^9},
 CellLabel->"In[3]:=",ExpressionUUID->"353524e0-6de1-47ef-8262-23028959f070"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"PositionsMatrix", "[", "conM_", "]"}], ":=", 
   RowBox[{"Map", "[", 
    RowBox[{"Flatten", ",", 
     RowBox[{
      RowBox[{
       RowBox[{"Position", "[", 
        RowBox[{"#", ",", "1"}], "]"}], "&"}], "/@", "conM"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.763220628284315*^9, 3.7632206497554417`*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"50820135-0347-465e-ad22-f52a0f20e451"],

Cell[BoxData[
 RowBox[{
  RowBox[{"evolve", "[", 
   RowBox[{"state_", ",", " ", "topo_"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Table", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"With", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"inputs", " ", "=", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"topo", "[", "\"\<Connections\>\"", "]"}], ")"}], "[", 
          RowBox[{"[", "i", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"trans", " ", "=", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"topo", "[", "\"\<Rules\>\"", "]"}], ")"}], "[", 
          RowBox[{"[", "i", "]"}], "]"}]}]}], "\[IndentingNewLine]", "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"trans", "[", 
       RowBox[{"state", "[", 
        RowBox[{"[", "inputs", "]"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
     "]"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", 
      RowBox[{"Length", "@", "state"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{3.7640261240461755`*^9},
 CellLabel->"In[5]:=",ExpressionUUID->"e6ab4c10-128f-43cf-a5d4-9050a657d818"],

Cell[BoxData[
 RowBox[{
  RowBox[{"flattenEvo", "[", " ", 
   RowBox[{"str_", ",", "net_", ",", "t_"}], "]"}], ":=", " ", 
  RowBox[{"Flatten", "@", 
   RowBox[{"Rest", "@", 
    RowBox[{"NestList", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"evolve", "[", 
        RowBox[{"#", ",", "net"}], "]"}], "&"}], ",", "str", ",", "t"}], 
     "]"}], " "}]}]}]], "Input",
 CellChangeTimes->{3.764026903619737*^9},
 CellLabel->"In[6]:=",ExpressionUUID->"c60cf641-3807-4bc7-9610-a795a85b1c5c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
First, we will define a subset of Boolean functions (the Interesting ones).\
\>", "Subsubsection",
 CellChangeTimes->{{3.7640193248942833`*^9, 3.7640193292692165`*^9}, {
  3.764019469317088*^9, 
  3.7640194760305815`*^9}},ExpressionUUID->"a3fd115f-a968-420d-8dc2-\
395a9451673a"],

Cell["Lists of rules.", "Text",
 CellChangeTimes->{{3.7640160822499905`*^9, 
  3.7640160949196873`*^9}},ExpressionUUID->"d0ed6a3a-e51a-4d2a-b01e-\
3c6538783226"],

Cell[BoxData[
 RowBox[{
  RowBox[{"binToBool", "[", "x_", "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"x", "\[Equal]", "0"}], ",", "False", ",", "True"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7640163593702693`*^9, 3.764016390969613*^9}, {
   3.7640164251146097`*^9, 3.7640164630338287`*^9}, 3.764016493935714*^9, {
   3.7640166549857254`*^9, 3.764016692548742*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"482f8b41-ece3-4efa-9294-a3cc6c4bc28c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"boolToBin", "[", "x_", "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"If", "[", 
   RowBox[{"x", ",", "1", ",", "0"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7640164984735303`*^9, 3.764016504555352*^9}, {
   3.7640165736980414`*^9, 3.7640165956265945`*^9}, 3.764016668689329*^9},
 CellLabel->"In[8]:=",ExpressionUUID->"dbed5df3-bbbe-46ca-ac06-514e91544e56"],

Cell["Unary", "Text",
 CellChangeTimes->{{3.7640177973939495`*^9, 
  3.764017798963176*^9}},ExpressionUUID->"e4b5a2e8-856d-4c46-bebc-\
ca0ec5a66cf2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rNot", "[", 
   RowBox[{"{", "x_", "}"}], "]"}], ":=", " ", 
  RowBox[{"boolToBin", "@", 
   RowBox[{"Not", "@", 
    RowBox[{"binToBool", "@", "x"}]}]}]}]], "Input",
 CellChangeTimes->{{3.7640178037512035`*^9, 3.76401782197171*^9}, {
  3.7640178609008384`*^9, 3.764017894431518*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"8473119c-ed2b-4844-91e8-95c7a79c1c20"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rId", "[", 
   RowBox[{"{", "x_", "}"}], "]"}], ":=", "x"}]], "Input",
 CellChangeTimes->{{3.7640178990923605`*^9, 3.7640179296354384`*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"a685e0eb-089c-4e4c-b524-702b248932a5"],

Cell["Binary", "Text",
 CellChangeTimes->{{3.764016208937909*^9, 
  3.7640162158884273`*^9}},ExpressionUUID->"bb8b1ee6-09a1-4a8e-80a6-\
d7743ecb876b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rAnd", "[", 
   RowBox[{"{", 
    RowBox[{"x1_", ",", "x2_"}], "}"}], "]"}], ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"boolToBin", "[", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"binToBool", "@", "x1"}], ")"}], "&&", 
    RowBox[{"(", 
     RowBox[{"binToBool", "@", "x2"}], ")"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.764016100578833*^9, 3.7640161222828827`*^9}, {
  3.764016188457032*^9, 3.764016202444357*^9}, {3.764016680369601*^9, 
  3.7640167081088343`*^9}, {3.764016759795576*^9, 3.7640167704835825`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"e721d3fc-42ac-4c8a-b7ed-afee8bb870ed"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rOr", "[", 
   RowBox[{"{", 
    RowBox[{"x1_", ",", "x2_"}], "}"}], "]"}], ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"boolToBin", "[", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"binToBool", "@", "x1"}], ")"}], "||", 
    RowBox[{"(", 
     RowBox[{"binToBool", "@", "x2"}], ")"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.76401622571498*^9, 3.7640162523791437`*^9}, {
  3.7640167141373825`*^9, 3.764016772178268*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"d4762275-2b85-43ba-8c0d-5119bbee79a1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rNand", "[", 
   RowBox[{"{", 
    RowBox[{"x1_", ",", "x2_"}], "}"}], "]"}], ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"boolToBin", "[", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"binToBool", "@", "x1"}], ")"}], "\[Nand]", 
    RowBox[{"(", 
     RowBox[{"binToBool", "@", "x2"}], ")"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7640162583460517`*^9, 3.7640163016498175`*^9}, {
  3.7640168087819777`*^9, 3.764016833565008*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"1085c377-77d7-4dd7-a430-3b3d5849b375"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rXor", "[", 
   RowBox[{"{", 
    RowBox[{"x1_", ",", "x2_"}], "}"}], "]"}], ":=", " ", 
  "\[IndentingNewLine]", 
  RowBox[{"boolToBin", "[", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"binToBool", "@", "x1"}], ")"}], "\[Xor]", 
    RowBox[{"(", 
     RowBox[{"binToBool", "@", "x2"}], ")"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.764016840626693*^9, 3.7640169060330772`*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"d9f36823-0a5a-47b8-aa6e-ed9af6f2bee6"],

Cell["Tertiary", "Text",
 CellChangeTimes->{{3.764016915329811*^9, 
  3.7640169266447906`*^9}},ExpressionUUID->"ddc5a747-7545-44b2-9913-\
16f686e3b08f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RuleK3A", "[", 
   RowBox[{"{", 
    RowBox[{"x1_", ",", "x2_", ",", "x3_"}], "}"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"x1", "+", "x2", "+", "x3"}], "\[Equal]", "3"}], ",", "1", ",", 
    "0"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.764018378660403*^9, 3.764018382492305*^9}, {
   3.764018470552457*^9, 3.7640185057076263`*^9}, {3.7640187188588705`*^9, 
   3.7640187212300215`*^9}, 3.7640187780143185`*^9, 3.7640188092776904`*^9, {
   3.764018849774208*^9, 3.764018855702237*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"81083405-bee9-469c-9a61-9328b1027b28"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RuleK3B", "[", 
   RowBox[{"{", 
    RowBox[{"x1_", ",", "x2_", ",", "x3_"}], "}"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"x1", "+", "x2", "+", "x3"}], "\[Equal]", "3"}], ",", "0", ",", 
    "1"}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.7640183910862436`*^9, {3.764018488366438*^9, 3.76401850765167*^9}, 
   3.7640187274728622`*^9, {3.7640187661769896`*^9, 3.7640187814611073`*^9}, 
   3.7640188130293446`*^9, {3.7640188620719748`*^9, 3.7640188689178286`*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"c427242b-482a-48b2-aa67-e5448f8e30ea"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RuleK3C", "[", 
   RowBox[{"{", 
    RowBox[{"x1_", ",", "x2_", ",", "x3_"}], "}"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"x1", "+", "x2", "+", "x3"}], "\[Equal]", "2"}], ",", "1", ",", 
    "0"}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.764018398774499*^9, {3.7640184917573557`*^9, 3.7640185090354233`*^9}, 
   3.764018732591679*^9, {3.764018788348815*^9, 3.7640188151159935`*^9}, {
   3.7640188758145*^9, 3.7640188821981845`*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"67fec7d2-6b8e-48b3-b88e-856beb5f79db"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RuleK3D", "[", 
   RowBox[{"{", 
    RowBox[{"x1_", ",", "x2_", ",", "x3_"}], "}"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"x1", "+", "x2", "+", "x3"}], "\[Equal]", "2"}], ",", "0", ",", 
    "1"}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.7640184067989864`*^9, {3.764018494069368*^9, 3.7640185106347804`*^9}, 
   3.7640187438527403`*^9, {3.764018791178076*^9, 3.764018817885414*^9}, {
   3.764018890936209*^9, 3.764018899446189*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"f892614f-68b3-4fd2-8c77-35a5b5b8b7f7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RuleK3E", "[", 
   RowBox[{"{", 
    RowBox[{"x1_", ",", "x2_", ",", "x3_"}], "}"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"x1", "+", "x2", "+", "x3"}], "\[Equal]", "1"}], ",", "1", ",", 
    "0"}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.7640184141907525`*^9, {3.7640184955977*^9, 3.764018512099656*^9}, 
   3.7640187477839193`*^9, {3.7640187936564207`*^9, 3.7640188211720552`*^9}, {
   3.764018908901971*^9, 3.764018914821252*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"cd75814e-3806-40e8-a8aa-212e667b61db"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RuleK3F", "[", 
   RowBox[{"{", 
    RowBox[{"x1_", ",", "x2_", ",", "x3_"}], "}"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"x1", "+", "x2", "+", "x3"}], "\[Equal]", "1"}], ",", "0", ",", 
    "1"}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.7640184200554066`*^9, {3.764018497256403*^9, 3.7640185136603727`*^9}, 
   3.7640187518960195`*^9, {3.764018796487543*^9, 3.764018826523119*^9}, {
   3.7640189294463725`*^9, 3.7640189427020025`*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"93f8da89-dd9f-4f88-98de-60a0d5b0ba05"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RuleK3G", "[", 
   RowBox[{"{", 
    RowBox[{"x1_", ",", "x2_", ",", "x3_"}], "}"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"x1", "+", "x2", "+", "x3"}], "\[Equal]", "0"}], ",", "1", ",", 
    "0"}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.764018429872346*^9, {3.764018501159673*^9, 3.764018515107092*^9}, 
   3.7640187559026175`*^9, 3.764018799070079*^9, 3.7640188415251846`*^9, {
   3.7640189479991875`*^9, 3.7640189533340096`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"92a7d00a-0d12-4913-b705-8b032e2ea73f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RuleK3H", "[", 
   RowBox[{"{", 
    RowBox[{"x1_", ",", "x2_", ",", "x3_"}], "}"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"x1", "+", "x2", "+", "x3"}], "\[Equal]", "0"}], ",", "0", ",", 
    "1"}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.764018444433076*^9, {3.7640185031563025`*^9, 3.76401851617216*^9}, 
   3.7640187588929605`*^9, 3.764018802119895*^9, 3.7640188444718986`*^9, {
   3.7640189578777695`*^9, 3.764018963181004*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"370a4d34-ab28-449b-b47b-cb47fbcb45b7"],

Cell["Function to randomly select rules.", "Text",
 CellChangeTimes->{{3.7640190795974193`*^9, 
  3.7640190955335417`*^9}},ExpressionUUID->"33acff72-d131-4c9f-b3bc-\
7da7e222c280"],

Cell[BoxData[
 RowBox[{
  RowBox[{"randomRule", "[", "k_", "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Which", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"k", "\[Equal]", "1"}], ",", 
    RowBox[{"RandomChoice", "[", 
     RowBox[{"{", 
      RowBox[{"rNot", ",", "rId"}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"k", "\[Equal]", "2"}], ",", 
    RowBox[{"RandomChoice", "[", 
     RowBox[{"{", 
      RowBox[{"rAnd", ",", "rOr", ",", "rNand", ",", "rXor"}], "}"}], "]"}], 
    ",", " ", "\[IndentingNewLine]", 
    RowBox[{"(*", "  ", 
     RowBox[{
      RowBox[{"k", "\[Equal]", "2"}], ",", 
      RowBox[{"RandomChoice", "[", 
       RowBox[{"{", 
        RowBox[{"rNand", ",", "rXor"}], "}"}], "]"}], ","}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"k", "\[Equal]", "3"}], ",", 
    RowBox[{"RandomChoice", "[", 
     RowBox[{"{", 
      RowBox[{
      "RuleK3A", ",", "RuleK3B", ",", "RuleK3C", ",", "RuleK3D", ",", 
       "RuleK3E", ",", "RuleK3F", ",", "RuleK3G", ",", "RuleK3H"}], "}"}], 
     "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7640190987374387`*^9, 3.7640192568971577`*^9}, {
  3.7640818541241217`*^9, 3.7640818786621385`*^9}, {3.7640826750464664`*^9, 
  3.764082698392476*^9}, {3.764082738676405*^9, 3.7640827405673723`*^9}, {
  3.764083432382781*^9, 3.764083438244487*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"f537061d-7fcd-4973-b4bb-c77c012d630f"],

Cell["Function that generates a random NK network topology.", "Text",
 CellChangeTimes->{{3.764019555977293*^9, 
  3.7640195591651754`*^9}},ExpressionUUID->"33498434-5f2c-442e-b971-\
748a3e2eb6e4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"randomNetwork", "[", 
   RowBox[{"n_", ",", "k_"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"With", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"rules", " ", "=", " ", 
       RowBox[{"RandomChoice", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"randomRule", "[", "k", "]"}], "&"}], "/@", 
          RowBox[{"Range", "[", "n", "]"}]}], "\[IndentingNewLine]", ",", 
         "n"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"connections", " ", "=", " ", 
       RowBox[{"PositionsMatrix", "[", 
        RowBox[{"ConnectivityMatrix", "[", 
         RowBox[{"n", ",", "k"}], "]"}], "]"}]}]}], "\[IndentingNewLine]", 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Association", "[", "\[IndentingNewLine]", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\"\<Connections\>\"", "->", "connections"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Rules\>\"", "\[Rule]", " ", "rules"}]}], 
      "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7640195661780868`*^9, 3.7640195742491326`*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"6a15477e-78ab-4039-ae51-14e7cd3a8373"],

Cell["\<\
Function that generates a random NK network topology with reduced number of \
rules.\
\>", "Text",
 CellChangeTimes->{{3.7640196456954165`*^9, 
  3.7640196575740337`*^9}},ExpressionUUID->"3980091e-d6a0-4d64-9898-\
f6008ba5af37"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "R", " ", "is", " ", "the", " ", "number", " ", "of", " ", "rules", " ", 
    "on", " ", "each", " ", "network"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"randomNetwork", "[", 
    RowBox[{"n_", ",", "k_", ",", "r_"}], "]"}], ":=", " ", 
   "\[IndentingNewLine]", 
   RowBox[{"With", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"rules", " ", "=", " ", 
        RowBox[{"RandomChoice", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"randomRule", "[", "k", "]"}], "&"}], "/@", 
           RowBox[{"Range", "[", "r", "]"}]}], "\[IndentingNewLine]", ",", 
          "n"}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"connections", " ", "=", " ", 
        RowBox[{"PositionsMatrix", "[", 
         RowBox[{"ConnectivityMatrix", "[", 
          RowBox[{"n", ",", "k"}], "]"}], "]"}]}]}], "\[IndentingNewLine]", 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Association", "[", "\[IndentingNewLine]", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"\"\<Connections\>\"", "->", "connections"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"\"\<Rules\>\"", "\[Rule]", " ", "rules"}]}], 
       "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", "]"}]}], 
    "\[IndentingNewLine]", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.764020218585822*^9, 3.7640202244491253`*^9}, {
  3.764020257033181*^9, 3.764020333201499*^9}, {3.7640249136978397`*^9, 
  3.764024917615613*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"b9670c43-fbc2-4e2a-bb60-0d05a96b6cc6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"randomNetwork", "[", 
  RowBox[{"10", ",", "2", ",", "4"}], "]"}]], "Input",
 CellChangeTimes->{{3.7640203428479533`*^9, 3.7640204033517694`*^9}, {
  3.7640827293784475`*^9, 3.7640827584945717`*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"5c6db84e-fd64-4083-8317-06d1b9ca627c"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Connections\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"5", ",", "10"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "6"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"7", ",", "10"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4", ",", "5"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "9"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4", ",", "8"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"8", ",", "9"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4", ",", "8"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"8", ",", "10"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"\<\"Rules\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "rNand", ",", "rAnd", ",", "rAnd", ",", "rNand", ",", "rNand", ",", 
      "rNand", ",", "rOr", ",", "rOr", ",", "rNand", ",", "rOr"}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.7640203495816746`*^9, 3.7640204040869555`*^9}, 
   3.7640259262361393`*^9, 3.764025993581964*^9, 3.7640306532541547`*^9, 
   3.764030965247978*^9, 3.7640310850851507`*^9, 3.7640541482226286`*^9, 
   3.764077369956295*^9, 3.7640819007181864`*^9, {3.7640827229663844`*^9, 
   3.7640827650796013`*^9}, 3.764085364191309*^9, 3.764777817303138*^9, 
   3.76477961344165*^9, 3.764779679465692*^9, 3.7647800450136995`*^9, 
   3.765211134757868*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"a45884e2-271b-4e71-9522-3344e24340f2"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["The Sets.", "Chapter",
 CellChangeTimes->{{3.7640794497635956`*^9, 
  3.764079453504461*^9}},ExpressionUUID->"454dd695-6fab-400b-a280-\
791fc6251cdf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nSamples", " ", "=", " ", "20"}]], "Input",
 CellChangeTimes->{{3.76407946804916*^9, 3.7640794710244637`*^9}, {
  3.764779566183879*^9, 3.764779567500313*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"d341443c-fdfa-44c6-92ac-8cfa84c3bcfd"],

Cell[BoxData["20"], "Output",
 CellChangeTimes->{3.764079471796022*^9, 3.7640819007401733`*^9, 
  3.7640853642322845`*^9, 3.7647778173281236`*^9, 3.764779613462639*^9, 
  3.764779679485682*^9, 3.764780045041771*^9, 3.765211134783852*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"af104991-7556-490a-87a2-a55985b48957"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nClasses", " ", "=", " ", "10"}]], "Input",
 CellChangeTimes->{{3.7640794804410896`*^9, 3.764079490617282*^9}, 
   3.764082249393807*^9, {3.764779562200836*^9, 3.7647795632682886`*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"2d31d83a-b564-40d0-9f3a-236a98b43198"],

Cell[BoxData["10"], "Output",
 CellChangeTimes->{3.764079491258915*^9, 3.7640819007651596`*^9, 
  3.764082252394947*^9, 3.764085364268295*^9, 3.76477781735011*^9, 
  3.764779613484625*^9, 3.7647796795076685`*^9, 3.7647800450646825`*^9, 
  3.765211134810837*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"d2fffe5a-2e1b-4f17-b6f6-d7024118d88b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FactorInteger", "[", "nClasses", "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[29]:=",ExpressionUUID->"5c69b0b7-33f1-412e-bba4-8ec221b744af"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.764081900790146*^9, 3.764085364301276*^9, 
  3.7647778173740964`*^9, 3.764779613511609*^9, 3.7647796795296555`*^9, 
  3.7647800450886693`*^9, 3.76521113484382*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"779d7ae7-d013-4a71-a8a3-d07315c15b7b"]
}, Open  ]],

Cell["Network parameters.", "Text",
 CellChangeTimes->{{3.7640796390476136`*^9, 
  3.764079648999934*^9}},ExpressionUUID->"36d95153-24b9-4563-a69c-\
b1c7a16f8c8e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"n", " ", "=", " ", "4"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"k", " ", "=", " ", "2"}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"r", " ", "=", " ", "4"}], ";"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"t", " ", "=", "10"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ini", " ", "=", " ", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"0", ",", "n"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{
  3.7640796316338425`*^9, {3.7640796718558903`*^9, 3.7640796728633156`*^9}, {
   3.7640810661307116`*^9, 3.764081069947534*^9}, {3.764081385059077*^9, 
   3.764081410980286*^9}, {3.7640825811823225`*^9, 3.764082604110134*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"42b3b650-491f-4257-bfea-450c924e0aa2"],

Cell["\<\
We will choose 10 classes for each cases: topologies and rules.\
\>", "Text",
 CellChangeTimes->{{3.764079514905424*^9, 3.764079532040646*^9}, {
  3.764079915424904*^9, 
  3.764079936705761*^9}},ExpressionUUID->"c2721bac-a1f9-43e9-afe9-\
f4bf1401600c"],

Cell[TextData[{
 "I will define a ",
 StyleBox["random rule ",
  FontSlant->"Italic"],
 "function so that at least one NAND is present and the evolution can always \
scape from the cero case."
}], "Text",
 CellChangeTimes->{{3.764082789348799*^9, 
  3.7640828455737*^9}},ExpressionUUID->"f8ca8c3b-cb0b-4a7d-8a95-9bb87f96c07a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"randomRuleL", "[", 
   RowBox[{"2", ",", "n_"}], "]"}], " ", ":=", " ", 
  RowBox[{"RandomSample", "[", 
   RowBox[{"Flatten", "@", 
    RowBox[{"{", 
     RowBox[{"rNand", ",", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"randomRule", "[", "2", "]"}], "&"}], "/@", 
       RowBox[{"Range", "[", 
        RowBox[{"n", "-", "1"}], "]"}]}]}], "}"}]}], " ", "]"}]}]], "Input",
 CellChangeTimes->{{3.764082954466154*^9, 3.7640830129189224`*^9}, {
  3.7640831207120576`*^9, 3.7640832172863455`*^9}, {3.764083255632554*^9, 
  3.76408327722576*^9}, {3.764083383714327*^9, 3.764083413563773*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"c969ae58-780f-4a9a-a2c9-6b357fcdc317"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"SeedRandom", "[", "4122019", "]"}], "\[IndentingNewLine]", 
 RowBox[{"classesTopo", " ", "=", " ", 
  RowBox[{"DeleteDuplicates", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "[", "\"\<Connections\>\"", "]"}], "&"}], "/@", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"randomNetwork", "[", 
        RowBox[{"n", ",", "k"}], "]"}], "&"}], "/@", 
      RowBox[{"Range", "[", "nClasses", "]"}]}], ")"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"classesRules", " ", "=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"randomRuleL", "[", 
     RowBox[{"k", ",", "n"}], "]"}], " ", "&"}], "/@", 
   RowBox[{"Range", "[", "nClasses", "]"}]}]}]}], "Input",
 CellChangeTimes->{{3.7640794978971295`*^9, 3.764079501880855*^9}, {
  3.7640795380732203`*^9, 3.764079598145953*^9}, {3.764079954157802*^9, 
  3.7640799548983774`*^9}, {3.76407998839602*^9, 3.7640801520201073`*^9}, {
  3.7640823824010205`*^9, 3.7640824135421343`*^9}, {3.7640833379814863`*^9, 
  3.7640833562481995`*^9}, {3.764084134341791*^9, 3.7640841383674927`*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"4b18907b-3dd2-402d-bf32-e572ea4c6ec9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "4"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.7640798886721687`*^9, {3.764080019978445*^9, 3.7640800508278513`*^9}, 
   3.7640801533613405`*^9, 3.764081900841087*^9, 3.76408241695105*^9, 
   3.764083362335824*^9, {3.7640834176057663`*^9, 3.7640834454408703`*^9}, 
   3.7640853643643017`*^9, 3.7647778174380608`*^9, 3.7647796135745735`*^9, 
   3.76477967959262*^9, 3.7647800451726274`*^9, 3.76521113494676*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"bf0c0704-4fd1-4756-982f-57f77352f7c4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"rOr", ",", "rOr", ",", "rNand", ",", "rOr"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"rAnd", ",", "rOr", ",", "rNand", ",", "rAnd"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"rAnd", ",", "rNand", ",", "rOr", ",", "rAnd"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"rNand", ",", "rAnd", ",", "rAnd", ",", "rNand"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"rNand", ",", "rNand", ",", "rNand", ",", "rAnd"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"rNand", ",", "rNand", ",", "rOr", ",", "rAnd"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"rXor", ",", "rNand", ",", "rXor", ",", "rXor"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"rOr", ",", "rOr", ",", "rAnd", ",", "rNand"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"rXor", ",", "rXor", ",", "rXor", ",", "rNand"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"rAnd", ",", "rNand", ",", "rAnd", ",", "rXor"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.7640798886721687`*^9, {3.764080019978445*^9, 3.7640800508278513`*^9}, 
   3.7640801533613405`*^9, 3.764081900841087*^9, 3.76408241695105*^9, 
   3.764083362335824*^9, {3.7640834176057663`*^9, 3.7640834454408703`*^9}, 
   3.7640853643643017`*^9, 3.7647778174380608`*^9, 3.7647796135745735`*^9, 
   3.76477967959262*^9, 3.7647800451726274`*^9, 3.765211134952757*^9},
 CellLabel->"Out[37]=",ExpressionUUID->"8b4c973e-2878-4063-894b-809d37b870ed"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Topology Test Set.", "Subsubsection",
 CellChangeTimes->{{3.764083780771302*^9, 
  3.764083787287218*^9}},ExpressionUUID->"58abda7c-0f70-4bf5-a446-\
af6ab5c25fae"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "4122019", "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"TrainingSetTopo", " ", "=", " ", 
    RowBox[{"Flatten", "@", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"With", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"tp", " ", "=", " ", 
           RowBox[{"classesTopo", "[", 
            RowBox[{"[", "j", "]"}], "]"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Table", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"With", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"cn", " ", "=", " ", 
               RowBox[{"randomRuleL", "[", 
                RowBox[{"k", ",", "n"}], "]"}]}], " ", "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"flattenEvo", "[", " ", 
               RowBox[{"ini", ",", "\[IndentingNewLine]", 
                RowBox[{"\[LeftAssociation]", 
                 RowBox[{
                  RowBox[{"\"\<Connections\>\"", "\[Rule]", " ", "tp"}], ",", 
                  RowBox[{"\"\<Rules\>\"", "\[Rule]", " ", "cn"}]}], 
                 "\[RightAssociation]"}], ",", "\[IndentingNewLine]", "t"}], 
               "]"}], "\[Rule]", "j"}]}], "\[IndentingNewLine]", "]"}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "nSamples"}], "}"}]}], "]"}]}], 
        "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", 
         RowBox[{"Length", "@", "classesTopo"}]}], "}"}]}], 
      "\[IndentingNewLine]", "]"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ValidationSetTopo", " ", "=", " ", 
    RowBox[{"Flatten", "@", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"With", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"tp", " ", "=", " ", 
           RowBox[{"classesTopo", "[", 
            RowBox[{"[", "j", "]"}], "]"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Table", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"With", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"cn", " ", "=", " ", 
               RowBox[{"randomRuleL", "[", 
                RowBox[{"k", ",", "n"}], "]"}]}], " ", "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"flattenEvo", "[", " ", 
               RowBox[{"ini", ",", "\[IndentingNewLine]", 
                RowBox[{"\[LeftAssociation]", 
                 RowBox[{
                  RowBox[{"\"\<Connections\>\"", "\[Rule]", " ", "tp"}], ",", 
                  RowBox[{"\"\<Rules\>\"", "\[Rule]", " ", "cn"}]}], 
                 "\[RightAssociation]"}], ",", "\[IndentingNewLine]", "t"}], 
               "]"}], "\[Rule]", "j"}]}], "\[IndentingNewLine]", "]"}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "nSamples"}], "}"}]}], "]"}]}], 
        "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", 
         RowBox[{"Length", "@", "classesTopo"}]}], "}"}]}], 
      "\[IndentingNewLine]", "]"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TestSetTopo", " ", "=", " ", 
   RowBox[{"Flatten", "@", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"With", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"tp", " ", "=", " ", 
          RowBox[{"classesTopo", "[", 
           RowBox[{"[", "j", "]"}], "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Table", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"With", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"cn", " ", "=", " ", 
              RowBox[{"randomRuleL", "[", 
               RowBox[{"k", ",", "n"}], "]"}]}], " ", "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"flattenEvo", "[", " ", 
              RowBox[{"ini", ",", "\[IndentingNewLine]", 
               RowBox[{"\[LeftAssociation]", 
                RowBox[{
                 RowBox[{"\"\<Connections\>\"", "\[Rule]", " ", "tp"}], ",", 
                 RowBox[{"\"\<Rules\>\"", "\[Rule]", " ", "cn"}]}], 
                "\[RightAssociation]"}], ",", "\[IndentingNewLine]", "t"}], 
              "]"}], "\[Rule]", "j"}]}], "\[IndentingNewLine]", "]"}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"10", "*", "nSamples"}]}], "}"}]}], "]"}]}], 
       "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", 
        RowBox[{"Length", "@", "classesTopo"}]}], "}"}]}], 
     "\[IndentingNewLine]", "]"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.7640794555802755`*^9, 3.764079460232621*^9}, {
   3.7640798723864613`*^9, 3.7640798849392996`*^9}, {3.7640801786419163`*^9, 
   3.764080182002*^9}, {3.764080614874093*^9, 3.7640807539080987`*^9}, {
   3.7640807869432487`*^9, 3.7640808955101213`*^9}, {3.7640809474954553`*^9, 
   3.7640810620120535`*^9}, {3.7640810982283955`*^9, 
   3.7640811633892374`*^9}, {3.7640812635983753`*^9, 3.764081343467799*^9}, {
   3.764081420550826*^9, 3.7640814214942865`*^9}, 3.7640821409090195`*^9, {
   3.7640821930050735`*^9, 3.7640821948286257`*^9}, {3.7640826201011057`*^9, 
   3.7640826204335856`*^9}, {3.764083492464552*^9, 3.7640835050935493`*^9}, {
   3.764083580759618*^9, 3.7640835996306973`*^9}, {3.764083760480281*^9, 
   3.764083763600009*^9}, {3.7640840733699417`*^9, 3.764084077515142*^9}, {
   3.7647799869770412`*^9, 3.764779987197923*^9}, {3.7652111141957197`*^9, 
   3.7652111144741783`*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"ce99026e-2ba9-4ff6-ac87-b8ebc2cf5ae8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "@", "TrainingSetTopo"}]], "Input",
 CellChangeTimes->{{3.7647795248117533`*^9, 3.7647795523107076`*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"2600a2ef-976d-44e3-a31e-7a520103ec3a"],

Cell[BoxData["200"], "Output",
 CellChangeTimes->{3.7647795530561223`*^9, 3.76477961376961*^9, 
  3.764779679818492*^9, 3.7647800456516857`*^9, 3.765211135734462*^9},
 CellLabel->"Out[42]=",ExpressionUUID->"9e6c75e8-9c08-4ec0-ba6e-58238a70e30f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Rules Test Sets", "Subsubsection",
 CellChangeTimes->{{3.764083970096651*^9, 
  3.7640839914712276`*^9}},ExpressionUUID->"95c7f8b8-b7f0-4226-863e-\
b84be8d6c63f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "4122019", "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"TrainingSetRules", " ", "=", " ", 
    RowBox[{"Flatten", "@", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"With", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"rl", " ", "=", " ", 
           RowBox[{"classesRules", "[", 
            RowBox[{"[", "j", "]"}], "]"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Table", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"With", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"cn", " ", "=", " ", 
               RowBox[{"randomNetwork", "[", 
                RowBox[{"n", ",", "k"}], "]"}]}], " ", "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"flattenEvo", "[", " ", 
               RowBox[{"ini", ",", "\[IndentingNewLine]", 
                RowBox[{"\[LeftAssociation]", 
                 RowBox[{
                  RowBox[{"\"\<Connections\>\"", "\[Rule]", " ", 
                   RowBox[{"cn", "[", "\"\<Connections\>\"", "]"}]}], ",", 
                  RowBox[{"\"\<Rules\>\"", "\[Rule]", " ", "rl"}]}], 
                 "\[RightAssociation]"}], ",", "\[IndentingNewLine]", "t"}], 
               "]"}], "\[Rule]", "j"}]}], "\[IndentingNewLine]", "]"}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "nSamples"}], "}"}]}], "]"}]}], 
        "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", 
         RowBox[{"Length", "@", "classesTopo"}]}], "}"}]}], 
      "\[IndentingNewLine]", "]"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ValidationSetRules", " ", "=", " ", 
    RowBox[{"Flatten", "@", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"With", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"rl", " ", "=", " ", 
           RowBox[{"classesRules", "[", 
            RowBox[{"[", "j", "]"}], "]"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Table", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"With", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"cn", " ", "=", " ", 
               RowBox[{"randomNetwork", "[", 
                RowBox[{"n", ",", "k"}], "]"}]}], " ", "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"flattenEvo", "[", " ", 
               RowBox[{"ini", ",", "\[IndentingNewLine]", 
                RowBox[{"\[LeftAssociation]", 
                 RowBox[{
                  RowBox[{"\"\<Connections\>\"", "\[Rule]", " ", 
                   RowBox[{"cn", "[", "\"\<Connections\>\"", "]"}]}], ",", 
                  RowBox[{"\"\<Rules\>\"", "\[Rule]", " ", "rl"}]}], 
                 "\[RightAssociation]"}], ",", "\[IndentingNewLine]", "t"}], 
               "]"}], "\[Rule]", "j"}]}], "\[IndentingNewLine]", "]"}], 
           "\[IndentingNewLine]", ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "nSamples"}], "}"}]}], "]"}]}], 
        "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", 
         RowBox[{"Length", "@", "classesTopo"}]}], "}"}]}], 
      "\[IndentingNewLine]", "]"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TestSetRules", " ", "=", " ", 
   RowBox[{"Flatten", "@", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"With", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"rl", " ", "=", " ", 
          RowBox[{"classesRules", "[", 
           RowBox[{"[", "j", "]"}], "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Table", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"With", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"cn", " ", "=", " ", 
              RowBox[{"randomNetwork", "[", 
               RowBox[{"n", ",", "k"}], "]"}]}], " ", "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"flattenEvo", "[", " ", 
              RowBox[{"ini", ",", "\[IndentingNewLine]", 
               RowBox[{"\[LeftAssociation]", 
                RowBox[{
                 RowBox[{"\"\<Connections\>\"", "\[Rule]", " ", 
                  RowBox[{"cn", "[", "\"\<Connections\>\"", "]"}]}], ",", 
                 RowBox[{"\"\<Rules\>\"", "\[Rule]", " ", "rl"}]}], 
                "\[RightAssociation]"}], ",", "\[IndentingNewLine]", "t"}], 
              "]"}], "\[Rule]", "j"}]}], "\[IndentingNewLine]", "]"}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"10", "*", "nSamples"}]}], "}"}]}], "]"}]}], 
       "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", 
        RowBox[{"Length", "@", "classesTopo"}]}], "}"}]}], 
     "\[IndentingNewLine]", "]"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.764084004443711*^9, 3.7640840540728464`*^9}, {
   3.764084093962113*^9, 3.764084102330059*^9}, {3.764084166611083*^9, 
   3.764084182625943*^9}, {3.7640842293936586`*^9, 3.764084238473913*^9}, {
   3.764084941391726*^9, 3.7640849621638556`*^9}, 3.764779657686305*^9, {
   3.764780016205477*^9, 3.764780027254185*^9}, {3.765211103019174*^9, 
   3.765211103323001*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"cc81dbdc-e0dc-4cb7-88d7-53da67a895ee"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Classifying the Sets with Deep Learning", "Chapter",
 CellChangeTimes->{{3.76408436465495*^9, 
  3.7640843935449767`*^9}},ExpressionUUID->"2b6c00b2-213c-4ed8-bf63-\
30f517089c18"],

Cell["Let\[CloseCurlyQuote]s see how Mathematica does to classify this \
problem.", "Text",
 CellChangeTimes->{{3.7640843963995504`*^9, 3.7640844011197243`*^9}, {
  3.7640845273678613`*^9, 
  3.764084545416128*^9}},ExpressionUUID->"0d501811-8ed8-4047-a37a-\
3d6d1b437fd0"],

Cell[CellGroupData[{

Cell["Topology:", "Subsubsection",
 CellChangeTimes->{{3.764084847505571*^9, 
  3.764084861200983*^9}},ExpressionUUID->"35c04c40-6acc-4173-b3ed-\
f22997521ca0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"c1Top", " ", "=", " ", 
  RowBox[{"Classify", "[", "TrainingSetTopo", "]"}]}]], "Input",
 CellChangeTimes->{{3.7640846465375214`*^9, 3.7640846703724737`*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"64efad9e-a3ef-4e8d-bace-5ec7bb811d7d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "40", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox["10", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", 
                    ",", "7", ",", "8", ",", "9", ",", "10"}], "}"}], 
                    Short[#, 1]& ]], Annotation[#, 
                    Short[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 1], "Tooltip"]& ], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "40", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox["10", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", 
                    ",", "7", ",", "8", ",", "9", ",", "10"}], "}"}], 
                    Short[#, 1]& ]], Annotation[#, 
                    Short[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 1], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["200", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 200, "ClassNumber" -> 10, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "BooleanVector", "Length" -> 40]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"BooleanVector"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ConformBooleanVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 8258112739109874696, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "BooleanVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 6090998123808376730, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 200, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> CompressedData["
1:eJxFT68TgjAYxUrWqmfDP0JfxAqZ5J0axWonk7VqJpOxauZOBbZhw4pZvrHN
d7e97fv13jdd7fz1wLIspzv5OZzb+RMLm14PTKLGS8cFLhQ+M2w3BIFZEGet
8wbdQSwwSlx+GApYEgyfritqOK6UzgrcbwSGL33bP/fzSlOv41I2qiHHJjVO
RwIHVXlpqfSZ4pfS4VhSucuVf2HiWl/nexLY01ohN3tpv74UYpDjg0r5qEy/
Zu1H6/0ANwCojg==
                    "], "Method" -> "Naive", "VectorLength" -> 40, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> CompressedData["
1:eJxFT68TgjAYxUrWqmfDP0JfxAqZ5J0axWonk7VqJpOxauZOBbZhw4pZvrHN
d7e97fv13jdd7fz1wLIspzv5OZzb+RMLm14PTKLGS8cFLhQ+M2w3BIFZEGet
8wbdQSwwSlx+GApYEgyfritqOK6UzgrcbwSGL33bP/fzSlOv41I2qiHHJjVO
RwIHVXlpqfSZ4pfS4VhSucuVf2HiWl/nexLY01ohN3tpv74UYpDjg0r5qEy/
Zu1H6/0ANwCojg==
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGDQAOIp/cp91bvu2/9fI5tmVHXfvvL9PeeD9+7bL+sMnV34
874969etFwIW37e/dK+By+XZPXupkL3ZZdPu28P0MYDBA3u9nYsOnD1y337r
QtbVz1/ft9/fk/76wNf79s4/+HbafkTQMHGYeph4wbQ7jd7m9+291QrWJKjc
t1+64+ST99cQ7njackJ5+n+Evi/6a+d6nrtvv3pmRfi+p/ft193dbRK0HiEO
swcmj+4/mL9g7mX9Jdwe8w9Bw+yD6YfRMPfA7AMAgAG4Nw==
                    "], "Method" -> "NaiveSampler", "VectorLength" -> 40, 
                   "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 40]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                   True, "Invertibility" -> "Perfect", "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 21]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                "Model" -> Association["Matrix" -> CompressedData["
1:eJwVl2c8Fo4TwK1KMipJSVLZqWRUSs4IUUpIhBJRSopQZJcRkr032TIee92z
rQePGaXMpFSkfkSqv/+Le3Fv7sXdfe6+373W9wxt2VhYWKTWQmAttiz7buQJ
bIClIIXO9+o1KNnaKDjHi+A7dnVn/qoc5p66ou7VWou+nZyp+6czUXSntGid
QSv6ZZL8r9nEANsJyUGzeho8XmgO3iM1gdIBA/Vv3nQB+VBe645DQ2Cr9Mrs
4LVMcK65WZ/UnInPDvstmuUyYS/3pnraTBfMZ+TJGe/PAfqT6bnBjS2oejYu
SLimDHpuun/m+tGJxW8SL/CNM+D7ysisgWwlEg0at9lfrYaZIkKqSgoJSEs/
U7sViTBGVjpr4h2LJkUPv+mFUbA/SnShZU8XHiOqGAyOMEBx0isnriAXRm45
xFWL9MKsm7bZtNUgTh2JLy0634RSD9+1fcjuxPtPXXqeWQbg4d33hnklBoFD
UsXkX9wbEBw03Kg61YfTkmrnZH7XYyzPs+7ge0x4lfjgyvxqLS6NNnT6WzQh
ecv0XHBcHeze/ut8s0oN3LqFTn7xFPyySbf8rH4BxAe625YfZeJZF8siTSEm
fMv9YVY0S4edKtIi1+Sq0DdUPa1lwATL/ZLH079VwEVpK52lWBoqmoo5vdDq
wBHdnzjD1gVCobfo2sVtyM+y28HtBwMr4kMnBLyqoTFI7O8mDhegS/xQeDPI
QMFTRNE/hEzQunmhYufBSZxLvpinMloNbKQ4ywpjMi4Efdgf8KwCB4O2y3KO
ZWLFcojqiC8Fo0RWHnmdqUWDRseCsAPOIMIRs1tCOwcUjboFlu9X4sxY3Q0B
tmrIvasxo/LvHXw5Me4xzzkCvwND2nIqK6D0m2oTIbMZxZ5oXQsOeQcBj34m
n52lgKequSjHvkZUDZNw15Ygwa/lBN6q0AaQXfVNyvXugo/svFgaMYC54tct
hIzr4XNwuKKkHQV+Wvjeu3QwEmib/a8km9EhQLDf4OEFOh6Vd1H3ocfigpNH
j5NrCzRM6w0aj9fByhJhqEO9E3hv84jZbegDEUrepmKPJLQgTRef2dCI0lfS
GrR96JC+vchlnP81KsisphXuzkB//fd7CjTJ8CGmofi0VQt6lNfv7WzJxvvn
JHWOkLJAir2M1zaZgSmEzRnEPxS87fxgVeBXFB77mTa+cYyEkv23DZYtOuG8
7dE6wZEWGKucTQyzscChS2cxOT0E+Wif+ftjc2Gfy642Z4cWDLzeaPFmRysG
8py29t74Eo44VOUVP+8BawrjmrY1CXi15/7YzWVi8wWf3NavNPAflVSvWWFg
/nfx1bYXFaBGY9hvTKCCVZLB6c+MZ8DCtUul+7c50mrzKWbvyvD9KMMjF9bq
7akYff+0BxztEk830clgkfxhInt3N+S9cxTn1CrD0EjDlKV3iBH5X5kDX6Lh
/lDgM1E7OjRG1aqEVVHwos7Y8//ek3Fg3M9rnIeIQh3SEizMTDxj38nlMdOD
rbG3Gad53EHCw0uJZEMAxxHLayr9A9CjvY314J4GtGorfz3b/QIucYWF5yEJ
Y00LbU1GWjBMaLKEzyIKyvUia09+KkW30TvuTscbIDt76utgZCs+un70nV9D
HA7Df+X2GdVIKjQ6qfOiC6XsRqyVFqswkLxYc2ehEwv61j9/IFKD5/rGLkSY
1uLtrqHU76cosKPTr4jvOg2T5UzHGy6VYX3gAbOK0m4cpYaZ6clXYvAoy0Rx
49pd22OaU96fgLLtW3/d/XsXd2ua1R2MJuLs0ZCvUcojELTZ8TClg4nKI/fE
/7OiYPWQ5oHQLa3o/XXmj7oGws4bKs66G2g4YRtk2OZMh4ySShAYNYA/w7OC
fB978MrUEQGqIBUl2qImE16m4Ef+5X/3HtBxj8zL17HyvZjBY17l2GaC28cs
jgZ6+kOGf2e7OTkQZthbXJ7ytiONSmHtmkN0sy9QfSeTh/VFYvYE3XxI/k0U
2+3fAve4bVWXqgugtb7qkbRZHa7OljnAiVzU2rOQ6vyagTF6wkaURTIyE4bN
LbTIMDHIx1Z2lwTvN+WZLW4jg3tKvoOrKwOvDDKH/H4izM2uN99M6oOJP9P2
ywfrgIVmGfQn6ySU85B+Lh6i4JNTQu2W0WTgpFrIzPLUYNahDZEhJSS8Jd/I
sFKug6/0stl04wJUi2I9tFe8BEfO3zc2QSZ6Syr5ze0rgrEU7r39W16hzo0t
jb7dqXB10sAhU4UM4VV/vMt4q+FYbrSIKZUE0u+2cZJzWzHXlKIeGkqEAvUO
M9GBXpSt7X+jdqkHt9lFT1LZqlFsMIU1naMFiDaUCOEX5RChV5tq8S8MjS08
DhQUlgOnnkCNbHEuyNdGiDz74oEu2pSHB3+HoH9Udad1dD36UOK9HIXJICWZ
WuhhWgkWG4NjrJVI4Mby+1GOZhNsNSCfWF7NgccE+zbV4A54y/5N/mBFG7qS
PYK04uqRg5nxYGdhJcYyUn4rEIswodJF6uNOGir/Ocs9rM2EXlo+JTWrFkWC
FQ8EZ3VDabTeAx0bKpZxvqZ4F15FS83osNfSdEw7flz0xsM2UEsuEOd/1Q5m
cdX/FC9UYtsnZc8+ciXw8Rpx/0t4Ce43bpq5HhkEh+7SY+93doJWceTPv0QG
uO3X4tT+ng0WDrm1d61y0Mt4lXbjRwuEWxyZTDJ4DM395kaq65nQvvV23duX
negrZbXDiKccMxYmtvo33oQJ4/+UjguWo4vdc46nPTRIbhMzvHv9JYyzp7NJ
K2SBZv/c5RkzIkh0fS6cOlOJnJ5xjlteDYHGLnd64HYSVLiSdQ39XMHFszOZ
9KICCYaRsT9laXjGrK/DuTIIfH12hadsvAebD1UYvqk/D9rBIpJMnwrUk/Mv
FhKioGtx5t7ymG7Y5B/o03SlHTy1ciaOlPnixI5eDkOTCpghSikmsVGQezPP
Ckg2ohq3frR/bgmoGs09WVoiowtRNSS/LwtgMHSdb18xXhnSd3V61QHLf7NC
Cjxa0Js0mXmZNQ9/1i3LnNeuwhkhwzijoHac6D/+ZWEwAx77Xuj9YlyPK4HM
i6U1OSgwW/1ucLEVhX8qiS1LE1EcXyolFpPBKUCzP2ZvDyT0H2TVbCeimf1K
0Nm1f/DFRa8nSsgfGNrRXjW+rWAldTctb2sUWCzv7njyqAyLXWojm45S8Kpa
1mrycgTW71KvFcqmQM+yx9C/Oxkgt+GnY1d5CA6d+/cxJ6obCZ85J6IvdgLh
63c5bcl6zB85Evee8BQyNZ/ekN4UCfztt3osGdWQYPPXQiaNBmVmacZ1JCJm
N9kzuKTa8ZWPqZxsfBzkbqpq4bpegBq3VW+43xhAGzXbjU84qvD0JbnJ8aIa
5E1jJqqto8JMpZ8PaS+iqLdu6IvSQmA/t41Vv9sff20IYirzPobAHsva3ZHl
oCl8ZGWDYSnOHAhT8ngRiSSxAFeFsXJYdTUW6pGvxc9loh+bAnKxoueLQHjm
e+RqMlDeercewtumgwpEeyCJytf4e0Mx/mL6SL/50AxyPzdub5ygYsH2W03l
mi2wI2yz5/6LzljpNB6g9pmOK5IEuy1L7fD00OGM6wJZ4DK82/Eqdz9Waf2e
puXWQrDkr2/hXAhPp9y+CQTQsbGLmmhxrg28CZ/mB+SZeK+eucmerwLHV+7U
GQEJ5z3DdicpVAFRmMOdQ6Qew1peTsjYtoKJvcuXZ2v/CzkmL8XLlIC+/QVW
I0UaCBE+HlZ9QUa34aETxWcpkGbPvspxs3WN54Za2bRJ4H1nb36icCPaGW0t
5xJpATYTFYUvqiTkIgUsWeyno2p4kVncQzKcMNFs1LBuQvkGL//IB2WYVew4
cE+mH2fmL/t0/ciCeTl2STuDBnDsOxgV0MQEnVaLxoLLdPRPiAivHWZC4K8r
YiW7S1G2sZLtLR8ZncYaJZOC0jE/mJLh6E9G3U1BTWp/EcJ10kNztGlwO/as
Ve9xChbdfpNteqUMzG8Fepx/3I7CCf85sLgQ0OWd9zTtQDvGTC76SIpVIeOn
/qFgl2FwMz4hVG0bCzMrXFZbrhAxlvjpXHwqFe67PN/+n7crpBYdmaKHNUD9
zd3WNomduHeL/tzud6E4bOu6lHK5HRghJaXX53NgYkl/4fDTUphovRVEvVcD
FtTvcmmuPfgh9rLQBdF2PEUi7T1X0IRTKc1GuJqDzvbfNcw/VyKvfuKOB1X1
GLN4cJM0nQoxrx615KsOY/nt1MM36WtzE5nOr2J/hOtt33R0ajdgXKP/tY+z
bdCbkuGxXomBJ1S8P/U/oOJfHY8R6WskZJEXe662uxdVN95WVhYnYLuloHLK
k24si71f/c7PF4j5Na9ujYWDeJdsk9+bDFS5oHFNkUGBr17PiScNaZDhzf2t
j2gPt+RSC7a6dcDrmzF6NzUZqLQSImW+rRp99x9PuLBIw9M7Fw7xUpIg6IR/
ubDeGnetGMZlrvGm5jWdmAvuifDo+db4ty9ccaXsJqP2ag9ulmVLlllXhjZ9
/W4KZTScfxXh+fZcHLKwxk9onFABX9zRdG37INQDOJllV+BKs0rtuewqyGVX
PnuGOxH53A4rB78nwhm7KJr9EgmLHD8Ls1d3gYCMyF+XORoEP/4cl70UBF0T
QVcXI3Ixv160SOp8INxazuUd8mPC5nA4meEZD8fvfN016FKKC89pfBf5nwBN
VagmoY8JN5YLkgq/t8FfrZ2V01uyofTczK8LVAL6WBZfDuzvxReSfO/W4wBc
rbwSub66Fg9N7fn062wNLDqND30wSYTTJq+DCBtiMXY2wVjwORMXW6vnOqTI
4OnX3BOMXaBbtE0h6lgTspyw+DhqjrhvR8n9TUfzMbDldZTLcimaNowafBx8
jmWrIs/2LTbDBukzgt6Gb3G/P4c9yaQZfxu4KHEOZAPx3aekx1GlyGEUJB5J
bUenfKEK78MtsGjTtUsvOh/2hZTkKG8pRhQR4/uxWoMsxy9mJ17zRo3eZN6a
5hr84jTsNvMrG5vWX4nj1mmCmb5N/8WKtyO3+a7ZU7zhsJ7Rnis4VYsBihM9
tRI9uD9UeYMOlYhTlJzoF0/LsSyCrcv5MR02r7JcECjJAOZpQZEduWU4xv/V
Il83AFjziOEO1v34pDeCu/o+EzwE97eaNDPgtEDaE+uWKDD4ZHq6ndoO9f1i
htuGc5H3ptIld74MlH/Prt2jQAeJ/e6C05toKOP6PUOzqGptbz/263NmQtPm
OuX3oSR4tnXcw2KViq0KsvfszdrAdwunQNBvXfyWfJJg968Xx5KqFXz7UyHx
QaSs4utK1OKXlalgtuNH/YHGrIFqTFc+1b74PQrLwqSUS8sfomc4b7HFhwro
Wr3b5ZPWDl7BUpcYwTTQO9JCzQotBSuo0GHmHQVySZt8s9ggEm8//YSPUiB/
sPQBW6cHEKcDLERGiHBj9BznlhAqpj0IvCZg3oJco38oJZ/JEHDYUu22JB2i
Y66nptM7IenRZGBjJhV9qUt1wRGWuHjkRZJuRjEqa7uMiJgSQHT8/m4G0xkO
ubzRjHpdh3zpWr3D31uQM0lCT1cpHlVPeUWU9+QA5Y2uVdZkC/gq3BwTDrqO
O9i1vtnc78IIk1A9SlopBI87DDmu9ctAKOPcOaYLhBJbj4/w0UBV5pe4DWEY
UnMo3R7qTSBJkReb7aHAioJZIT+hA5s3DifpHymCU3+84ElnH5YtrbCVj8VD
iq2XUbpiAijmt+feIrqgQ+yr2u8tDDi8VfUio5sOaqdy9Pd6kIClRMJTn/sU
OH16cH3haSYQCL8KYF8rXjs4NnyY2Qa8p5M+qgwT0Ltd8uSsVjVeTmfnFnmW
h3+jqWFsa30LkVVd+ehRDd8IpENqN9Mgxf180UbRDpReSJAeLyTjI7+KTIXM
Shy3TRMKrCBg3OfRPx3KdHzbK0swZWNC7MlBltufWvHMgVivjq5aMH27ru76
n0JUC6XFaOx/jOcOXFbv/FsLXEnHCIT8OiQ3GOh/yaLjhVMaEQb+a1xxtuR5
Bj+iKmVx0uktExb862fOj7WB/I5Wy06dNX+lzssqbWpBTckChT4nMtQTj82O
zRNxXCf8i8wqDVjMKslBJA+Yih6ODv/aAeYsIZtPh3ThRM9jjcZ9KcDjKLjA
5UaG7KM/ZHObENLevul/xk2H/bXjtKPhDNg8ktZkqk8B0Z4ojb8vm1C0JCjc
sSgeTlR1fNdIJGJvKJWZZdaEvhslDgmu68L2COUbxfAS+W+DkPWFV8AQFF1q
tnuKzdaBS+9b0+D4S+OZ5jXuCjkSe4f1NAWWvNi//IoiIovYjwLVdT3gackZ
fVWgAwI2f5qSfFeI3g+sqftsqiGtlvefjflTCFQJ1n+hQkY7LnIp6xoffl6v
ZdZ2vQGE+4jsEa/8IdL6yrU0vwaIgaK0jMoYnLj7yd7CKg/4ai5k7j3EwPcr
3t+7tjdCsOkmWTWHQDw4b040v7vmzdlStKa6bLSqy4gAu2rcV7eYtTWUgdtE
qzNHiS/xdYCH11AbGX46vYl+v3a/eQ4J5h+crcCKUetuZKGilnGrsPKXOpCY
TNXzFKLCAln5qeb1bjzhZ79fbh8ZtbrPrTbrRuLVaG88V9iAq+7OO4auvERT
W3WbpMk6uJDplMUzQUbiP8rZy15UuPUwSXYoj4Q3fMI6WIVj8eLHtIpPJRWg
QUx+95olF3hJfyw839KgOerR08bUSLhlkZb+MKUG7/7SnmMrb8PWcamx/9bH
QuyBlGZp0SycZneOif/eh6F1sknx0rlIc1MYTtFoRwe8yZ64pQTjP+/m4PlK
RFxePM89UA3h7I7zYZwUrLjlIfyHUYTHU5d03ILL8d/N969SQtJhaiVg0Jyj
Ff07l/yOcTWg167WKZm4VpzceKlE/CYJz7izVNgwSqFm3+vYP92jELFo89WQ
nonbtfhFVJTKwHCC38RSnQjtngHzQsJ0lNr22uGEZwuMCZX3vfV8CMI9/D8X
OnowcDJAmcW/GokyaQbRAi/RoiR/LNmbiQtlW7uEE3vxs2hA2kezMuh31xMj
vM/CjMaPBQ4vbXDY6v7KB4cKPKp4OD4hrhYVf+dkzpVVwpZTBe5zuST84iMv
7ypaDTxOqjdYZ3JwhH2dkexMKYwQlLrW/YvDGP2EAvu7ReAtdyrt4hQFK72G
hwlPqBDcb2esL04C/X0Dq9cOU+B6ZEZ0vEQr7rvl19U9T4Mmw7OlRnf6wIH/
K701sgKsuq/d9c4NAUZbKomdsxMzJgYYj5nPMNSeLposSkSBQl8Hx9pKPPSD
I9GWvxxUOXZ42a8rh4nGQ/TZIxE4xCG3LGqVCUaeV+uELkfBraJRxc/OryH0
lcEGns5ysIi1tyB7MXGsdM8fVvEGaDJK1E30WfNpw+7Agzpr3lUldGDX+lr4
dS/PqOtPP/6u4k1wrunBeeEX57jk4jDvx8Dwum4SCJvd846USQBni5gPJesq
oL9DTP7b+gK4ffhty9+RV7DLT0nJPTEL/Y/xHE+QeQClG2KUTtTkYdSWDTYn
a+nI59dFDlnL4/bVCPP4t2Lq3dqyg6wELNXcWr/MfAXyxz0nIvWrkMw0+cv9
pB0Lm217yVHN6GvCPvLvAwG5iR4D/Xq56B3Rnp55kYTmLzaGfJDpgUYb0dTc
qA5s0UkW5bzRA23cqY6FSURsMfZfHp1vBmL/7cK9B56Dx3n5yZ5xBlTXcZ64
s64A4mJ8l1eV6Mh5Xuxt2aQG5FzO12Exa0XxXVNC7YUtqEE92lGtU4+yih8u
BvrUou/cQknsjpdo4GMTSsxswrOjKscqcltBIX2QVX0pEL4tNg9Oc3TDL7s8
Gz7pbgwIT6x+U0BAZkpfRcHJ+8iRJDM0pUVALUHb9EjHThDiS27Xry4HKfJL
9QSV58i5bVzeZbYMMub/cyPy0nFs/nrn4/Zu2JZyfuZsHA1oI5b3/L1SMWz7
QYfvQnWgJtv3gAUvoVzmCWtDLIX73YGJtXrRqCT+wFvCLh8c/zqXldUSsdWK
pHW+g4qrkXbP+3w7QcHmrSvfcicEzy7/x+qTA/nFC+QjnlHQdlVFkWFKxm3z
uldmsyvR1Ggr50WpWDj9SDp5XRQJo66Wqv/f5+QGkzY6v0/EkzZ9L5+vdIFp
3cDJKfVmSDnYnPdoVwGodbD+5N/ZhavZ6dWWIZGwrKtoc5xzzT+3sSZvevwc
VIeyopniLXiF03zJobgcu3xdbhhSCuGnr8+VMxoUOCG+/nSpKxOe3NUpcz1F
RQ7ndBWzETL2/5b55deciT488b4xzBYwfpio0BYYhgSd3KSjqVmodrEzbcsv
CjrvtxYLErXGw09uTCVdJ0D39Bx1Z2gONnA/Nehf85bN1k08x0Yr8DUM3T01
2AJkO1mKgVY7eJRm/Vi4GIiDZlk8XLsGQVT7qKnlhkfItf+28DfdHHjfuzKs
YlAJna1P+d3kOjBkZ4yo0IQjNNLc1LddL8fZ2/NDz9c4UkjX+PSTb0TU6h0i
EtoI2CvBevnwYTo8rTg/YJOw5mujHg1PIB/SRXdqq14sQ/GbbMbbqhC7w6Lm
9gnkotnf6W1/SEVIaWBXaqOSwCR4IWTPUR+YzTxu+kR3EE5K6PhqPmkAGN0f
l3KHipba3xZMZNuxU7MNGzvKwb7wbWX2Rzr8D0P22HQ=
                   "], "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJxFT68TgjAYxUrWqmfDP0JfxAqZ5J0axWonk7VqJpOxauZOBbZhw4pZvrHN
d7e97fv13jdd7fz1wLIspzv5OZzb+RMLm14PTKLGS8cFLhQ+M2w3BIFZEGet
8wbdQSwwSlx+GApYEgyfritqOK6UzgrcbwSGL33bP/fzSlOv41I2qiHHJjVO
RwIHVXlpqfSZ4pfS4VhSucuVf2HiWl/nexLY01ohN3tpv74UYpDjg0r5qEy/
Zu1H6/0ANwCojg==
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGDQAOIp/cp91bvu2/9fI5tmVHXfvvL9PeeD9+7bL+sMnV34
874969etFwIW37e/dK+By+XZPXupkL3ZZdPu28P0MYDBA3u9nYsOnD1y337r
QtbVz1/ft9/fk/76wNf79s4/+HbafkTQMHGYeph4wbQ7jd7m9+291QrWJKjc
t1+64+ST99cQ7njackJ5+n+Evi/6a+d6nrtvv3pmRfi+p/ft193dbRK0HiEO
swcmj+4/mL9g7mX9Jdwe8w9Bw+yD6YfRMPfA7AMAgAG4Nw==
                    "], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 21, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0252896, "MaxTrainingMemory" -> 269728, 
                  "DataMemory" -> 65656, "FunctionMemory" -> 33024, 
                  "LanguageVersion" -> {11.3, 0}, "Date" -> 
                  DateObject[{
                    2019, 4, 25, 14, 59, 5.2743047`8.474740191178084}, 
                    "Instant", "Gregorian", -5.], "ProcessorCount" -> 10, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 40, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
             "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
             960087714286809251]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> CompressedData["
1:eJxFT68TgjAYxUrWqmfDP0JfxAqZ5J0axWonk7VqJpOxauZOBbZhw4pZvrHN
d7e97fv13jdd7fz1wLIspzv5OZzb+RMLm14PTKLGS8cFLhQ+M2w3BIFZEGet
8wbdQSwwSlx+GApYEgyfritqOK6UzgrcbwSGL33bP/fzSlOv41I2qiHHJjVO
RwIHVXlpqfSZ4pfS4VhSucuVf2HiWl/nexLY01ohN3tpv74UYpDjg0r5qEy/
Zu1H6/0ANwCojg==
              "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGDQAOIp/cp91bvu2/9fI5tmVHXfvvL9PeeD9+7bL+sMnV34
874969etFwIW37e/dK+By+XZPXupkL3ZZdPu28P0MYDBA3u9nYsOnD1y337r
QtbVz1/ft9/fk/76wNf79s4/+HbafkTQMHGYeph4wbQ7jd7m9+291QrWJKjc
t1+64+ST99cQ7njackJ5+n+Evi/6a+d6nrtvv3pmRfi+p/ft193dbRK0HiEO
swcmj+4/mL9g7mX9Jdwe8w9Bw+yD6YfRMPfA7AMAgAG4Nw==
              "], "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 4914531264980071485]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 2242178343964704499]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 8,
                 9 -> 9, 10 -> 10]}, "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 2182274502795179204, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 3987113361074832291]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 10], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[
       1 -> 0.1, 2 -> 0.1, 3 -> 0.1, 4 -> 0.1, 5 -> 0.1, 6 -> 0.1, 7 -> 0.1, 
        8 -> 0.1, 9 -> 0.1, 10 -> 0.1]], "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {10, 11}, 0., {
      1, {{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {{2}, {3}, {4}, {5}, {6}, {7}, {
        8}, {9}, {10}, {11}}}, {1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["LogProbabilitiesFunction" -> LinearLayer[
        Association[
        "Type" -> "Linear", "Arrays" -> 
         Association["Weights" -> CompressedData["
1:eJwViXlUzWkch1sU2W5Th0QioVQknEq/7+dO2SKhXWVKZW2ZSpYs01RSqVGW
FrmFMGXUkdxuNPe+7y3ZriGUNVptR0aGQkgZ/niec57zmIREeazVUFNT2zjo
uzyCY51iYoK3eWr/iDXBETNnRPyYOt8x/05pvg02FZjQI5EvOiVO7PPxe6Qc
NgIZu0/I3VyM4Z+byG94PiLzl4lckqOFxWszedOE+czObRl/mdRHPSUpWFRm
xYqMpRT5KJ/6nxC/r+2HVR46SvbBE31BjmxqM9Cw/xbt+jIPeTa7ISsqZkNX
6fOoO4ZolNxkqrH3aPScKK7gFUxm78yduw2RbrCXa6U2YJpTKZW8fgC/1aup
/soosnzhjgjJBHjLzwvTNbxwx1mD6zgGwvOxKT/7di1zkAfxVtNuoalJg/ks
TkOGvJCt62/E1q5l9Iv5eTTbj0PYgtEsuiGe35AXUmrAOEHqMwS2U92w2ksb
d/sN0bNgDPYs6mFW1q7oP0vMVt0PpeFSuUaKlFJyTWC5QpP3dZ7mxnFlsPaa
h6QqNcr8Nk9hqesAHsyoSHQdX6X7MTLkIG0L/ZnZ/nEaoV2ZtKdSzk5U7qHZ
tZl06HygYk7lQtT4TsOudCk5FYymv7driotyGM14NIG3uh5l8fL7gntHCDoW
ZuGkRgKcUiSIwU4s+nSTWhvUsaS8BR73L9E7+wAaJXihWmVA7GkSrXpozHs/
LiWxawayRcY43VBMXUs0+SH+zEFvkwrbPu3G+CdWLPSWjDwkWly2bwc2P/Dn
LqvWsuexE9GeX8Uu+0/hl9uCKOWLPlWrh8JBocdmDF0O/StpKJzYQd4JjLcW
2LCMg9H0ynoOEqI9FOmpumhOrkZcqJIcT75hHW0ivP2oEmzaT0BT6sPt+oPZ
mf9+xa7uZpZuEcl7epYjvjZGsXXSAAxxuEcF62xQHHwWU5NjYVs2i+3r0keU
tVxoSBoJ2y3ZgoOmM9zeRqPi2BoaEFfMlzVaQmDGrPzZPH7YqkUwaV+IyGNP
sfJuObbE9zP5kS9k5eDAlgoJSDpjx5OcxdSi9Qq1K/KoUizmAVfqkB0qYpKv
MYgKSxKaLmYo8szW4XO+GAXu13mVRhG8GyMRubOX8k0MWe/KTs6a9bjeGCXW
129XhFl/oNvC79yxYgaYaj6XLdzIvdMGKNLy7Oj5YF0u92ql1JJZ3EkmQnP4
MH6w8hqZN2fReHURVGa+fG+UhEZXXVKI+0fimmk121KjYK6nD1JpjTViw2vZ
4+sn0BZ5lp37dxKkjvbc8nYYn74gm3QG/0QS5WKuak5HgIcE1cuT8E7Hgrul
S5lyaBgMv9oi+1AiZNYD0WShrRyunE0XWAB3tchFXbwPdW+YhAPRftw7Xi5k
DhpLhRHOCHDRRetjH1wMfcouq/ZTE45y3YB6rF+2nfnWeSKj5DAzuqUvtBhd
w8NpOTCrP0U7RhzDF81qHn2zSogum8sjypfjqlgTJzsm4rV5Jo+LSMG131rY
i+OdKB40n0dNKGMfC9vkwthwkEEN3m8xgZb2fBZi08YaW9bZJyR+Et6xWUxR
UMjihqop62NNeZ5oDLOsSMCeyunUcSODRMedEH0kh1sMn8lTQmMpcNZkGB3v
wofeC6wvWUY1T5Kpz+cou90QyUzTawTruS6sVteYGV3y5eEFxN0rZsKA/lFc
DMrlRxoXwH6JPo7Un6P3YnvIDpjxKQ83QJVZipvqWTB4vgO9ls+YYa4enuz2
5p2JIyiuK4tOFRmxNTfSmP+KVAzXyxZGjbETBqgZ8hLzpXi9dINQ3j0Zh9UT
2JK/9qGnfTKuLo5DU1syOUV8E3IGXsSLc1fow+MqvqJuG4XEPaM38vXY/GcB
FU6cSbV1J2nKgxAhsL2K7x12F/8D4xO11g==
            "], "Biases" -> 
           RawArray["Real32",{0.0026910570450127125`, 0.007338154129683971, 
             0.0014397852355614305`, 0.005104429088532925, 
             0.0025541118811815977`, 0.0048043811693787575`, 
             0.0010018801549449563`, 0.0026062640827149153`, 
             0.007583932485431433}]], "Parameters" -> 
         Association[
          "OutputDimensions" -> {9}, "$OutputSize" -> 9, "$InputSize" -> 40, 
           "$InputDimensions" -> {40}], "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{9}, NeuralNetworks`RealT]]], 
        Association["Version" -> "11.3.5"]], "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Weight" -> 1, "Type" -> "NumericalVector"], 
         "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Method" -> "LogisticRegression", "Options" -> 
      Association[
       "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 100., "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association["Value" -> "LBFGS", "Options" -> Association[]], 
        MaxIterations -> 
        Association["Value" -> 30, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[2.276972895807974, 0.04350290723161821], "Accuracy" -> 
         PlusMinus[0.17129990872899947`, 0.036944312284112456`], 
         "EvaluationTime" -> 8.324375*^-6, "TestSize" -> 120, "TrainingSize" -> 
         160, "TrainingTime" -> 0.023669049999999997`, "TrainingMemory" -> 
         352872., "ModelMemory" -> 10880., "ExperimentCount" -> 3, 
         "ModelUtility" -> 0.1889785593886245, "MeanCrossEntropyHistory" -> {
           PlusMinus[2.3302824187139253`, 0.060732549573805604`], 
           PlusMinus[2.2439537215219425`, 0.06022748612056996], 
           PlusMinus[2.259018614287925, 0.057928915185240744`]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.19756097560975608`, 0.06268398001971595], 
           PlusMinus[0.17317073170731712`, 0.059501515508342324`], 
           PlusMinus[0.14878048780487804`, 0.05587987663618822]}, 
         "Configuration" -> {
          "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           100., "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 200], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 3], 
          TypeSystem`Vector[TypeSystem`AnyType, 3], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 150199468978366]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.0001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[6.419021503570862, 0.39248551242820856`], "Accuracy" -> 
              PlusMinus[0.08172828133079608, 0.027834509180593034`], 
              "EvaluationTime" -> 0.000014848167539267017`, "TestSize" -> 191,
               "TrainingSize" -> 9, "TrainingTime" -> 0.0673718, 
              "TrainingMemory" -> 296808, "ModelMemory" -> 10880, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.06647819026539938, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[6.419021503570862, 0.27752916735546324`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.08172828133079608, 0.019681970192596546`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[17.641606609735177`, 1.5503161785010764`], "Accuracy" -> 
              PlusMinus[0.16051375590544933`, 0.04088519395062267], 
              "EvaluationTime" -> 5.793750000000001*^-6, "TestSize" -> 160, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.0290847, 
              "TrainingMemory" -> 250968, "ModelMemory" -> 10880, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.024061454214367842`,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[17.641606609735177`, 1.096239082801325]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.16051375590544933`, 0.0289101978926125]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[15.352224646695301`, 3.50441860344973], "Accuracy" -> 
              PlusMinus[0.20522326340857924`, 0.03759706855781606], 
              "EvaluationTime" -> 0.00001061375, "TestSize" -> 120, 
              "TrainingSize" -> 160, "TrainingTime" -> 0.0263012, 
              "TrainingMemory" -> 352884., "ModelMemory" -> 10880., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.026907142846739562`,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[23.0287142863682, 3.733874931194133], 
                PlusMinus[15.67527203070459, 2.534281612659095], 
                PlusMinus[12.355949324993205`, 2.232991471046957]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.2219512195121951, 0.06549132479071983], 
                PlusMinus[0.19756097560975608`, 0.06268398001971595], 
                PlusMinus[0.19756097560975608`, 0.06268398001971595]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00001061375, "MeanCrossEntropy" -> 
             PlusMinus[15.352224646695301`, 3.50441860344973], "ModelMemory" -> 
             10880., "TrainingMemory" -> 352884., "TrainingTime" -> 
             0.1002483], "Index" -> 1], 
         Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[16.443853118970054`, 1.3238401789833496`], "Accuracy" -> 
              PlusMinus[0.10269722612624507`, 0.030885496920743466`], 
              "EvaluationTime" -> 0.000045681675392670154`, "TestSize" -> 191,
               "TrainingSize" -> 9, "TrainingTime" -> 0.01544, 
              "TrainingMemory" -> 102920, "ModelMemory" -> 45168, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.02585149485322022, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[16.443853118970054`, 0.9360963677663393]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.10269722612624507`, 0.021839344312973935`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[10.23715369703023, 1.175813777896056], "Accuracy" -> 
              PlusMinus[0.12970297029702968`, 0.047358833659985375`], 
              "EvaluationTime" -> 0.000016055, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.0076775, 
              "TrainingMemory" -> 121816, "ModelMemory" -> 43120, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.04124616308954835, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[10.23715369703023, 0.8314258957628743]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.12970297029702968`, 0.03348775243006138]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[4.6647754287326375`, 0.3529070408248888], "Accuracy" -> 
              PlusMinus[0.13432260390769837`, 0.03752994652899074], 
              "EvaluationTime" -> 0.000035265625000000005`, "TestSize" -> 120,
               "TrainingSize" -> 160, "TrainingTime" -> 0.010433025, 
              "TrainingMemory" -> 329782., "ModelMemory" -> 47216., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.09121652864141634, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[4.876087361566284, 0.4701583476863903], 
                PlusMinus[4.328546880593198, 0.5794959871667186], 
                PlusMinus[4.682094735361415, 0.6184708732076882]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.1, 0.0469016518714865], 
                PlusMinus[0.17317073170731712`, 0.059501515508342324`], 
                PlusMinus[0.14878048780487804`, 0.05587987663618822]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000035265625000000005`, "MeanCrossEntropy" -> 
             PlusMinus[4.6647754287326375`, 0.3529070408248888], 
             "ModelMemory" -> 47216., "TrainingMemory" -> 329782., 
             "TrainingTime" -> 0.02848128125], "Index" -> 2], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.3914400735721664`, 0.022427292309055307`], 
              "Accuracy" -> 
              PlusMinus[0.09395535660043769, 0.014849894737719829`], 
              "EvaluationTime" -> 0.000013435253054101222`, "TestSize" -> 382,
               "TrainingSize" -> 9, "TrainingTime" -> 0.02118553333333333, 
              "TrainingMemory" -> 464642.6666666666, "ModelMemory" -> 5616., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.18028245834703718`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.3914400735721664`, 0.03171698095077182], 
                PlusMinus[2.3914400735721664`, 0.03171698095077182]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.09395535660043769, 0.021000922537896236`], 
                PlusMinus[0.09395535660043769, 0.021000922537896236`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.3025850929940432`, 0.019706360434309025`], 
              "Accuracy" -> 
              PlusMinus[0.09999999999999999, 0.03335348323818565], 
              "EvaluationTime" -> 7.643125*^-6, "TestSize" -> 160, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.0045477, 
              "TrainingMemory" -> 95296, "ModelMemory" -> 5616, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.18727006721999404`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.3025850929940432`, 0.013934501095606188`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.09999999999999999, 0.02358447417391292]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.3025850929940472`, 0.01992885039169642], "Accuracy" -> 
              PlusMinus[0.1, 0.02345082593574325], "EvaluationTime" -> 
              9.13*^-6, "TestSize" -> 160, "TrainingSize" -> 160, 
              "TrainingTime" -> 0.00404834, "TrainingMemory" -> 170353.6, 
              "ModelMemory" -> 5616., "ExperimentCount" -> 4, "ModelUtility" -> 
              0.18726645415774867`, "MeanCrossEntropyHistory" -> {
                PlusMinus[2.3025850929940472`, 0.03985770078339284], 
                PlusMinus[2.3025850929940472`, 0.03985770078339284], 
                PlusMinus[2.3025850929940472`, 0.03985770078339284], 
                PlusMinus[2.3025850929940472`, 0.03985770078339284]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.1, 0.0469016518714865], 
                PlusMinus[0.1, 0.0469016518714865], 
                PlusMinus[0.1, 0.0469016518714865], 
                PlusMinus[0.1, 0.0469016518714865]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 9.13*^-6, "MeanCrossEntropy" -> 
             PlusMinus[2.3025850929940472`, 0.01992885039169642], 
             "ModelMemory" -> 5616., "TrainingMemory" -> 170353.6, 
             "TrainingTime" -> 0.02624595833333333], "Index" -> 3], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.3030837234123007`, 0.008579892023859484], 
              "Accuracy" -> 
              PlusMinus[0.10445998133700064`, 0.015577535511077703`], 
              "EvaluationTime" -> 0.00004936649214659685, "TestSize" -> 382, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.014110399999999999`, 
              "TrainingMemory" -> 167880., "ModelMemory" -> 87429.33333333333,
               "ExperimentCount" -> 2, "ModelUtility" -> 0.18740990836632188`,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[2.3029327425457295`, 0.01212858710628876], 
                PlusMinus[2.303234870289046, 0.012135253234719257`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.10445998133700063`, 0.02202996198811459], 
                PlusMinus[0.10445998133700063`, 0.02202996198811459]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.302585092038156, 0.023040677763034707`], "Accuracy" -> 
              PlusMinus[0.0801980198019802, 0.03819191388381348], 
              "EvaluationTime" -> 0.000042523, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.011208, 
              "TrainingMemory" -> 172816, "ModelMemory" -> 88352, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.1872154820462521, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.302585092038156, 0.016292219489375932`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.0801980198019802, 0.027005761293737163`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.3004597347343547`, 0.020014575843755864`], 
              "Accuracy" -> 
              PlusMinus[0.13311269367245634`, 0.029244880211163015`], 
              "EvaluationTime" -> 0.00009308850000000002, "TestSize" -> 160, 
              "TrainingSize" -> 160, "TrainingTime" -> 0.01044274, 
              "TrainingMemory" -> 275324.8, "ModelMemory" -> 
              97859.20000000001, "ExperimentCount" -> 4, "ModelUtility" -> 
              0.1874372539461129, "MeanCrossEntropyHistory" -> {
                PlusMinus[2.303501925860939, 0.04007462937929802], 
                PlusMinus[2.3003527106250785`, 0.03998057478414513], 
                PlusMinus[2.301168173723521, 0.03984224667472051], 
                PlusMinus[2.29685087019704, 0.03984058380037745]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.1, 0.0469016518714865], 
                PlusMinus[0.14878048780487804`, 0.05587987663618822], 
                PlusMinus[0.14878048780487804`, 0.05587987663618822], 
                PlusMinus[0.14878048780487804`, 0.05587987663618822]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00009308850000000002, "MeanCrossEntropy" -> 
             PlusMinus[2.3004597347343547`, 0.020014575843755864`], 
             "ModelMemory" -> 97859.20000000001, "TrainingMemory" -> 275324.8,
              "TrainingTime" -> 0.027163825000000003`], "Index" -> 4], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[3.1571400718214764`, 0.08323599607979312], "Accuracy" -> 
              PlusMinus[0.11440743350728351`, 0.02460044306312131], 
              "EvaluationTime" -> 9.236125654450262*^-6, "TestSize" -> 382, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.004440066666666667, 
              "TrainingMemory" -> 78994.66666666666, "ModelMemory" -> 9200., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.13609711830147708`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[3.2109645793339867`, 0.07676049797411637], 
                PlusMinus[3.0900032052331716`, 0.08572910407965587]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.09839095190381739, 0.02143351902169667], 
                PlusMinus[0.13549136193166347`, 0.024591537803643208`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.5285157867445616`, 0.10665657247775369`], 
              "Accuracy" -> 
              PlusMinus[0.06600071073562881, 0.02745418031221527], 
              "EvaluationTime" -> 0.00001344125, "TestSize" -> 160, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.0050765, 
              "TrainingMemory" -> 123984, "ModelMemory" -> 19728, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.16939963471301184`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.5285157867445616`, 0.07541758565713412]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.06600071073562881, 0.01941303707068562]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.310593375791303, 0.026256590437702832`], "Accuracy" -> 
              PlusMinus[0.05381632311265449, 0.028163159833709248`], 
              "EvaluationTime" -> 0.000018782000000000004`, "TestSize" -> 160,
               "TrainingSize" -> 160, "TrainingTime" -> 0.00974664, 
              "TrainingMemory" -> 662572.8, "ModelMemory" -> 62864., 
              "ExperimentCount" -> 4, "ModelUtility" -> 0.18651623059522554`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.3308633072021614`, 0.04900910086991028], 
                PlusMinus[2.293049800020158, 0.051536539164370995`], 
                PlusMinus[2.2947558477867966`, 0.04780429576435144], 
                PlusMinus[2.322102051637339, 0.047520505174361585`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.051219512195121955`, 0.03407189981946476], 
                PlusMinus[0.12439024390243902`, 0.05172689964003724], 
                PlusMinus[0.1, 0.0469016518714865], 
                PlusMinus[0.026829268292682926`, 0.024452626943491058`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000018782000000000004`, "MeanCrossEntropy" -> 
             PlusMinus[2.310593375791303, 0.026256590437702832`], 
             "ModelMemory" -> 62864., "TrainingMemory" -> 662572.8, 
             "TrainingTime" -> 0.016623366666666667`], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.307218606980896, 0.019406026189378707`], "Accuracy" -> 
              PlusMinus[0.07739814373055309, 0.027073005625114638`], 
              "EvaluationTime" -> 6.123560209424084*^-6, "TestSize" -> 191, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.0318163, 
              "TrainingMemory" -> 226696, "ModelMemory" -> 10880, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.1868994491848645, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.307218606980896, 0.01372213271439342]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.07739814373055309, 0.019143505864620106`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.2867064476114463`, 0.027122348570956745`], 
              "Accuracy" -> 
              PlusMinus[0.1493827983176747, 0.03971899406372326], 
              "EvaluationTime" -> 6.0712500000000005`*^-6, "TestSize" -> 160, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.0259089, 
              "TrainingMemory" -> 251272, "ModelMemory" -> 10880, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.18844616538810122`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.2867064476114463`, 0.01917839659622878]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.1493827983176747, 0.028085570044366945`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.276972895807974, 0.04350290723161821], "Accuracy" -> 
              PlusMinus[0.17129990872899947`, 0.036944312284112456`], 
              "EvaluationTime" -> 8.324375*^-6, "TestSize" -> 120, 
              "TrainingSize" -> 160, "TrainingTime" -> 0.023669049999999997`, 
              "TrainingMemory" -> 352872., "ModelMemory" -> 10880., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.1889785593886245, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.3302824187139253`, 0.060732549573805604`], 
                PlusMinus[2.2439537215219425`, 0.06022748612056996], 
                PlusMinus[2.259018614287925, 0.057928915185240744`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.19756097560975608`, 0.06268398001971595], 
                PlusMinus[0.17317073170731712`, 0.059501515508342324`], 
                PlusMinus[0.14878048780487804`, 0.05587987663618822]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 8.324375*^-6, "MeanCrossEntropy" -> 
             PlusMinus[2.276972895807974, 0.04350290723161821], "ModelMemory" -> 
             10880., "TrainingMemory" -> 352872., "TrainingTime" -> 
             0.061402612499999995`], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.302584286680291, 0.008514943912494403], "Accuracy" -> 
              PlusMinus[0.0929094271065795, 0.02093008474299528], 
              "EvaluationTime" -> 6.520244328097731*^-6, "TestSize" -> 382, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.009593899999999999, 
              "TrainingMemory" -> 109360., "ModelMemory" -> 10880., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.187452010147839, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.3025850499234513`, 0.01204195692684221], 
                PlusMinus[2.3025835234391105`, 0.012041941304213058`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.08002524598397452, 0.01941171468758707], 
                PlusMinus[0.10993133682543864`, 0.02231205799657407]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.3025819998750223`, 0.019706308658497755`], 
              "Accuracy" -> 
              PlusMinus[0.14282163158771416`, 0.0389643111727943], 
              "EvaluationTime" -> 6.49875*^-6, "TestSize" -> 160, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.0091949, 
              "TrainingMemory" -> 133144, "ModelMemory" -> 10880, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.18727029071971307`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.3025819998750223`, 0.013934464484578938`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.14282163158771416`, 0.027551928654545605`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.3025770961726004`, 0.0199287134597965], "Accuracy" -> 
              PlusMinus[0.14538741900186847`, 0.030988220088562], 
              "EvaluationTime" -> 0.000010162000000000002`, "TestSize" -> 160,
               "TrainingSize" -> 160, "TrainingTime" -> 0.00960344, 
              "TrainingMemory" -> 235051.2, "ModelMemory" -> 10880., 
              "ExperimentCount" -> 4, "ModelUtility" -> 0.18726707674835602`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.302584794341018, 0.039857691105279605`], 
                PlusMinus[2.3025743162369814`, 0.039857331089959695`], 
                PlusMinus[2.3025755132925636`, 0.03985737219062917], 
                PlusMinus[2.3025737609588424`, 0.03985731194762962]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.12439024390243902`, 0.05172689964003724], 
                PlusMinus[0.17317073170731712`, 0.059501515508342324`], 
                PlusMinus[0.12439024390243902`, 0.05172689964003724], 
                PlusMinus[0.17317073170731712`, 0.059501515508342324`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000010162000000000002`, "MeanCrossEntropy" -> 
             PlusMinus[2.3025770961726004`, 0.0199287134597965], 
             "ModelMemory" -> 10880., "TrainingMemory" -> 235051.2, 
             "TrainingTime" -> 0.021598199999999998`], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^-6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[33.55453266234022, 2.9814311656340786`], "Accuracy" -> 
              PlusMinus[0.17249326787954422`, 0.042081629156885465`], 
              "EvaluationTime" -> 7.216875*^-6, "TestSize" -> 160, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.0307757, 
              "TrainingMemory" -> 250864, "ModelMemory" -> 10880, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.012648109047247932`,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[33.55453266234022, 2.1081901948607698`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.17249326787954422`, 0.029756205340211245`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[8.487804660170818, 0.5402403353039683], "Accuracy" -> 
              PlusMinus[0.08172828133079608, 0.027834509180593034`], 
              "EvaluationTime" -> 5.567015706806283*^-6, "TestSize" -> 191, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.0323185, 
              "TrainingMemory" -> 226864, "ModelMemory" -> 10880, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.050250195746948306`,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[8.487804660170818, 0.3820076045639302]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.08172828133079608, 0.019681970192596546`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[15.488908887152816`, 3.648127700714906], "Accuracy" -> 
              PlusMinus[0.20522326340857924`, 0.03759706855781606], 
              "EvaluationTime" -> 8.788125*^-6, "TestSize" -> 120, 
              "TrainingSize" -> 160, "TrainingTime" -> 0.02892915, 
              "TrainingMemory" -> 352822., "ModelMemory" -> 10880., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.026632695000913937`,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[23.602689112331387`, 3.8333706286034266`], 
                PlusMinus[15.81560875836181, 2.5576543310116904`], 
                PlusMinus[12.442827867618895`, 2.24924747706024]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.2219512195121951, 0.06549132479071983], 
                PlusMinus[0.19756097560975608`, 0.06268398001971595], 
                PlusMinus[0.19756097560975608`, 0.06268398001971595]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 8.788125*^-6, "MeanCrossEntropy" -> 
             PlusMinus[15.488908887152816`, 3.648127700714906], "ModelMemory" -> 
             10880., "TrainingMemory" -> 352822., "TrainingTime" -> 
             0.06693713750000001], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[3.3439884870620036`, 0.22892502370163736`], 
              "Accuracy" -> 
              PlusMinus[0.16051375590544933`, 0.04088519395062267], 
              "EvaluationTime" -> 7.901875000000001*^-6, "TestSize" -> 160, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.033147, 
              "TrainingMemory" -> 251168, "ModelMemory" -> 10880, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.12742541122331402`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[3.3439884870620036`, 0.1618744366427189]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.16051375590544933`, 0.0289101978926125]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.9689818180256955`, 0.11375129144813735`], 
              "Accuracy" -> 
              PlusMinus[0.08519591431764316, 0.028343089556317855`], 
              "EvaluationTime" -> 6.064921465968587*^-6, "TestSize" -> 191, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.0312525, 
              "TrainingMemory" -> 226928, "ModelMemory" -> 10880, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.14437899882808053`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.9689818180256955`, 0.08043430955170525]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.08519591431764316, 0.020041590825049967`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.9808859149745226`, 0.39060680898478733`], 
              "Accuracy" -> 
              PlusMinus[0.18885662555609514`, 0.03646369661123465], 
              "EvaluationTime" -> 8.076874999999999*^-6, "TestSize" -> 120, 
              "TrainingSize" -> 160, "TrainingTime" -> 0.0270606, 
              "TrainingMemory" -> 352852., "ModelMemory" -> 10880., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.1412037442183172, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[3.7856771657142203`, 0.4186578988468366], 
                PlusMinus[2.6547241654893154`, 0.28496008736798994`], 
                PlusMinus[2.9215949444756255`, 0.32112945545496835`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.19756097560975608`, 0.06268398001971595], 
                PlusMinus[0.17317073170731712`, 0.059501515508342324`], 
                PlusMinus[0.19756097560975608`, 0.06268398001971595]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 8.076874999999999*^-6, "MeanCrossEntropy" -> 
             PlusMinus[2.9808859149745226`, 0.39060680898478733`], 
             "ModelMemory" -> 10880., "TrainingMemory" -> 352852., 
             "TrainingTime" -> 0.06697275], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.3025050088070067`, 0.008514871183789973], 
              "Accuracy" -> 
              PlusMinus[0.0929094271065795, 0.02093008474299528], 
              "EvaluationTime" -> 6.160383944153577*^-6, "TestSize" -> 382, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.010715133333333335`, 
              "TrainingMemory" -> 129866.66666666666`, "ModelMemory" -> 
              10880., "ExperimentCount" -> 2, "ModelUtility" -> 
              0.18745846081500298`, "MeanCrossEntropyHistory" -> {
                PlusMinus[2.3025813325025855`, 0.012042118514623076`], 
                PlusMinus[2.3024287042708735`, 0.012040606960547925`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.08002524598397452, 0.01941171468758707], 
                PlusMinus[0.10993133682543864`, 0.02231205799657407]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.3022777845036595`, 0.019702530884413497`], 
              "Accuracy" -> 
              PlusMinus[0.14282163158771416`, 0.0389643111727943], 
              "EvaluationTime" -> 5.4512500000000005`*^-6, "TestSize" -> 160, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.0097509, 
              "TrainingMemory" -> 147000, "ModelMemory" -> 10880, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.18729505526463847`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.3022777845036595`, 0.013931793194906169`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.14282163158771416`, 0.027551928654545605`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.3019056395479267`, 0.023004313802641868`], 
              "Accuracy" -> 
              PlusMinus[0.13776800776796785`, 0.03514733605723855], 
              "EvaluationTime" -> 0.00001006375, "TestSize" -> 120, 
              "TrainingSize" -> 160, "TrainingTime" -> 0.01053545, 
              "TrainingMemory" -> 255854., "ModelMemory" -> 10880., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.18727165077604838`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.3025622539125714`, 0.039862694989355484`], 
                PlusMinus[2.301518312680144, 0.03982762886499323], 
                PlusMinus[2.301637456900853, 0.039831331241204165`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.12439024390243902`, 0.05172689964003724], 
                PlusMinus[0.17317073170731712`, 0.059501515508342324`], 
                PlusMinus[0.12439024390243902`, 0.05172689964003724]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00001006375, "MeanCrossEntropy" -> 
             PlusMinus[2.3019056395479267`, 0.023004313802641868`], 
             "ModelMemory" -> 10880., "TrainingMemory" -> 255854., 
             "TrainingTime" -> 0.023884445833333337`], "Index" -> 10], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 60], "LearningRate" -> 
             Association["Value" -> 0.2], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 10], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 90], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.3025850929940432`, 0.019706360434309025`], 
              "Accuracy" -> 
              PlusMinus[0.09999999999999999, 0.03335348323818565], 
              "EvaluationTime" -> 0.0000116525, "TestSize" -> 160, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.0189283, 
              "TrainingMemory" -> 101608, "ModelMemory" -> 20248, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.1872699867207328, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.3025850929940432`, 0.013934501095606188`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.09999999999999999, 0.02358447417391292]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.3025850929940472`, 0.01992885039169642], "Accuracy" -> 
              PlusMinus[0.1, 0.02345082593574325], "EvaluationTime" -> 
              0.000020201000000000005`, "TestSize" -> 160, "TrainingSize" -> 
              160, "TrainingTime" -> 0.014907779999999999`, "TrainingMemory" -> 
              206406.40000000002`, "ModelMemory" -> 20248., "ExperimentCount" -> 
              4, "ModelUtility" -> 0.18726637233763563`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.3025850929940472`, 0.03985770078339284], 
                PlusMinus[2.3025850929940472`, 0.03985770078339284], 
                PlusMinus[2.3025850929940472`, 0.03985770078339284], 
                PlusMinus[2.3025850929940472`, 0.03985770078339284]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.1, 0.0469016518714865], 
                PlusMinus[0.1, 0.0469016518714865], 
                PlusMinus[0.1, 0.0469016518714865], 
                PlusMinus[0.1, 0.0469016518714865]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000020201000000000005`, "MeanCrossEntropy" -> 
             PlusMinus[2.3025850929940472`, 0.01992885039169642], 
             "ModelMemory" -> 20248., "TrainingMemory" -> 206406.40000000002`,
              "TrainingTime" -> 0.037563025], "Index" -> 11], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.2996883616450186`, 0.019785344623364294`], 
              "Accuracy" -> 
              PlusMinus[0.14282163158771416`, 0.0389643111727943], 
              "EvaluationTime" -> 4.6975*^-6, "TestSize" -> 160, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.0089244, 
              "TrainingMemory" -> 168064, "ModelMemory" -> 10880, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.18750423862933188`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.2996883616450186`, 0.013990351351293688`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.14282163158771416`, 0.027551928654545605`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.2965337581985548`, 0.023429736126924706`], 
              "Accuracy" -> 
              PlusMinus[0.1465002686589637, 0.034963177318174624`], 
              "EvaluationTime" -> 0.000010591875000000001`, "TestSize" -> 120,
               "TrainingSize" -> 160, "TrainingTime" -> 0.015268249999999999`,
               "TrainingMemory" -> 287012., "ModelMemory" -> 10880., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.18770188651122274`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.302925209843702, 0.04038278679918201], 
                PlusMinus[2.2927983244908816`, 0.04011512545249263], 
                PlusMinus[2.2939630848976127`, 0.04010811288058897]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.14878048780487804`, 0.05587987663618822], 
                PlusMinus[0.17317073170731712`, 0.059501515508342324`], 
                PlusMinus[0.12439024390243902`, 0.05172689964003724]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000010591875000000001`, "MeanCrossEntropy" -> 
             PlusMinus[2.2965337581985548`, 0.023429736126924706`], 
             "ModelMemory" -> 10880., "TrainingMemory" -> 287012., 
             "TrainingTime" -> 0.0280097125], "Index" -> 12], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[7.8596864025265685`, 0.6652035923979545], "Accuracy" -> 
              PlusMinus[0.17249326787954422`, 0.042081629156885465`], 
              "EvaluationTime" -> 5.35875*^-6, "TestSize" -> 160, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.0204279, 
              "TrainingMemory" -> 251152, "ModelMemory" -> 10880, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.054042040433242275`,
               "MeanCrossEntropyHistory" -> {
                PlusMinus[7.8596864025265685`, 0.47036997105424566`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.17249326787954422`, 0.029756205340211245`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[10.181619148786975`, 1.763484337195452], "Accuracy" -> 
              PlusMinus[0.20243173366816214`, 0.042308339121667614`], 
              "EvaluationTime" -> 0.000010927499999999998`, "TestSize" -> 120,
               "TrainingSize" -> 160, "TrainingTime" -> 0.035630049999999996`,
               "TrainingMemory" -> 352732., "ModelMemory" -> 10880., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.04100344808097442, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[13.577815667989027`, 2.1383164220574753`], 
                PlusMinus[10.016927960970532`, 1.581238302187318], 
                PlusMinus[8.639862231106143, 1.5092046110166084`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.24634146341463406`, 0.06797004607166096], 
                PlusMinus[0.19756097560975608`, 0.06268398001971595], 
                PlusMinus[0.17317073170731712`, 0.059501515508342324`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000010927499999999998`, "MeanCrossEntropy" -> 
             PlusMinus[10.181619148786975`, 1.763484337195452], "ModelMemory" -> 
             10880., "TrainingMemory" -> 352732., "TrainingTime" -> 
             0.06496546249999999], "Index" -> 13]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 13], 
        Association["ID" -> 150195174011070]], "MaxTrainingSize" -> 200, 
      "LastReportingTime" -> 3.7651931502728583`17.32836224909802*^9, 
      "PreprocessorEvaluationTime" -> 5.778125`2.*^-6, "PreprocessorMemory" -> 
      59760, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 9, "TimeBudgets" -> 0.64, "ElapsedTimes" -> 
          0.6324656, "ExperimentCounts" -> 15], 
         Association[
         "TrainingSizes" -> 40, "TimeBudgets" -> 0.7999999999999999, 
          "ElapsedTimes" -> 0.9601071999999999, "ExperimentCounts" -> 13], 
         Association[
         "TrainingSizes" -> 160, "TimeBudgets" -> 1., "ElapsedTimes" -> 
          0.9930243999999999, "ExperimentCounts" -> 44]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[150203763945662]], "ID" -> 
         150208058912958]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "BooleanVector", "Weight" -> 1, 
           "Values" -> {{0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1,
             1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 
            0}}, "ID" -> 6072081202834183359]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 5.3897324, "MaxTrainingMemory" -> 63737592, 
      "DataMemory" -> 100872, "FunctionMemory" -> 280488, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2019, 4, 25, 14, 59, 10.4237736`8.770599931997234}, 
        "Instant", "Gregorian", -5.], "ProcessorCount" -> 10, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.764084684982514*^9, 3.764085372511583*^9, 
  3.764777823627903*^9, 3.764779626145424*^9, 3.7647796871163263`*^9, 
  3.7647800531035843`*^9, 3.7652111504657493`*^9},
 CellLabel->"Out[47]=",ExpressionUUID->"55756e32-964c-46dd-84c1-9c8fd0e1c28d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{"c1Top", ",", " ", "TestSetTopo", ",", " ", "\"\<Accuracy\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.764084713891842*^9, 3.7640847313399067`*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"48e369a0-1bb0-4ea2-ab3d-788f7d81a61d"],

Cell[BoxData["0.2075`"], "Output",
 CellChangeTimes->{3.764084733656191*^9, 3.76408537298481*^9, 
  3.764777823883757*^9, 3.764779626486869*^9, 3.7647796874911127`*^9, 
  3.764780053524541*^9, 3.7652111509334993`*^9},
 CellLabel->"Out[48]=",ExpressionUUID->"091b3fe3-8875-43b9-979d-a8f1bebd164c"]
}, Open  ]],

Cell["0.201% is very close to random.", "Text",
 CellChangeTimes->{{3.7640847521568794`*^9, 3.7640847999443946`*^9}, {
  3.764085512291336*^9, 3.764085524041012*^9}, {3.7647803267563667`*^9, 
  3.764780336164406*^9}},ExpressionUUID->"1d32ca9d-ff59-4eb6-8290-\
a063269f2922"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Rules:", "Subsubsection",
 CellChangeTimes->{{3.7640848692094374`*^9, 
  3.7640848782332697`*^9}},ExpressionUUID->"599e589b-df2a-4276-a88a-\
8a9b0bcb7971"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"c1Rules", " ", "=", " ", 
  RowBox[{"Classify", "[", "TrainingSetRules", "]"}]}]], "Input",
 CellChangeTimes->{{3.764084884342658*^9, 3.7640848933884287`*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"c4291d81-9393-424c-910a-3dc171706a1a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "40", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox["10", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", 
                    ",", "7", ",", "8", ",", "9", ",", "10"}], "}"}], 
                    Short[#, 1]& ]], Annotation[#, 
                    Short[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 1], "Tooltip"]& ], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"BooleanVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "40", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox["10", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", 
                    ",", "7", ",", "8", ",", "9", ",", "10"}], "}"}], 
                    Short[#, 1]& ]], Annotation[#, 
                    Short[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 1], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["200", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 200, "ClassNumber" -> 10, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "BooleanVector", "Length" -> 40]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"BooleanVector"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ConformBooleanVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 8258112739109874696, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "BooleanVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 6090998123808376730, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 200, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> CompressedData["
1:eJxTTMoPSmVkYGDQAGJjMLhszwAGD+xhfBjt8bBKZJ37TXv51teBO+Se2mvG
9B/6qvHAvtCW6/rigodwPkx+SQFI4gFcHKgIKHDbngvMeGwPVtZ62150nTvQ
5Hv21SIgxgN7O7CCZ1Bz7sLFZ80EgZtQcx7DzYO5F2bfG5Cxr5/aH/6qAbT5
rj3Y+pj7UHfcgap/Yp+eBgL37MHWr7uP5o4n9mDvPrwFVwdx1y2oPU+g4XLb
PghkXeADewDOV5Gg
                    "], "Method" -> "Naive", "VectorLength" -> 40, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGDQAGJjMLhszwAGD+xhfBjt8bBKZJ37TXv51teBO+Se2mvG
9B/6qvHAvtCW6/rigodwPkx+SQFI4gFcHKgIKHDbngvMeGwPVtZ62150nTvQ
5Hv21SIgxgN7O7CCZ1Bz7sLFZ80EgZtQcx7DzYO5F2bfG5Cxr5/aH/6qAbT5
rj3Y+pj7UHfcgap/Yp+eBgL37MHWr7uP5o4n9mDvPrwFVwdx1y2oPU+g4XLb
PghkXeADewDOV5Gg
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGDQAOKrBh194iF37RnA4IE9jA+jze5tywrxvG8fxKc0wy7w
nv3TlhPK0//ft698f8/54L37cD5Mflln6OzCnwjxKf3KfdW77tv7r/hSfizr
vv36u7tNgtbft3f+wbfT9uN9+9hfWwQD/ty3T6w6tz2g/C7cXJi4V8btNzVR
9+19w7f4ThJAmAdzL8y+jDyBswt23bXfupB19fPX9+1Zfwm3x/y7b6+3c9GB
s0fu29/y89947/c9+/096a8PfEW4D+aOHXKtrwN33LOXDtmbXTbtPlzd/zWy
aUZV9+0PGr4J/zb/nj3r160XAhYjzAcAkxirlA==
                    "], "Method" -> "NaiveSampler", "VectorLength" -> 40, 
                   "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 40]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                   True, "Invertibility" -> "Perfect", "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 13]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                "Model" -> Association["Matrix" -> CompressedData["
1:eJwNlmkgFIoXxYVKiZQSUq/wRCjZ8iRXlCX+ZcmSJ0nWtCBChCjK82TNGsa+
N8Y+ljuLbZgZY1+SlkclKpXIVn8fzuff+XDPOfeg4y1zZ24uLi7ZdQmsiyJq
4xivnA/ilp0Z7iYMHCnltBcq1IGdWf8xl1gOvjNOlo4eqgHaU96RXKVuDH1e
57K3iQNC3zU3LARkgl2STZ1tKAOn/U5OvCbTseDGrJxOcA0I7rz411b+Foye
v+mha89Gj3lJ8ug0HcVOH86/GlIKihlJbiH3K5H7zobVykMduP1PbTtVlQbA
HK3bm7YMomGsOPcv3iFY2FYQs8G/GZat6t5FhI1gSkF7nEJQJXCJD8hJX4uC
TlUL567lKqjTZRkrvaaAGntHRO5fJLQzmm94oNiJafVTPsJPH6K+QLVlfnUc
jAd9jfS524m1J4b6FgYIaGSw9eb2R6Po6P6odF7gBQ54fc/JPpGAxv6X/hR6
3gd3txKUU7pq8XCtrX6ADgmvRlIbHrb0YaenSkqLCxN4deI5PZ+LYdJeerNW
Nxle81uLXq24DA5XxVaNfrnArN+bJZ4QBjjZK24bm08ELwJeUFRoBe5P7xeh
ZBhILbNTA0H9KOAjQ1j6QgCvc8d4r7a2oqyQoyNXVQwQ1F1jVDcjRE8tcg6U
dKOcZ5lCgFMh5iYtTW78kYv8Wpb/E7zYB9nuM4kJJ5Mw6miYy5cMMvQIeq/K
pDIgND3VcC0+DHlELAe9LxXhx9/aydc3DqDUcJ5DYzITR/y1DbnlGRjYuGz3
nkrFt+K3Iy7P1IL4jTkJ8RU23nQKN4x60QC28d9YpXeS4P1QntCsXhXq32ue
TW5mQmWHO2nGkAL+e84q9PJXg523QXPnbANGFYZFu12thFe14+yybjZkXp3I
/zA7hE4+mwoqeRFX93QkfP7MQtMz3uERDglQbpGUccivF4iChkl6R2wgukFs
XEAhH/0Lesl/UcnY6VT8r35JHJoKPma6ukXir3bNzxUDFDg6UKpr+boGd3P6
LrKOd4DviT8WFy0r8VNBVkKVahek7x+VqnlRAJlmpY/fadyAVe6A3/HzxTDg
LnbhfUYVcuTPPlff3IcfQ+tFT72mQuGolDbNvBL3h47wj7H6IbJQ5Ef4BAO1
X9+q7NrVgmENC3ON8hwkPvsh77adAomDofK/aXQ4E3++yn2EgdL2jEERdyLq
qI6ejPnFwp0v5wOThyiov08/UMa6GXys9pYoBT2FA6vLNt7qFBwYvdg0/pIM
z9j5DHk2B19cMbfUWe0EP4n0KlY1B6ROLaQszyTBZs+0hO7z9ajhWn/9glcE
niWaHfY93ovc82pHxW1oaP7rnP2S6iDOvf54whbbYd91Zfd0jzgMbnwl7XcM
4YjLgQ3Vuwj4Ztevg6tiBXj0RF/4tWQKPrVxyFef4WBIn8E1Yfsy4Jahir4w
oKLujFZ7uwYDb/Mvrth51IDGh1HrHgMr+KJpZxRC6kE5e1X10bh05DvYv/k5
HweiolafX5lNA6fpcrYgmQ3qLq76yXeYoGoilJOl2oZj1zePPW/tB40X4rLa
ZiWw3bTY4xyNASkiVinnX/qA6q4YSyaxBLnZyq4/RXthkYdPJdSCiPYUVrB2
byFsEApwfFDQDxWxy/npByjIzfftWOBEJ/pUNU9sUGkGjtPluQ62Nei4NRQd
tXwCHtm8YbBEB+M3htdtzehQRmvlbj7MQjVd+crQMhoSbGPPDun/C5f+u1Xs
adYOCc938X6cLQLPD/NM78pwoGQoW/Q8rwFvyTiam2QOPIlPHZFRWu8DUY5u
0SIZpNiFUV4iZAwrP80Y/cIAw67Lxo1iZIzaKbHxTkAWpMyveG99NIDttl2p
pD0U8NPdJHU9oRPkdNzk0g1rkd3LXnLeUoRDhMWw331UNBg4JJPm1AoT81oa
i/rZ2FbguJ/0tQ8+zr13c3SpRrG0IfKNvAYY5J36/KmehnK2jvLNX3pwr9gr
SbO0LKBFDo31E1lQX3HDIVgkAP25d9kF76qFsf6ps6TccrSZsd4kx1OJf4To
D5UeR1wZdL+Z+5ONJcOx6jFmCNorO84u/8NBisPMvX4bChygPrTbR+yCbIG5
ark9SrDpdF3gf9srUTPO3Mc0rhlk0xq1J7at89mq7WcjunHHrb0nat4y0MZ3
1oNroA+cpeyB9I6EvDxA8zyaA3NGzRqq4TUgXUA0INc2gdsKJk2EJeKXpMft
lM10uNqwXdzsHRt54++Pxt6twz3WCgaexh146HBBzaOnZbB0j1t9OKkVgzsn
zAMbGlHnwHhtpQgBs4WTAqrvkZBVq0KJMmjHmlc3nikqUPFIjXTGFv480J6e
ODT8io5siVu/k1IpyLY2d5ZLCoTTQhvcfvn0oY7Nz4dRXlU4cl28xnJjMdpU
5/82j2XjxgRuI6P1XElmux7k1FSAofaJx6yMZDwwumJd+rgUI4diZ0SvDKBs
2lrw8scG0BV8FKDxsA3iPndt5mtpRSlfmq2ORRfqXrRILsxC2FnF6OJVy4PW
Fy4aRr9KMdXE7NnwfQ6eUvq+GmeUD0JKfnovLtHgWs2fij2KLNif/EHbQqsS
aBlDO57pxsHgxRHG1wlEZrybu/5rCl6t9JAoPcGENK/jp3gxB8QEglzZfxWj
l9oZ08CUbjjx1WH3TeVasL1zpSdwdP3eFm777EwkQZCiittSOQVzrXZcMRGh
w3fV/8rjkklIDxCvfl0wjHrT2/6RkeyAvMnMnK59FJjmaqvLYNDhJl2NT0iT
ie/ZVZkdZ6mYY1p0L3EzCRWjmLevNyLosNq/7TjWCQ59RW9OhvmjY+pdoVBx
Mow4LOxL2VMDy0WXIxuD20B4i4TOgfX8yJQEnRrv6wAJ7Q9HX57JgX7phLyT
Io14RSbb80xoIoyJ/1RyvtqPHx7PhDkv14LL6bQ2ggwV/YwX9MYZHCjU9pXW
+IMCUbRAOYJYFyg5G5QL5eYDjceA63B9FohfElR5ALWg3Pxj4y5aPo6VvAvf
JN+PDmPbdXGahv/CtOfNXBYK15dWb00shKfHGzJuybOglnlFaID+FPUW9Hdz
vSuALh1t451pRJDljMa7Fz4C04Hehv3+Taj3xdvqj/PtuHG8McynlAQtDXES
5/NYkOBSHO7J0wk2h04oapV2gQ9Vnc/4y23c2FZ8u3srEa/g+26/jxQ4b/Lg
ld4TDsK1qPY3J9twZtMS30ECHQ708ekXebfhWbd8ghq5DaMv53Ht+7MO0mam
V34XskDT6+b4IZ4u9MxceKae2o7qf5bsDY2iQ7r4opFkTjfa3YyeMiXXo/dF
L48H7V24ULefZ1S2CUM/GtQH0WvAKVnJfSl6nd/WZq+k04Flk6OaD20rUYzj
2J9fkYD/PBl38p1pQ839R3wshCggecdPltZcglZupJny6AbMDvX0E+X5FwjL
Is/GmP1YllXsc2oDDZ/sVSv/ml2FIgI7/zNuIuGAQ5xdwDRCYoBOkuLwIB6S
2mJPK6qHBWGJGIWjJMwr/kfRoYKGO2KrI28NlKGpTeFDFUkGuNwXj3L4QUdK
jl/YvGQnbjecsLA53wI/81k/HlOK0DdjvqH04fofKtYq+sYrBiaS98lQCBx4
+lJBNlWmBpV+FLatifZAHDtzRqKrEIZLSPKjuem4spjJf4/YiZ8MSpVrbhDx
EbGQ3/46E15bFe0NO+cLR6Wa/dvlC/Gh7B7qy4Au0ErSU3FktSNfj/oW7pgO
SLl0sGdysgrKPF17UmM7QGpe2uujeTWKz4dUmByJxx5Hb+WAc22oIlLHFDiC
QIxdaloTRdh2J//Q8Qg6BK4kD178zkSjC95Mq01UPPjSk8ItngXcwVO+nCEW
MAO9xNPPP8PTwrFJN8g5+Fdue9MW0zagbB1LtTuZAiV+u5zmL3QDcZM/seFT
AjKnLodNKDVgUE5RdJdHMda3FO0WJjdjo6v6my6PXFibztzfo9WPwi0Rife/
tYExmWzhX9UKGxRGSqXuN+GQsoLb7mwS7lf436FvVrXgXJr5rG2YCOYnNSWe
19aiSaG1dIEpAuU/SW3N7jTwnuI5HqxZh+7O26hrhTQ8nLYxPIqnBx+HSXlV
mRWDraeyK1RwgBkTkDZ3tBYuelxwvl5PwpbJf3Ut5GpRAUJ9Q2yIEPuerX/l
XSm67RbYxZrvRaf08EjHORoSV6/Vc8dnwyMfVfbEzkz0CjWW91LugvcFJb4t
cilQMXucZ+O5CnT30Bqw/o2wfGz2vQmhFGVG33i23B/DJd9roaefMbDJjSFb
LZ2L177kuXm3rvfdhpjsM2IZeOu71ZYbZtXgkRHpV58Sj32GeiYJqtXQq/JG
Ub2TBmlvbcb1J1k4InttrzFfHX4g/TA6s4eJFIP8gylOBXjgaaA4rcIYdTUE
2i1+UVCjcyxi56fnmFeQFTxTUIb9nyV4VapYGFtFL+V/PgDDagWfadROyGSo
VL140gytggH3j6m1oMOM6RWCdS7SF9ZEBUZ70d/0i4zZIhmnFLjexYT2YkZh
LdndmABiEVPKascpWFF24afgZQ6sPfF0JrhQ8UMhUySHHgP3c1Oa5L4T8ci7
iakf8d0o+3M1W8uEA76THSUqka0YpffYpdOLgS/KplfyTlEgVDrzrWZQJFxK
CSrjtqDg3Qua15svMfAtVUq4N6sJnPbeqHj3c31/csusuMd7wCPQaYf7Azq8
FXWd3hXaCylac/W8E84Y3am6qVWLA/xSs9lOW5ig07LNIvPJHXT4LPZ1aawc
TThNWlvW/XZ6xJQbvsxGyd1bynsYOUAStm0dTO8Gc0L7Y8KdDjQ4liru/Lod
4zT7wqhBRODI/02TVKyDnrZPpwI0qaijRB43U44GpZPE1q+FrTCQM18w9J2F
qr00vy49Kj4isY+tYS4mr9lpr/m0gtDNzIj8ihoo0wmn1+WEAVEiUHCN8AQ4
voK0FbVqkMZqF524dX78vYIM2yw0+NYRr+vQjEwzLZPN63zRI5+eFbs3oFC8
3kXqnQpoO3eijX51EB9N9SZFs6qBL19Y8X4FGWbJzCIlXQLU8RsKnQynwV26
IXWHYTdaznGHrMZ3gY3ngYmx9FxszCLIR/0uhHMv9c/a9FXC33e+v7APpqKP
lGRwxMZWbAu+HH3lSQ92fqzbHfpPNixHOlwTDeuGbRbjnCRiHk761rsEhSI4
fB9+XFwZBe9jvV2bHIkow0dcbVDpwAfD2fUbeDl4JjE3Qt+NhKVuma7mZU3o
lFGEIaH38elkx9G/HZlw5Osp//zUYPi4qXoyzq0YQ5Rc1LTnGoCfMfmAP3UA
i/JqjU/fbkGFB82VloezMMsp0ZonsA2IObe5VBOiYDnpy8Vov0r8Nh0yYK+Y
AE0LiYWnKmuhrUK13ruGg/8HbNCIpA==
                   "], "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGDQAGJjMLhszwAGD+xhfBjt8bBKZJ37TXv51teBO+Se2mvG
9B/6qvHAvtCW6/rigodwPkx+SQFI4gFcHKgIKHDbngvMeGwPVtZ62150nTvQ
5Hv21SIgxgN7O7CCZ1Bz7sLFZ80EgZtQcx7DzYO5F2bfG5Cxr5/aH/6qAbT5
rj3Y+pj7UHfcgap/Yp+eBgL37MHWr7uP5o4n9mDvPrwFVwdx1y2oPU+g4XLb
PghkXeADewDOV5Gg
                    "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGDQAOKrBh194iF37RnA4IE9jA+jze5tywrxvG8fxKc0wy7w
nv3TlhPK0//ft698f8/54L37cD5Mflln6OzCnwjxKf3KfdW77tv7r/hSfizr
vv36u7tNgtbft3f+wbfT9uN9+9hfWwQD/ty3T6w6tz2g/C7cXJi4V8btNzVR
9+19w7f4ThJAmAdzL8y+jDyBswt23bXfupB19fPX9+1Zfwm3x/y7b6+3c9GB
s0fu29/y89947/c9+/096a8PfEW4D+aOHXKtrwN33LOXDtmbXTbtPlzd/zWy
aUZV9+0PGr4J/zb/nj3r160XAhYjzAcAkxirlA==
                    "], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 13, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.0084426, "MaxTrainingMemory" -> 250000, 
                  "DataMemory" -> 65656, "FunctionMemory" -> 30976, 
                  "LanguageVersion" -> {11.3, 0}, "Date" -> 
                  DateObject[{
                    2019, 4, 25, 14, 59, 10.9844744`8.793354242928096}, 
                    "Instant", "Gregorian", -5.], "ProcessorCount" -> 10, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 40, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
             "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
             960087714286809251]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> CompressedData["
1:eJxTTMoPSmVkYGDQAGJjMLhszwAGD+xhfBjt8bBKZJ37TXv51teBO+Se2mvG
9B/6qvHAvtCW6/rigodwPkx+SQFI4gFcHKgIKHDbngvMeGwPVtZ62150nTvQ
5Hv21SIgxgN7O7CCZ1Bz7sLFZ80EgZtQcx7DzYO5F2bfG5Cxr5/aH/6qAbT5
rj3Y+pj7UHfcgap/Yp+eBgL37MHWr7uP5o4n9mDvPrwFVwdx1y2oPU+g4XLb
PghkXeADewDOV5Gg
              "], "StandardDeviation" -> CompressedData["
1:eJxTTMoPSmVkYGDQAOKrBh194iF37RnA4IE9jA+jze5tywrxvG8fxKc0wy7w
nv3TlhPK0//ft698f8/54L37cD5Mflln6OzCnwjxKf3KfdW77tv7r/hSfizr
vv36u7tNgtbft3f+wbfT9uN9+9hfWwQD/ty3T6w6tz2g/C7cXJi4V8btNzVR
9+19w7f4ThJAmAdzL8y+jDyBswt23bXfupB19fPX9+1Zfwm3x/y7b6+3c9GB
s0fu29/y89947/c9+/096a8PfEW4D+aOHXKtrwN33LOXDtmbXTbtPlzd/zWy
aUZV9+0PGr4J/zb/nj3r160XAhYjzAcAkxirlA==
              "], "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 4914531264980071485]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 2242178343964704499]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 8,
                 9 -> 9, 10 -> 10]}, "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 2182274502795179204, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 3987113361074832291]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 10], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[
       1 -> 0.1, 2 -> 0.1, 3 -> 0.1, 4 -> 0.1, 5 -> 0.1, 6 -> 0.1, 7 -> 0.1, 
        8 -> 0.1, 9 -> 0.1, 10 -> 0.1]], "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {10, 11}, 0., {
      1, {{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {{2}, {3}, {4}, {5}, {6}, {7}, {
        8}, {9}, {10}, {11}}}, {1., 1., 1., 1., 1., 1., 1., 1., 1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["LogProbabilitiesFunction" -> LinearLayer[
        Association[
        "Type" -> "Linear", "Arrays" -> 
         Association["Weights" -> CompressedData["
1:eJwViXk01WkYgG9ki5pSiLKVNl2Fq0yu7/2SSrlFUSYGpcU24rplonKSJccy
SlIhLQpdl8mMFF3f+6MsU0KikRYtKo6UZZSSMvXH85zznMd4e4iLrwKPx9uj
+l0uPvvsJBKfCFflH7HLJ0hgGfRjqn1n/nd+iRhBv+5IriookSZ8CkEb/yrQ
uzOBy/c+Tv9K/4wztd6C6b1cZFgGN58MEMW4NiiSncTZJlbQvySADBbq0Xa5
MjdlXhFsXWhXEdrLINhdBwcyNCHsuA3L9f4GiiPGOG3TKJmRZA0qrao0grXi
Y+23EB48DYf546m7wRFcIjGxvSaLq1hnlAd6E1+xsvJbJHqwmvB4O/BC/gWu
7lMolbSlgUJArZB4C5lviANN2/kS001WQdeAX8XTWb7gLNXAV4ExMNf0CHo6
+gN8uIrOzWVwXj0a87fMot3GDXj9zBNS9ntjRZ9PIem8L8ctRjtgpo052zGx
Gf7sWY61v3EQrnIcPSbPpGOcKvey/2eQNolYSmc/CTApwGOF10koxrNwp8Xg
NJaE3p953KuOYmi0E3AGo7fAzWgObr/sxzZEWtLhF6s4l8ZAuOl9la3W8ICP
hw5gCs8IHu3rYGKWQ85uXoSW54aIYGA73hrRpn0ayzmzVRYQO0mF3PfnC0ur
xSiRZZMaoQj7X1qCRXsCuzijhQxYcbaO/H7YTYK4Kq9YiDmogOcEUeC9fDYK
hvlQvzeMQa+Qvfspg/FJM7VVN+MK7YU4vF9EZyvz6DYzMdb8o0+7unfja70e
SL+khkqDMsJfCkT/XSnY3ahFPhFgDj+CKetb0HAfM07XKRKeO5SQ9/FO4B+l
gxtLLpH2ZWuxl29FreuDUUsjhaVdWQMipaNg8aYJ37S0gkdlGrbaq1FRbx7O
Exxmu50Ie+FYDh0Jl7BTXYweqg9IrJGYGusgxDwtpvLdYVB1XoFWFCJuExpR
lcrZ7GNiK+Tee8TSS00hYZchZjY9g86SPFzin24bFSzFZKVNNE5gj92ullTa
04migUrbr1NHWUrsAsxxLWT7hufT6nF5rINfB3aTp6O/XJFWza/B0263oK6u
EoPYN9DVtMGyhmCiKD+Dp3beJWuPikl9fTL5IhPhtNTrVKSWKPfqSuWMSSa5
nTGHRgUEkpGcANpt2IUbW+5D3IQsvNdVCZ59+WTikVjIttyIg2FxoG18AJuT
zKmvOAM9sz7AshUpWCo2g8YOZWxqZ+DXrIvu1Qj2k7aR+Gsm4KhxFLU4Hbpj
yhc8P2RO+akyzGw4DxN6Oyv+7ZPAhFIH3Gz+nLwOu8peq+yBWqWtWDQaxdUk
LKCLzDW50OtS9FmvTnX+ew2zYnRpeVMR5o+uhMiYbHZIdw4cNVCiZTJLumKm
Nqf4JAfnyvZjsBnQ6SePI6c5Cvpmc9E81R1L9OrQvc0E3BI1uORKQ5prWA5j
UQPkfvsiyHJWpXdEHpyuuzV1KZDiueLLoOl7hVHfichva0TrNBXM0X5A9NsG
UdIqwafPo7mbQw5cS3IirhSm0RMGqdA+ZsI5ZZZjf7LkRuD6PiIQX8Wev+2x
d7I+1EfEQ5DjfmzQcsTW5KVwqnMurZp0CueNQ8iXOqDnxRFwXVAs7DgdJu9V
28IcS7Jh3d0bbN3Y3oqHQ9XkYNtU2hJ9CnuzY0BamYU963n02vvDbNLjw6xx
9R+2B24uBpt7n1hacBjJ50fJ3eTADX1bx118loEDd07SV1+VqO7DdwxvxFKZ
nwTGq3tRr4wLZHG9I6TMOkvchwugRqEPN3zRgSLdQ3jCdAsUVBtwaPEEus2t
mHZMD2vwzcHcrbH4ICQA/dxWgrSWx8UdyIE+02dwcHwNzHhsyfVfGIVj3ruw
LGkhkVjfRufV4RWxz9dgyIrbtqGGv2LQp5O41mIz/A/K3c7+
            "], "Biases" -> 
           RawArray["Real32",{0.3442749083042145, 
             0.016122642904520035`, -0.0664369985461235, 0.04149717837572098, 
             0.18555553257465363`, 0.15990900993347168`, 0.8306878805160522, 
             0.17380239069461823`, 0.28801944851875305`}]], "Parameters" -> 
         Association[
          "OutputDimensions" -> {9}, "$OutputSize" -> 9, "$InputSize" -> 40, 
           "$InputDimensions" -> {40}], "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{9}, NeuralNetworks`RealT]]], 
        Association["Version" -> "11.3.5"]], "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Weight" -> 1, "Type" -> "NumericalVector"], 
         "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Method" -> "LogisticRegression", "Options" -> 
      Association[
       "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 1., "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association["Value" -> "LBFGS", "Options" -> Association[]], 
        MaxIterations -> 
        Association["Value" -> 30, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.4860726142070002, 0.08480071612250493], "Accuracy" -> 
         PlusMinus[0.8329230258300167, 0.032496807113858626`], 
         "EvaluationTime" -> 8.381*^-6, "TestSize" -> 160, "TrainingSize" -> 
         160, "TrainingTime" -> 0.02538394, "TrainingMemory" -> 352803.2, 
         "ModelMemory" -> 10880., "ExperimentCount" -> 4, "ModelUtility" -> 
         0.8586783408088497, "MeanCrossEntropyHistory" -> {
           PlusMinus[0.546257617905059, 0.143355199394125], 
           PlusMinus[0.4234978798338893, 0.09289342476767895], 
           PlusMinus[0.7082926408088938, 0.2464966794021459], 
           PlusMinus[0.49248302566662755`, 0.09813725169065833]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.8073170731707313, 0.06495743734957983], 
           PlusMinus[0.8317073170731701, 0.062079244913053964`], 
           PlusMinus[0.8317073170731701, 0.062079244913053964`], 
           PlusMinus[0.8560975609756093, 0.058814776198962464`]}, 
         "Configuration" -> {
          "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           1., "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 200], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 4], 
          TypeSystem`Vector[TypeSystem`AnyType, 4], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 231241206886594]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.0001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[3.481991471275298, 0.2254892429674875], "Accuracy" -> 
              PlusMinus[0.3900892018706595, 0.028639093972689367`], 
              "EvaluationTime" -> 4.5685863874345555`*^-6, "TestSize" -> 573, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.021651524999999994`, 
              "TrainingMemory" -> 227022., "ModelMemory" -> 10880., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.12246452981423124`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[3.6666031208322583`, 0.2587945625014386], 
                PlusMinus[3.166266557740623, 0.24403909998556164`], 
                PlusMinus[3.6781520369247214`, 0.2776298053480427]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3724748119098396, 0.034910375862156895`], 
                PlusMinus[0.4310727034056677, 0.035901030450046036`], 
                PlusMinus[0.3689077850423597, 0.034945782836437525`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.51731342816877, 0.4886669984850703], "Accuracy" -> 
              PlusMinus[0.6246919084423986, 0.054549386606838106`], 
              "EvaluationTime" -> 4.230625000000001*^-6, "TestSize" -> 160, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.0233404, 
              "TrainingMemory" -> 251272, "ModelMemory" -> 10880, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.16517613784722562`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.51731342816877, 0.34553974837086954`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6246919084423986, 0.038572241179261856`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7114360100857653, 0.4660004144692231], "Accuracy" -> 
              PlusMinus[0.7925590509923386, 0.041663525374259255`], 
              "EvaluationTime" -> 8.411875*^-6, "TestSize" -> 120, 
              "TrainingSize" -> 160, "TrainingTime" -> 0.027584249999999998`, 
              "TrainingMemory" -> 352866., "ModelMemory" -> 10880., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.5368182427797104, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.151213198276598, 0.5022335129833507], 
                PlusMinus[0.5280292144645832, 0.24918392758926422`], 
                PlusMinus[1.951150917755248, 1.012094154054532]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8073170731707313, 0.06495743734957983], 
                PlusMinus[0.8073170731707313, 0.06495743734957983], 
                PlusMinus[0.7585365853658532, 0.06974012122408565]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 8.411875*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.7114360100857653, 0.4660004144692231], "ModelMemory" -> 
             10880., "TrainingMemory" -> 352866., "TrainingTime" -> 
             0.05613183749999999], "Index" -> 1], 
         Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[6.359941287226481, 0.3634162841282605], "Accuracy" -> 
              PlusMinus[0.35993366461068405`, 0.05043589732167127], 
              "EvaluationTime" -> 0.000018969240837696334`, "TestSize" -> 573,
               "TrainingSize" -> 9, "TrainingTime" -> 0.00490895, 
              "TrainingMemory" -> 74340., "ModelMemory" -> 47728., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.06714877617505678, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[6.303723314115391, 0.5702103194311845], 
                PlusMinus[6.246052408762363, 0.6219099316470071], 
                PlusMinus[6.550912055338288, 0.6392280324919577]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.27380890327514407`, 0.03218636070305307], 
                PlusMinus[0.41020407764161815`, 0.03563307961854718], 
                PlusMinus[0.41545067591128987`, 0.03570694756727955]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[5.139935562160455, 1.061964896432906], "Accuracy" -> 
              PlusMinus[0.6186920269925112, 0.054680890606263514`], 
              "EvaluationTime" -> 0.000016209375, "TestSize" -> 160, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.0053767, 
              "TrainingMemory" -> 120480, "ModelMemory" -> 43120, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.08070187050403219, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[5.139935562160455, 0.7509225796497775]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6186920269925112, 0.038665228549008716`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.297369195878364, 1.2460719533622395`], "Accuracy" -> 
              PlusMinus[0.741934743522359, 0.03866653754690978], 
              "EvaluationTime" -> 0.000038960000000000006`, "TestSize" -> 160,
               "TrainingSize" -> 160, "TrainingTime" -> 0.009484840000000001, 
              "TrainingMemory" -> 329472., "ModelMemory" -> 47216., 
              "ExperimentCount" -> 4, "ModelUtility" -> 0.27928840528537874`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.967514938293506, 0.6554386114137333], 
                PlusMinus[0.9190149312301982, 0.38181014183665524`], 
                PlusMinus[6.2266488755525655`, 3.1834624326878767`], 
                PlusMinus[1.4385351847248589`, 0.5070473128315354]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7097560975609751, 0.0734290502683425], 
                PlusMinus[0.782926829268292, 0.06749878482967674], 
                PlusMinus[0.7341463414634142, 0.07170958326211418], 
                PlusMinus[0.7341463414634142, 0.07170958326211418]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000038960000000000006`, "MeanCrossEntropy" -> 
             PlusMinus[1.297369195878364, 1.2460719533622395`], "ModelMemory" -> 
             47216., "TrainingMemory" -> 329472., "TrainingTime" -> 
             0.016765000000000002`], "Index" -> 2], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.3914400735721664`, 0.018311807489810344`], 
              "Accuracy" -> 
              PlusMinus[0.09395535660043772, 0.012124888280484872`], 
              "EvaluationTime" -> 5.04306282722513*^-6, "TestSize" -> 573, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.0029951, 
              "TrainingMemory" -> 73276., "ModelMemory" -> 5616., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.18034443738844336`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.3914400735721664`, 0.03171698095077182], 
                PlusMinus[2.3914400735721664`, 0.03171698095077182], 
                PlusMinus[2.3914400735721664`, 0.03171698095077182]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.09395535660043769, 0.021000922537896236`], 
                PlusMinus[0.09395535660043769, 0.021000922537896236`], 
                PlusMinus[0.09395535660043769, 0.021000922537896236`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.302585092994042, 0.023040677781763712`], "Accuracy" -> 
              PlusMinus[0.1, 0.042236999226909724`], "EvaluationTime" -> 
              4.993*^-6, "TestSize" -> 100, "TrainingSize" -> 40, 
              "TrainingTime" -> 0.0029157, "TrainingMemory" -> 95000, 
              "ModelMemory" -> 5616, "ExperimentCount" -> 1, "ModelUtility" -> 
              0.1872159625890661, "MeanCrossEntropyHistory" -> {
                PlusMinus[2.302585092994042, 0.01629221950261934]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.1, 0.02986606857031883]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.3025850929940472`, 0.01992885039169642], "Accuracy" -> 
              PlusMinus[0.1, 0.02345082593574325], "EvaluationTime" -> 
              9.446500000000002*^-6, "TestSize" -> 160, "TrainingSize" -> 160,
               "TrainingTime" -> 0.0034125400000000004`, "TrainingMemory" -> 
              170353.6, "ModelMemory" -> 5616., "ExperimentCount" -> 4, 
              "ModelUtility" -> 0.187266476895933, "MeanCrossEntropyHistory" -> {
                PlusMinus[2.3025850929940472`, 0.03985770078339284], 
                PlusMinus[2.3025850929940472`, 0.03985770078339284], 
                PlusMinus[2.3025850929940472`, 0.03985770078339284], 
                PlusMinus[2.3025850929940472`, 0.03985770078339284]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.1, 0.0469016518714865], 
                PlusMinus[0.1, 0.0469016518714865], 
                PlusMinus[0.1, 0.0469016518714865], 
                PlusMinus[0.1, 0.0469016518714865]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 9.446500000000002*^-6, "MeanCrossEntropy" -> 
             PlusMinus[2.3025850929940472`, 0.01992885039169642], 
             "ModelMemory" -> 5616., "TrainingMemory" -> 170353.6, 
             "TrainingTime" -> 0.0072607750000000006`], "Index" -> 3], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.2915068355792356`, 0.0097504251372521], "Accuracy" -> 
              PlusMinus[0.1762300949186687, 0.05591096514247635], 
              "EvaluationTime" -> 0.000040896091623036655`, "TestSize" -> 391,
               "TrainingSize" -> 9, "TrainingTime" -> 0.008695249999999998, 
              "TrainingMemory" -> 150244., "ModelMemory" -> 87324., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.18833680920970053`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.2926025741283294`, 0.016458439548418614`], 
                PlusMinus[2.2849611350284436`, 0.01243849011054193], 
                PlusMinus[2.3016510608246374`, 0.01628251382483535]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.15940594059405935`, 0.03651583835987447], 
                PlusMinus[0.2790405870131322, 0.0323765780616609], 
                PlusMinus[0.1, 0.02986606857031883]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.2093395552365998`, 0.022837975116183334`], 
              "Accuracy" -> 
              PlusMinus[0.5059405940594063, 0.07093074441030998], 
              "EvaluationTime" -> 0.000031721000000000003`, "TestSize" -> 100,
               "TrainingSize" -> 40, "TrainingTime" -> 0.00759, 
              "TrainingMemory" -> 172552, "ModelMemory" -> 88416, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.19510409398680467`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.2093395552365998`, 0.016148887073222866`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5059405940594063, 0.05015561036713999]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.5505067454507016`, 0.04526498281758707], "Accuracy" -> 
              PlusMinus[0.5403893168138791, 0.05334707904259677], 
              "EvaluationTime" -> 0.0000729135, "TestSize" -> 160, 
              "TrainingSize" -> 160, "TrainingTime" -> 0.0080728, 
              "TrainingMemory" -> 262830.4, "ModelMemory" -> 94972.8, 
              "ExperimentCount" -> 4, "ModelUtility" -> 0.27696422064923354`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.5401994870141176`, 0.1117694501957398], 
                PlusMinus[1.5177937087328235`, 0.0796436265807596], 
                PlusMinus[1.5651574168858933`, 0.07906074972312138], 
                PlusMinus[1.5772441760841946`, 0.08572375494114871]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4658536585365851, 0.07931838439251818], 
                PlusMinus[0.5146341463414631, 0.0796469699329705], 
                PlusMinus[0.6365853658536581, 0.07724245146820084], 
                PlusMinus[0.5390243902439021, 0.07953759224762065]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0000729135, "MeanCrossEntropy" -> 
             PlusMinus[1.5505067454507016`, 0.04526498281758707], 
             "ModelMemory" -> 94972.8, "TrainingMemory" -> 262830.4, 
             "TrainingTime" -> 0.018786249999999997`], "Index" -> 4], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.37310642359344, 0.0792206739713371], "Accuracy" -> 
              PlusMinus[0.385572252374492, 0.023730508558189957`], 
              "EvaluationTime" -> 7.435078534031414*^-6, "TestSize" -> 573, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.0029933250000000002`, 
              "TrainingMemory" -> 65166., "ModelMemory" -> 9200., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.18080882985854219`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.417783551088687, 0.11855666132663137`], 
                PlusMinus[2.2939537254667584`, 0.12052560037051266`], 
                PlusMinus[2.404907420239222, 0.11835293048687344`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3732283465281307, 0.0349753068266524], 
                PlusMinus[0.4103312848978301, 0.03564511347065186], 
                PlusMinus[0.37403376169545166`, 0.03504388331392403]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.3576116087957872`, 0.16502026979598797`], 
              "Accuracy" -> 
              PlusMinus[0.6807496330579361, 0.05262207328705133], 
              "EvaluationTime" -> 8.718125*^-6, "TestSize" -> 160, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.0035066, 
              "TrainingMemory" -> 123264, "ModelMemory" -> 19728, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.3106129419629985, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.3576116087957872`, 0.1166869518059767]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6807496330579361, 0.037209424861369474`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.840276501429807, 0.10741249631644348`], "Accuracy" -> 
              PlusMinus[0.7309203789415921, 0.04147025648291003], 
              "EvaluationTime" -> 0.0000148835, "TestSize" -> 160, 
              "TrainingSize" -> 160, "TrainingTime" -> 0.0056251800000000005`,
               "TrainingMemory" -> 662572.8, "ModelMemory" -> 62864., 
              "ExperimentCount" -> 4, "ModelUtility" -> 0.5012337287647903, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8957120779483658, 0.20948535511811672`], 
                PlusMinus[0.9190637080945325, 0.20645123198998064`], 
                PlusMinus[0.922624032282809, 0.18357540897475877`], 
                PlusMinus[0.6994897049472328, 0.15919441699496217`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7341463414634142, 0.07170958326211418], 
                PlusMinus[0.7097560975609751, 0.0734290502683425], 
                PlusMinus[0.6853658536585362, 0.07491573788867202], 
                PlusMinus[0.782926829268292, 0.06749878482967674]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0000148835, "MeanCrossEntropy" -> 
             PlusMinus[0.840276501429807, 0.10741249631644348`], 
             "ModelMemory" -> 62864., "TrainingMemory" -> 662572.8, 
             "TrainingTime" -> 0.0100248], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.171974281880781, 0.011263912985554762`], "Accuracy" -> 
              PlusMinus[0.37877824255782216`, 0.02281526044452613], 
              "EvaluationTime" -> 4.168455497382199*^-6, "TestSize" -> 573, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.022414975, 
              "TrainingMemory" -> 226890., "ModelMemory" -> 10880., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.19866523713202294`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.1813623687426307`, 0.016133986078128684`], 
                PlusMinus[2.1733521227870067`, 0.01678597550714932], 
                PlusMinus[2.1607027508782863`, 0.01658955470234634]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.36832310276595676`, 0.03489751091237484], 
                PlusMinus[0.3999586496486454, 0.035493458734601135`], 
                PlusMinus[0.3687383892358755, 0.034932091984060346`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.8900233909526207`, 0.03294152628365836], "Accuracy" -> 
              PlusMinus[0.5320686557671483, 0.056038836996320264`], 
              "EvaluationTime" -> 4.23875*^-6, "TestSize" -> 160, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.0244239, 
              "TrainingMemory" -> 250928, "ModelMemory" -> 10880, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.22774473877615506`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.8900233909526207`, 0.023293176617809712`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5320686557671483, 0.039625441649905634`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.316425360586046, 0.05353763124682373], "Accuracy" -> 
              PlusMinus[0.6937146499240356, 0.04372326099744493], 
              "EvaluationTime" -> 7.2575*^-6, "TestSize" -> 120, 
              "TrainingSize" -> 160, "TrainingTime" -> 0.025963075, 
              "TrainingMemory" -> 352704., "ModelMemory" -> 10880., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.32547104988035713`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.321080140992849, 0.07412057345602867], 
                PlusMinus[1.2862670756260326`, 0.05780045635382985], 
                PlusMinus[1.400314438855028, 0.10127047617812442`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6853658536585362, 0.07491573788867202], 
                PlusMinus[0.7097560975609751, 0.0734290502683425], 
                PlusMinus[0.6853658536585362, 0.07491573788867202]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 7.2575*^-6, "MeanCrossEntropy" -> 
             PlusMinus[1.316425360586046, 0.05353763124682373], "ModelMemory" -> 
             10880., "TrainingMemory" -> 352704., "TrainingTime" -> 
             0.054868818750000006`], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.3025695685976264`, 0.00695233558857982], "Accuracy" -> 
              PlusMinus[0.3645856947690461, 0.02700294489270062], 
              "EvaluationTime" -> 3.90431937172775*^-6, "TestSize" -> 573, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.0062106999999999996`, 
              "TrainingMemory" -> 109160., "ModelMemory" -> 10880., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.18747865794614055`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.3025708301881647`, 0.012041811314580266`], 
                PlusMinus[2.3025696542244614`, 0.012041799286013944`], 
                PlusMinus[2.302568221386061, 0.01204178459888949]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.33259905039616483`, 0.03410257141445058], 
                PlusMinus[0.3948151555147733, 0.03541602500568751], 
                PlusMinus[0.3687383892358755, 0.034932091984060346`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.302523212490976, 0.019705322198452085`], "Accuracy" -> 
              PlusMinus[0.49499555750528035`, 0.05609268820367997], 
              "EvaluationTime" -> 4.926875*^-6, "TestSize" -> 160, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.0062594, 
              "TrainingMemory" -> 133376, "ModelMemory" -> 10880, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.187275102994692, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.302523212490976, 0.013933766951991274`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.49499555750528035`, 0.039663520203804765`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.302308780223118, 0.02300637624298156], "Accuracy" -> 
              PlusMinus[0.5962485228220785, 0.048138261541761436`], 
              "EvaluationTime" -> 8.392500000000001*^-6, "TestSize" -> 120, 
              "TrainingSize" -> 160, "TrainingTime" -> 0.008074725, 
              "TrainingMemory" -> 241978., "ModelMemory" -> 10880., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.18723891401587017`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.302303550322774, 0.03984803175907571], 
                PlusMinus[2.3023057964642377`, 0.03984810656341403], 
                PlusMinus[2.3023169940630943`, 0.0398484973826938]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6121951219512192, 0.07810174437320255], 
                PlusMinus[0.6121951219512192, 0.07810174437320255], 
                PlusMinus[0.5634146341463412, 0.07924518035819451]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 8.392500000000001*^-6, "MeanCrossEntropy" -> 
             PlusMinus[2.302308780223118, 0.02300637624298156], "ModelMemory" -> 
             10880., "TrainingMemory" -> 241978., "TrainingTime" -> 
             0.01630410625], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^-6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[4.5684637020051575`, 0.31576742773302996`], 
              "Accuracy" -> 
              PlusMinus[0.3900892018706595, 0.028639093972689367`], 
              "EvaluationTime" -> 4.489136125654451*^-6, "TestSize" -> 573, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.020695675, 
              "TrainingMemory" -> 227024., "ModelMemory" -> 10880., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.09325972283844308, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[4.826312619397133, 0.3537818711223458], 
                PlusMinus[4.115299423190331, 0.3313921487733226], 
                PlusMinus[4.8553058553013635`, 0.3725870936629057]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.3724748119098396, 0.034910375862156895`], 
                PlusMinus[0.4310727034056677, 0.035901030450046036`], 
                PlusMinus[0.3689077850423597, 0.034945782836437525`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[4.028520576540189, 0.7922742495384296], "Accuracy" -> 
              PlusMinus[0.6372058773463041, 0.054175374141671916`], 
              "EvaluationTime" -> 4.216875000000001*^-6, "TestSize" -> 160, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.022188, 
              "TrainingMemory" -> 250864, "ModelMemory" -> 10880, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.10316357067538319`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[4.028520576540189, 0.5602224944081065]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6372058773463041, 0.03830777442889455]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.9668763859600473, 0.7416380415768854], "Accuracy" -> 
              PlusMinus[0.7925590509923386, 0.041663525374259255`], 
              "EvaluationTime" -> 7.134375*^-6, "TestSize" -> 120, 
              "TrainingSize" -> 160, "TrainingTime" -> 0.027808225, 
              "TrainingMemory" -> 352774., "ModelMemory" -> 10880., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.387322262365907, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.5823759090261402`, 0.7538245833268238], 
                PlusMinus[0.6919681851464252, 0.38321366359938336`], 
                PlusMinus[2.9678979507158254`, 1.5926773311413505`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8073170731707313, 0.06495743734957983], 
                PlusMinus[0.8073170731707313, 0.06495743734957983], 
                PlusMinus[0.7585365853658532, 0.06974012122408565]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 7.134375*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.9668763859600473, 0.7416380415768854], "ModelMemory" -> 
             10880., "TrainingMemory" -> 352774., "TrainingTime" -> 
             0.05545595625000001], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.8564546512901192`, 0.05990817890269545], "Accuracy" -> 
              PlusMinus[0.38984962566566217`, 0.02875988813612281], 
              "EvaluationTime" -> 3.830628272251309*^-6, "TestSize" -> 573, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.021398675, 
              "TrainingMemory" -> 226902., "ModelMemory" -> 10880., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.23117905516943646`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.9020940238468058`, 0.0864865332251163], 
                PlusMinus[1.80535322140541, 0.08957225299497626], 
                PlusMinus[1.8591834375610399`, 0.10097546450001894`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.36675838930463805`, 0.034765673438499005`], 
                PlusMinus[0.4310727034056677, 0.035901030450046036`], 
                PlusMinus[0.37403376169545166`, 0.03504388331392403]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.148228866887486, 0.139652185251208], "Accuracy" -> 
              PlusMinus[0.6496950794282346, 0.05377289434084565], 
              "EvaluationTime" -> 7.614374999999999*^-6, "TestSize" -> 160, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.0232309, 
              "TrainingMemory" -> 250992, "ModelMemory" -> 10880, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.36724900479789935`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.148228866887486, 0.09874900719864914]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6496950794282346, 0.03802317823243968]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.4860726142070002, 0.08480071612250493], "Accuracy" -> 
              PlusMinus[0.8329230258300167, 0.032496807113858626`], 
              "EvaluationTime" -> 8.381*^-6, "TestSize" -> 160, 
              "TrainingSize" -> 160, "TrainingTime" -> 0.02538394, 
              "TrainingMemory" -> 352803.2, "ModelMemory" -> 10880., 
              "ExperimentCount" -> 4, "ModelUtility" -> 0.8586783408088497, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.546257617905059, 0.143355199394125], 
                PlusMinus[0.4234978798338893, 0.09289342476767895], 
                PlusMinus[0.7082926408088938, 0.2464966794021459], 
                PlusMinus[0.49248302566662755`, 0.09813725169065833]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8073170731707313, 0.06495743734957983], 
                PlusMinus[0.8317073170731701, 0.062079244913053964`], 
                PlusMinus[0.8317073170731701, 0.062079244913053964`], 
                PlusMinus[0.8560975609756093, 0.058814776198962464`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 8.381*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.4860726142070002, 0.08480071612250493], 
             "ModelMemory" -> 10880., "TrainingMemory" -> 352803.2, 
             "TrainingTime" -> 0.053128600000000005`], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.3010352649227293`, 0.006944170498889743], 
              "Accuracy" -> 
              PlusMinus[0.3645856947690461, 0.02700294489270062], 
              "EvaluationTime" -> 3.9260471204188485`*^-6, "TestSize" -> 573, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.015809425, 
              "TrainingMemory" -> 202622., "ModelMemory" -> 10880., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.18760372410601955`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.3011611545424606`, 0.012028171831480763`], 
                PlusMinus[2.301043930078417, 0.012027117297185036`], 
                PlusMinus[2.300900767086774, 0.012025558680396892`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.33259905039616483`, 0.03410257141445058], 
                PlusMinus[0.3948151555147733, 0.03541602500568751], 
                PlusMinus[0.3687383892358755, 0.034932091984060346`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.296427940224818, 0.019608987848428988`], "Accuracy" -> 
              PlusMinus[0.49499555750528035`, 0.05609268820367997], 
              "EvaluationTime" -> 4.2975*^-6, "TestSize" -> 160, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.0070003, 
              "TrainingMemory" -> 146936, "ModelMemory" -> 10880, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.1877728973950522, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.296427940224818, 0.013865648279828745`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.49499555750528035`, 0.039663520203804765`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.275442475214272, 0.022517112306524527`], "Accuracy" -> 
              PlusMinus[0.5962485228220785, 0.048138261541761436`], 
              "EvaluationTime" -> 7.591250000000001*^-6, "TestSize" -> 120, 
              "TrainingSize" -> 160, "TrainingTime" -> 0.011885024999999999`, 
              "TrainingMemory" -> 269648., "ModelMemory" -> 10880., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.18945332619746766`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.274931371347568, 0.03897248273683678], 
                PlusMinus[2.2751301646464674`, 0.038955921957622035`], 
                PlusMinus[2.27626960871711, 0.03905409800683784]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6121951219512192, 0.07810174437320255], 
                PlusMinus[0.6121951219512192, 0.07810174437320255], 
                PlusMinus[0.5634146341463412, 0.07924518035819451]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 7.591250000000001*^-6, "MeanCrossEntropy" -> 
             PlusMinus[2.275442475214272, 0.022517112306524527`], 
             "ModelMemory" -> 10880., "TrainingMemory" -> 269648., 
             "TrainingTime" -> 0.030665706249999997`], "Index" -> 10], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 250], "LearningRate" -> 
             Association["Value" -> 0.2], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 10], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 90], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.3025850929940432`, 0.019706360434309025`], 
              "Accuracy" -> 
              PlusMinus[0.09999999999999999, 0.03335348323818565], 
              "EvaluationTime" -> 9.165000000000001*^-6, "TestSize" -> 160, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.0188285, 
              "TrainingMemory" -> 85312, "ModelMemory" -> 20248, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.18727000998445123`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.3025850929940432`, 0.013934501095606188`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.09999999999999999, 0.02358447417391292]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.3025850929940472`, 0.01992885039169642], "Accuracy" -> 
              PlusMinus[0.1, 0.02345082593574325], "EvaluationTime" -> 
              0.000016289000000000003`, "TestSize" -> 160, "TrainingSize" -> 
              160, "TrainingTime" -> 0.015030180000000002`, "TrainingMemory" -> 
              206342.40000000002`, "ModelMemory" -> 20248., "ExperimentCount" -> 
              4, "ModelUtility" -> 0.18726639586766597`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.3025850929940472`, 0.03985770078339284], 
                PlusMinus[2.3025850929940472`, 0.03985770078339284], 
                PlusMinus[2.3025850929940472`, 0.03985770078339284], 
                PlusMinus[2.3025850929940472`, 0.03985770078339284]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.1, 0.0469016518714865], 
                PlusMinus[0.1, 0.0469016518714865], 
                PlusMinus[0.1, 0.0469016518714865], 
                PlusMinus[0.1, 0.0469016518714865]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.3025850929940455`, 0.006952427318515094], 
              "Accuracy" -> 
              PlusMinus[0.09947921926079137, 0.012444773271150213`], 
              "EvaluationTime" -> 7.194633507853404*^-6, "TestSize" -> 573, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.01136165, 
              "TrainingMemory" -> 59184., "ModelMemory" -> 20248., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.1874773414735258, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.302585092994045, 0.012041957351597993`], 
                PlusMinus[2.302585092994045, 0.012041957351597993`], 
                PlusMinus[2.302585092994045, 0.012041957351597993`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.09947921926079135, 0.021554979594307307`], 
                PlusMinus[0.09947921926079135, 0.021554979594307307`], 
                PlusMinus[0.09947921926079135, 0.021554979594307307`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 7.194633507853404*^-6, "MeanCrossEntropy" -> 
             PlusMinus[2.3025850929940455`, 0.006952427318515094], 
             "ModelMemory" -> 20248., "TrainingMemory" -> 59184., 
             "TrainingTime" -> 0.0415518], "Index" -> 11], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.3024424862524637`, 0.017027844663323084`], 
              "Accuracy" -> 
              PlusMinus[0.33259905039616483`, 0.04822831900611304], 
              "EvaluationTime" -> 4.683246073298429*^-6, "TestSize" -> 191, 
              "TrainingSize" -> 9, "TrainingTime" -> 0.0071171, 
              "TrainingMemory" -> 115904, "ModelMemory" -> 10880, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.18732515100016986`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.3024424862524637`, 0.012040504430426917`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.33259905039616483`, 0.03410257141445058]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.3019665703556855`, 0.019696037032727532`], 
              "Accuracy" -> 
              PlusMinus[0.49499555750528035`, 0.05609268820367997], 
              "EvaluationTime" -> 4.816875*^-6, "TestSize" -> 160, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.0070823, 
              "TrainingMemory" -> 140248, "ModelMemory" -> 10880, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.1873204617590498, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.3019665703556855`, 0.013927201348343004`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.49499555750528035`, 0.039663520203804765`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.2998264782885567`, 0.02295756209106384], "Accuracy" -> 
              PlusMinus[0.5962485228220785, 0.048138261541761436`], 
              "EvaluationTime" -> 0.000011679375, "TestSize" -> 120, 
              "TrainingSize" -> 160, "TrainingTime" -> 0.011464575, 
              "TrainingMemory" -> 248864., "ModelMemory" -> 10880., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.18744139901745563`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.299774283594556, 0.03976176420453859], 
                PlusMinus[2.299796506347544, 0.03976228957051164], 
                PlusMinus[2.299908664709491, 0.03976674293906772]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6121951219512192, 0.07810174437320255], 
                PlusMinus[0.6121951219512192, 0.07810174437320255], 
                PlusMinus[0.5634146341463412, 0.07924518035819451]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000011679375, "MeanCrossEntropy" -> 
             PlusMinus[2.2998264782885567`, 0.02295756209106384], 
             "ModelMemory" -> 10880., "TrainingMemory" -> 248864., 
             "TrainingTime" -> 0.02144781875], "Index" -> 12], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.5514649776211318`, 0.27320806654978397`], 
              "Accuracy" -> 
              PlusMinus[0.6496950794282346, 0.05377289434084565], 
              "EvaluationTime" -> 8.5475*^-6, "TestSize" -> 160, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.028005, 
              "TrainingMemory" -> 251152, "ModelMemory" -> 10880, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.26893814886934636`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.5514649776211318`, 0.1931872765322178]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6496950794282346, 0.03802317823243968]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5253062724607919, 0.25944495964275344`], "Accuracy" -> 
              PlusMinus[0.8257971399457877, 0.03968466427279461], 
              "EvaluationTime" -> 0.00001282875, "TestSize" -> 120, 
              "TrainingSize" -> 160, "TrainingTime" -> 0.040644774999999994`, 
              "TrainingMemory" -> 352730., "ModelMemory" -> 10880., 
              "ExperimentCount" -> 3, "ModelUtility" -> 0.7483487101364056, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7487842103298067, 0.2829236596216064], 
                PlusMinus[0.4130640324597451, 0.15390252719656652`], 
                PlusMinus[1.1852355318543344`, 0.582208469378023]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8073170731707313, 0.06495743734957983], 
                PlusMinus[0.8560975609756093, 0.058814776198962464`], 
                PlusMinus[0.8073170731707313, 0.06495743734957983]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00001282875, "MeanCrossEntropy" -> 
             PlusMinus[0.5253062724607919, 0.25944495964275344`], 
             "ModelMemory" -> 10880., "TrainingMemory" -> 352730., 
             "TrainingTime" -> 0.07881096874999999], "Index" -> 13]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 13], 
        Association["ID" -> 231236911919298]], "MaxTrainingSize" -> 200, 
      "LastReportingTime" -> 3.7651931537058832`17.328362249494*^9, 
      "PreprocessorEvaluationTime" -> 
      3.24936523437500653435638930943696`4.*^-6, "PreprocessorMemory" -> 
      55664, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 9, "TimeBudgets" -> 0.6400000000000001, 
          "ElapsedTimes" -> 0.779579, "ExperimentCounts" -> 34], 
         Association[
         "TrainingSizes" -> 40, "TimeBudgets" -> 0.8, "ElapsedTimes" -> 
          0.8212258, "ExperimentCounts" -> 13], 
         Association[
         "TrainingSizes" -> 160, "TimeBudgets" -> 1., "ElapsedTimes" -> 
          1.0089609, "ExperimentCounts" -> 45]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[231245501853890]], "ID" -> 
         231249796821186]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "BooleanVector", "Weight" -> 1, 
           "Values" -> {{0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1,
             0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 
            1}}, "ID" -> 6072081202834183359]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 3.182697, "MaxTrainingMemory" -> 1188016, 
      "DataMemory" -> 100872, "FunctionMemory" -> 284264, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2019, 4, 25, 14, 59, 14.1276426`8.902644650599086}, 
        "Instant", "Gregorian", -5.], "ProcessorCount" -> 10, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7640848988287897`*^9, 3.764085376394328*^9, 
  3.764777827321715*^9, 3.764779629768362*^9, 3.76477969059991*^9, 
  3.7647800568333764`*^9, 3.7652111541656213`*^9},
 CellLabel->"Out[49]=",ExpressionUUID->"6018a0e6-db89-445a-b1f3-922b62847957"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{"c1Rules", ",", " ", "TestSetRules", ",", " ", "\"\<Accuracy\>\""}],
   "]"}]], "Input",
 CellChangeTimes->{{3.7640849084267273`*^9, 3.7640849295536656`*^9}, {
  3.7640849758419914`*^9, 3.7640849801585283`*^9}},
 CellLabel->"In[50]:=",ExpressionUUID->"dcc66170-131c-4276-a187-3b35c4b70eca"],

Cell[BoxData["0.8235`"], "Output",
 CellChangeTimes->{3.764084981367837*^9, 3.764085376515211*^9, 
  3.7647778274556384`*^9, 3.76477962989229*^9, 3.7647796907217875`*^9, 
  3.7647800569563046`*^9, 3.76521115431213*^9},
 CellLabel->"Out[50]=",ExpressionUUID->"aee24221-f708-42d5-b8d0-6461bad3cc46"]
}, Open  ]],

Cell["0.82 is very good. Better than expected.", "Text",
 CellChangeTimes->{{3.7640850331708326`*^9, 3.7640850661043663`*^9}, {
  3.7647803514044485`*^9, 
  3.7647803616928873`*^9}},ExpressionUUID->"ce535471-d18b-4e96-99c3-\
878b72f03151"]
}, Open  ]],

Cell[CellGroupData[{

Cell["A simple neural network.", "Subsection",
 CellChangeTimes->{{3.764084777481213*^9, 
  3.7640847855765944`*^9}},ExpressionUUID->"243e1523-b0e5-481a-945c-\
2b8a225376c2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"n", "*", "t"}]], "Input",
 CellChangeTimes->{{3.764085121433919*^9, 3.764085132336547*^9}, {
  3.7640851712457266`*^9, 3.7640851714865894`*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"7f3426ac-6b81-43f1-af1c-48c10d7d896f"],

Cell[BoxData["40"], "Output",
 CellChangeTimes->{{3.764085123566861*^9, 3.7640851330838375`*^9}, 
   3.7640851719017153`*^9, 3.764085376537203*^9, 3.764777827476627*^9, 
   3.764779629912279*^9, 3.764779690740776*^9, 3.7647800569772935`*^9, 
   3.765211154339115*^9},
 CellLabel->"Out[51]=",ExpressionUUID->"66c421c9-89d2-4005-a82d-fab469d72589"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "@", 
  RowBox[{"TrainingSetRules", "[", 
   RowBox[{"[", 
    RowBox[{"1", ",", "1"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7640851492496777`*^9, 3.76408516278156*^9}},
 CellLabel->"In[52]:=",ExpressionUUID->"a65970ee-29d5-48e9-a73e-b23998705d50"],

Cell[BoxData["40"], "Output",
 CellChangeTimes->{{3.764085152052812*^9, 3.7640851631878433`*^9}, 
   3.7640853765611887`*^9, 3.7647778274946165`*^9, 3.764779629927271*^9, 
   3.7647796907577667`*^9, 3.764780056997282*^9, 3.765211154361102*^9},
 CellLabel->"Out[52]=",ExpressionUUID->"00cfc199-5d39-48db-8eb4-012927dab1b7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nnT", " ", "=", " ", 
  RowBox[{"NetChain", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", " ", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"LinearLayer", "[", 
       RowBox[{"n", "*", "t"}], "]"}], ",", "Ramp", ",", 
      RowBox[{"DropoutLayer", "[", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"LinearLayer", "[", "]"}], ",", "Ramp", ",", 
      RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", "\n", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Class\>\"", ",", 
        RowBox[{"Range", "[", 
         RowBox[{"Length", "@", "classesTopo"}], " ", "]"}]}], "}"}], "]"}]}],
     ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", " ", 
     RowBox[{"{", 
      RowBox[{"n", "*", "t"}], "}"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.764084560659071*^9, 3.7640845619263477`*^9}, 
   3.764084637629279*^9, {3.7640848270827913`*^9, 3.764084837189725*^9}, {
   3.764085079062623*^9, 3.764085112306697*^9}, {3.7640856333832893`*^9, 
   3.7640856645860653`*^9}},
 CellLabel->"In[53]:=",ExpressionUUID->"6f408420-191d-43a1-a319-6a821875fccb"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"40\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["6", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{40, 40}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {40}, "$OutputSize" -> 40, 
                    "$InputSize" -> 40, "$InputDimensions" -> {40}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {40}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{10, 40}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 40, "$InputDimensions" -> {40}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {10}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, "InputDepth" -> 
                    1, "Dimensions" -> 10, "$Rank" -> 0], 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"40\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"40\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"40\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"40\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7640848392288165`*^9, 3.7640851922941675`*^9, 
  3.7640853766131597`*^9, 3.7640856655085373`*^9, 3.7647778275565815`*^9, 
  3.764779629973245*^9, 3.7647796908127356`*^9, 3.7647800570472536`*^9, 
  3.765211154403078*^9},
 CellLabel->"Out[53]=",ExpressionUUID->"3aff31e0-9f9c-445d-8526-36bbe9116432"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"netT", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{
   "nnT", ",", "\[IndentingNewLine]", "TrainingSetTopo", ",", " ", 
    "\[IndentingNewLine]", 
    RowBox[{"ValidationSet", "\[Rule]", "ValidationSetTopo"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"TargetDevice", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<GPU\>\"", ",", "2"}], "}"}]}]}], " ", 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7640852246117325`*^9, 3.7640852514764233`*^9}, {
  3.764085294303623*^9, 3.7640853303070507`*^9}, {3.764085584006111*^9, 
  3.764085586243315*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"629502f8-de08-46b5-95f7-ecd6ea7e0f39"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"40\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["6", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{40, 40}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{40}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {40}, "$OutputSize" -> 40, 
                    "$InputSize" -> 40, "$InputDimensions" -> {40}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {40}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{10, 40}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{10}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 40, "$InputDimensions" -> {40}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {10}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, "InputDepth" -> 
                    1, "Dimensions" -> 10, "$Rank" -> 0], 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"40\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"40\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"40\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"40\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.764779753294766*^9, 3.764780120065303*^9, 
  3.7652112095689187`*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"6880fe14-513d-4ab0-a7d0-7d55a73e77fb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{"netT", ",", " ", "TestSetTopo", ",", " ", "\"\<Accuracy\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{
  3.764084705515654*^9, {3.7640857124714007`*^9, 3.764085724677527*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"5d65f59a-d255-48a6-8c08-4d9b43c8b086"],

Cell[BoxData["0.3275`"], "Output",
 CellChangeTimes->{3.7640853833610215`*^9, 3.7640857261959705`*^9, 
  3.764777960378012*^9, 3.7647797535646105`*^9, 3.764780120365131*^9, 
  3.765211209892254*^9},
 CellLabel->"Out[55]=",ExpressionUUID->"653759d1-15e3-49aa-ad4a-d83786473060"]
}, Open  ]],

Cell["Better than nearest neighbor classifier but still low.", "Text",
 CellChangeTimes->{{3.764085737662361*^9, 3.764085790204793*^9}, {
  3.764780378909397*^9, 3.7647803795012436`*^9}, {3.764780739989643*^9, 
  3.7647807715569897`*^9}},ExpressionUUID->"e1201433-9200-4fd9-a69f-\
f8e608309d0c"],

Cell[CellGroupData[{

Cell["For completeness sake, lets classify the rules.", "Subsubsection",
 CellChangeTimes->{{3.7640858514738207`*^9, 
  3.764085881561797*^9}},ExpressionUUID->"296e8c5c-f93f-4c80-9c2d-\
f17553fa091a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nnR", " ", "=", " ", 
  RowBox[{"NetChain", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", " ", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"LinearLayer", "[", 
       RowBox[{"n", "*", "t"}], "]"}], ",", "Ramp", ",", 
      RowBox[{"DropoutLayer", "[", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"LinearLayer", "[", "]"}], ",", "Ramp", ",", 
      RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", "\n", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Class\>\"", ",", 
        RowBox[{"Range", "[", 
         RowBox[{"Length", "@", "classesRules"}], "]"}]}], "}"}], "]"}]}], 
    ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", " ", 
     RowBox[{"{", 
      RowBox[{"n", "*", "t"}], "}"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.764085902515417*^9, 3.764085903601797*^9}, {
  3.764085942030595*^9, 3.7640859550146203`*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"8247a3ba-2e04-4d62-aeff-e8b9ad9b8d97"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"40\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["6", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{40, 40}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {40}, "$OutputSize" -> 40, 
                    "$InputSize" -> 40, "$InputDimensions" -> {40}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {40}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{10, 40}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 40, "$InputDimensions" -> {40}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {10}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, "InputDepth" -> 
                    1, "Dimensions" -> 10, "$Rank" -> 0], 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"40\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"40\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"40\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"40\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7640859577259235`*^9, 3.7647779604769554`*^9, 
  3.764779753676547*^9, 3.7647801204580774`*^9, 3.7652112100001926`*^9},
 CellLabel->"Out[56]=",ExpressionUUID->"78de8764-7acf-4723-abf6-2f1c7384884c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"netR", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{
   "nnR", ",", "\[IndentingNewLine]", "TrainingSetRules", ",", " ", 
    "\[IndentingNewLine]", 
    RowBox[{"ValidationSet", "\[Rule]", "ValidationSetRules"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"TargetDevice", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<GPU\>\"", ",", "2"}], "}"}]}]}], " ", 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7640859653088813`*^9, 3.764086013875574*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"72c48ca0-fea6-40bd-8ef6-deb1e8132828"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"40\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["6", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{40, 40}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{40}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {40}, "$OutputSize" -> 40, 
                    "$InputSize" -> 40, "$InputDimensions" -> {40}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {40}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{10, 40}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{10}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 40, "$InputDimensions" -> {40}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {10}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{40}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, "InputDepth" -> 
                    1, "Dimensions" -> 10, "$Rank" -> 0], 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"40\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"40\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"40\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"40\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7640860501711297`*^9, 3.7647780857932644`*^9, 
  3.764779863937694*^9, 3.7647802335513983`*^9, 3.7652112971953087`*^9},
 CellLabel->"Out[57]=",ExpressionUUID->"e865deb5-3168-4c6f-b359-1eafba7bf6d5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierMeasurements", "[", 
  RowBox[{
  "netR", ",", " ", "TrainingSetRules", ",", " ", "\"\<Accuracy\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7640860645805264`*^9, 3.7640860773663735`*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"8951adf7-b76d-4e92-a833-a03314715098"],

Cell[BoxData["0.925`"], "Output",
 CellChangeTimes->{3.7640860783403854`*^9, 3.764778085987153*^9, 
  3.7647798641068125`*^9, 3.7647802337183013`*^9, 3.7652112973871975`*^9},
 CellLabel->"Out[58]=",ExpressionUUID->"4a27bdcf-3e2b-4b0b-8d80-4f7c5b421fe8"]
}, Open  ]],

Cell["This is now expected given the previous result.", "Text",
 CellChangeTimes->{{3.7640860836431875`*^9, 
  3.7640860971705685`*^9}},ExpressionUUID->"acc1f4fb-4054-4a27-9ac0-\
592b57eac0eb"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Algorithmic Information Classifier", "Chapter",
 CellChangeTimes->{{3.7640209842847185`*^9, 3.764020994151701*^9}, {
  3.7640863245563593`*^9, 
  3.7640863332751226`*^9}},ExpressionUUID->"c3450fb5-febf-4eec-a8d4-\
c0545a8da476"],

Cell["\<\
Lets compute the conditional CTM for the reduced set of rules. \
\>", "Text",
 CellChangeTimes->{{3.764020997568587*^9, 3.7640210335118914`*^9}, {
  3.7640862442591405`*^9, 
  3.7640862461872487`*^9}},ExpressionUUID->"c68154e3-7773-46d5-81da-\
1aacaf695b02"],

Cell[BoxData[
 RowBox[{
  RowBox[{"set", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"toBinaryInt", "[", 
      RowBox[{"#", ",", "8"}], "]"}], "&"}], "/@", 
    RowBox[{"Range", "[", 
     RowBox[{"2", "^", "8"}], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7640210381994724`*^9, 3.7640211123138046`*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"2062cb6f-fe6a-4c73-ae2b-2b7700ee870b"],

Cell[TextData[{
 "Function that ",
 StyleBox["enumerates ",
  FontWeight->"Bold"],
 "all the possible topologies."
}], "Text",
 CellChangeTimes->{{3.76402208302804*^9, 3.7640220886168866`*^9}, {
  3.764022178617934*^9, 
  3.764022206578009*^9}},ExpressionUUID->"48d068e0-f005-4160-8ce5-\
074367bcccc2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ConnectivityMatrix", "[", 
  RowBox[{"4", ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.7640229002595177`*^9, 3.7640229596275744`*^9}, {
  3.764023019519623*^9, 3.764023019692524*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"c7aac144-a042-4ed9-90a7-9fca1fcbe75f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.7640229100979943`*^9, 3.76402296062457*^9}, 
   3.7640230210463305`*^9, 3.764025926307103*^9, 3.7640259936339335`*^9, 
   3.764030653331111*^9, 3.764030965310942*^9, 3.7640310851573343`*^9, 
   3.7640541482666063`*^9, 3.764077369996271*^9, 3.7640819014383335`*^9, 
   3.7640853834109926`*^9, 3.764778086052116*^9, 3.7647798641687765`*^9, 
   3.7647802337822647`*^9, 3.7652112974801445`*^9},
 CellLabel->"Out[60]=",ExpressionUUID->"4144151f-311a-4a92-8620-624a96fe37e4"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"conBits", " ", "[", 
   RowBox[{"n_", ",", "k_"}], "]"}], " ", ":=", 
  RowBox[{"Flatten", "[", 
   RowBox[{"Prepend", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{"0", ",", 
       RowBox[{"{", 
        RowBox[{"n", "-", "k"}], "}"}]}], "]"}], ",", 
     RowBox[{"Table", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", "k", "}"}]}], "]"}]}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7640226159514832`*^9, 3.7640226415095367`*^9}, 
   3.764022720223646*^9, {3.7640227550149794`*^9, 3.764022791731064*^9}, {
   3.7640228419442215`*^9, 3.7640228448120155`*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"7b8569a8-1683-4adf-a24c-d87f3a6f0541"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rows", "[", 
   RowBox[{"n_", ",", "k_"}], "]"}], ":=", 
  RowBox[{"Permutations", "[", 
   RowBox[{"conBits", "[", 
    RowBox[{"n", ",", "k"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.764022799531982*^9, 3.7640228754281287`*^9}, {
  3.764023203966046*^9, 3.764023234252144*^9}, {3.7640232711288614`*^9, 
  3.764023286116686*^9}, {3.7640236239767933`*^9, 3.7640236389828305`*^9}, {
  3.764023689304334*^9, 3.7640237050523458`*^9}, {3.7640237589206905`*^9, 
  3.764023794359748*^9}, {3.764023841448048*^9, 3.764023843772621*^9}, {
  3.7640239906087*^9, 3.764023990934516*^9}, {3.764024262225258*^9, 
  3.764024263770192*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"2e66c160-2611-4d96-b3b1-4db02c426778"],

Cell[BoxData[
 RowBox[{
  RowBox[{"topo", "[", 
   RowBox[{"n_", ",", "k_"}], "]"}], ":=", 
  RowBox[{"Tuples", "[", 
   RowBox[{
    RowBox[{"rows", "[", 
     RowBox[{"n", ",", "k"}], "]"}], ",", "n"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.764023810390013*^9, 3.764023868013217*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"03dae856-1004-4785-b160-ebc9ac59d647"],

Cell["\<\
For the following experiment I will focus on networks of size 5.\
\>", "Text",
 CellChangeTimes->{{3.764024533012926*^9, 
  3.764024554100792*^9}},ExpressionUUID->"69e3edf1-1af8-42f5-a7d6-\
76a4ec1acbff"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "@", 
  RowBox[{"topo", "[", 
   RowBox[{"5", ",", "2"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7640245597855473`*^9, 3.7640245632065954`*^9}},
 CellLabel->"In[66]:=",ExpressionUUID->"d49ec25c-0e57-46d3-abc4-9fbd576cf7a1"],

Cell[BoxData["100000"], "Output",
 CellChangeTimes->{3.764024563891203*^9, 3.7640259288152394`*^9, 
  3.764025996014577*^9, 3.7640306557673593`*^9, 3.764030967850089*^9, 
  3.7640310874742837`*^9, 3.7640541505592966`*^9, 3.764077372148044*^9, 
  3.764081903604848*^9, 3.76408538579871*^9, 3.764778088077593*^9, 
  3.764779866633875*^9, 3.764780235945675*^9, 3.765211299584944*^9},
 CellLabel->"Out[66]=",ExpressionUUID->"dad81f11-217e-4484-babc-e99ee22267cc"]
}, Open  ]],

Cell["Now, the list of all networks.", "Text",
 CellChangeTimes->{{3.7640233739972143`*^9, 3.764023378917509*^9}, {
  3.764024755197671*^9, 
  3.764024766301267*^9}},ExpressionUUID->"8667a448-b6d6-4574-ab7a-\
5579e84592d1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ruleL", "[", "k_", "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Which", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"k", "\[Equal]", "1"}], ",", 
    RowBox[{"{", 
     RowBox[{"rNot", ",", "rId"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"k", "\[Equal]", "2"}], ",", 
    RowBox[{"{", 
     RowBox[{"rAnd", ",", "rOr", ",", "rNand", ",", "rXor"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"k", "\[Equal]", "3"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "RuleK3A", ",", "RuleK3B", ",", "RuleK3C", ",", "RuleK3D", ",", 
      "RuleK3E", ",", "RuleK3F", ",", "RuleK3G", ",", "RuleK3H"}], "}"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.764024996296419*^9, 3.7640250311361246`*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"6314c479-d9b3-48a8-8e1e-43ae718c886b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rulesL", "[", 
   RowBox[{"n_", ",", "k_"}], "]"}], ":=", 
  RowBox[{"Tuples", "[", 
   RowBox[{
    RowBox[{"ruleL", "[", "k", "]"}], ",", "n"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.764024952322308*^9, 3.764024976945381*^9}, {
   3.764025108959509*^9, 3.7640251188641024`*^9}, {3.7640254619588594`*^9, 
   3.764025485576201*^9}, 3.7640257016602116`*^9, {3.7640257760889916`*^9, 
   3.76402578126498*^9}, {3.764025818120175*^9, 3.7640258220719213`*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"5d693433-b3c6-4d3c-bb62-d1b427713691"],

Cell[BoxData[
 RowBox[{"Remove", "[", "networks", "]"}]], "Input",
 CellChangeTimes->{{3.7640262264256268`*^9, 3.7640262305789013`*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"d00dff4d-d610-48b5-8a5d-16a5f51eb961"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "R", " ", "is", " ", "the", " ", "number", " ", "of", " ", "rules", " ", 
    "on", " ", "each", " ", "network"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"networks", "[", 
    RowBox[{"n_", ",", "k_"}], "]"}], ":=", " ", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\"\<Connections\>\"", "->", 
         RowBox[{"PositionsMatrix", "@", 
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}]}], ",", 
        RowBox[{"\"\<Rules\>\"", "->", 
         RowBox[{"#", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}]}], "\[RightAssociation]"}], ")"}], 
     "&"}], "/@", 
    RowBox[{"With", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"tps", " ", "=", " ", 
         RowBox[{"topo", "[", 
          RowBox[{"n", ",", "k"}], "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"rls", " ", "=", " ", 
         RowBox[{"rulesL", "[", 
          RowBox[{"n", ",", "k"}], "]"}]}]}], "\[IndentingNewLine]", "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"Tuples", "[", 
       RowBox[{"{", 
        RowBox[{"tps", ",", "rls"}], "}"}], "]"}]}], "\[IndentingNewLine]", 
     "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.7640248417030115`*^9, 3.76402488795695*^9}, {
  3.7640249285490828`*^9, 3.764024930452892*^9}, {3.7640251547507443`*^9, 
  3.7640252347597632`*^9}, {3.764025270879603*^9, 3.764025274287932*^9}, {
  3.764025374648587*^9, 3.764025377306159*^9}, {3.7640258145651965`*^9, 
  3.7640258285045204`*^9}, {3.7640261817030387`*^9, 3.7640262147949047`*^9}, {
  3.764026256869504*^9, 3.764026267640874*^9}, {3.764026300368482*^9, 
  3.7640263021237516`*^9}, {3.7640264738440037`*^9, 3.764026487277406*^9}, {
  3.7640285913851256`*^9, 3.7640285969249*^9}},
 CellLabel->"In[70]:=",ExpressionUUID->"4c410711-6c6f-4b36-b3be-1ab903e52363"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "@", 
  RowBox[{"networks", "[", 
   RowBox[{"4", ",", "2"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7640252797838807`*^9, 3.7640252858951025`*^9}, {
  3.764025343104029*^9, 3.764025346167248*^9}, {3.7640253853092804`*^9, 
  3.764025386108391*^9}, {3.764025942799599*^9, 3.764025960812477*^9}, {
  3.764026024487879*^9, 3.764026025344969*^9}, {3.764026323532992*^9, 
  3.764026350385775*^9}, {3.7640265311903887`*^9, 3.7640265313852777`*^9}, {
  3.764026807565174*^9, 3.7640268079455595`*^9}},
 CellLabel->"In[71]:=",ExpressionUUID->"3ea3d554-ec6d-4f0c-8cf7-a8072d7d870a"],

Cell[BoxData["331776"], "Output",
 CellChangeTimes->{
  3.764025346975025*^9, {3.764025379489211*^9, 3.764025387189355*^9}, 
   3.7640258336779957`*^9, {3.764025928983143*^9, 3.7640259564562063`*^9}, 
   3.764025996154497*^9, 3.764026030905674*^9, {3.764026219326563*^9, 
   3.7640262366014233`*^9}, 3.7640262756929097`*^9, {3.7640263162345476`*^9, 
   3.764026358505737*^9}, 3.7640265033751235`*^9, {3.76402679249253*^9, 
   3.7640268169562597`*^9}, 3.7640306651411963`*^9, 3.76403097684603*^9, 
   3.7640310963003263`*^9, 3.7640541591094227`*^9, 3.7640773803673553`*^9, 
   3.7640819114681883`*^9, 3.764085393868948*^9, 3.7647780963730574`*^9, 
   3.7647798749612913`*^9, 3.764780244049326*^9, 3.7652113076113663`*^9},
 CellLabel->"Out[71]=",ExpressionUUID->"3f6a6bcc-b2ac-48f0-ab69-c2619c00e9fe"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", " ", "=", 
  RowBox[{"RandomChoice", "@", 
   RowBox[{"networks", "[", 
    RowBox[{"4", ",", "2"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.7640263691376147`*^9, 3.764026415771221*^9}, {
  3.7640268215406923`*^9, 3.7640268406603923`*^9}, {3.764027238509676*^9, 
  3.764027239340953*^9}, {3.7640300477428384`*^9, 3.7640300480187645`*^9}},
 CellLabel->"In[72]:=",ExpressionUUID->"7975e285-640a-46ac-8c45-83881083574f"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Connections\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"\<\"Rules\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"rOr", ",", "rNand", ",", "rAnd", ",", "rAnd"}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.764026379419626*^9, 3.7640264240766845`*^9}, 
   3.7640265112329345`*^9, {3.7640268324483657`*^9, 3.764026849872681*^9}, 
   3.76402724830052*^9, 3.7640286108622417`*^9, 3.7640300584244986`*^9, 
   3.7640306735563955`*^9, 3.7640309853631663`*^9, 3.764031104689108*^9, 
   3.764054166720214*^9, 3.7640773881489143`*^9, 3.764081919038748*^9, 
   3.764085401563802*^9, 3.764778104161269*^9, 3.7647798827028737`*^9, 
   3.764780251776513*^9, 3.7652113154179087`*^9},
 CellLabel->"Out[72]=",ExpressionUUID->"c2689fc4-322c-430e-b052-64793f724e4c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"init", " ", "=", " ", 
  RowBox[{"ConstantArray", "[", 
   RowBox[{"0", ",", "4"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7640260357603426`*^9, 3.764026048287966*^9}},
 CellLabel->"In[73]:=",ExpressionUUID->"4eb13741-fae0-42b6-9588-63735cb6bad6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{3.76402604887563*^9, 3.7640306736683326`*^9, 
  3.7640309854901433`*^9, 3.7640311048290267`*^9, 3.7640541667691865`*^9, 
  3.76407738820988*^9, 3.764081919114706*^9, 3.764085401632762*^9, 
  3.7647781042262316`*^9, 3.764779882777833*^9, 3.764780251829485*^9, 
  3.7652113155188527`*^9},
 CellLabel->"Out[73]=",ExpressionUUID->"59f55d0d-5f7b-4db1-b605-f0660c4d7f66"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "[", "\"\<Connections\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.764028565191801*^9, 3.7640285816119213`*^9}, {
  3.7640300533811607`*^9, 3.7640300544345922`*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"520be078-6689-4d36-a371-e7908a9a6ea6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.7640285777484226`*^9, 3.764028581997701*^9}, 
   3.7640300588852367`*^9, 3.764030673714305*^9, 3.7640311048899927`*^9, 
   3.7640541667921734`*^9, 3.7640773882328653`*^9, 3.7640819191536827`*^9, 
   3.7640854016607456`*^9, 3.764778104278203*^9, 3.7647798827968187`*^9, 
   3.764780251851472*^9, 3.7652113155568304`*^9},
 CellLabel->"Out[74]=",ExpressionUUID->"559ee314-31f1-4fca-a032-6e07bfd75f7a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"n2", " ", "=", 
  RowBox[{"randomNetwork", "[", 
   RowBox[{"4", ",", "2"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7640261488027983`*^9, 3.7640261568649445`*^9}, {
  3.7640272249438443`*^9, 3.764027225658436*^9}, {3.764027268933581*^9, 
  3.764027269690529*^9}},
 CellLabel->"In[75]:=",ExpressionUUID->"e84ec925-51a6-437a-9b06-a07d1c19907b"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Connections\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "4"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"\<\"Rules\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"rXor", ",", "rAnd", ",", "rXor", ",", "rXor"}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.764026157438158*^9, 3.764027226484516*^9, 
  3.764027287933116*^9, 3.7640273440409384`*^9, 3.764030673761278*^9, 
  3.7640311049449606`*^9, 3.7640541668141613`*^9, 3.7640773882598515`*^9, 
  3.7640819191906624`*^9, 3.7640854016857333`*^9, 3.7647781043101835`*^9, 
  3.764779882821804*^9, 3.76478025187346*^9, 3.7652113155958085`*^9},
 CellLabel->"Out[75]=",ExpressionUUID->"d15a9de3-e9b4-4906-afe6-7045328f176c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"flattenEvo", "[", 
  RowBox[{"init", ",", "n2", ",", "10"}], "]"}]], "Input",
 CellChangeTimes->{{3.764027123564802*^9, 3.7640271450263824`*^9}, 
   3.7640273314002495`*^9},
 CellLabel->"In[76]:=",ExpressionUUID->"de9ad868-0481-4c2e-b771-0e9e05ff8350"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{
  3.764027176742577*^9, 3.7640272858249936`*^9, {3.7640273320308886`*^9, 
   3.7640273467598195`*^9}, 3.7640306738102503`*^9, 3.764031104990934*^9, 
   3.7640541668361483`*^9, 3.7640773882868357`*^9, 3.7640819192226434`*^9, 
   3.7640854017207108`*^9, 3.7647781043441677`*^9, 3.764779882852787*^9, 
   3.764780251907441*^9, 3.7652113156367855`*^9},
 CellLabel->"Out[76]=",ExpressionUUID->"aa15b95e-915b-4110-b135-020d8178daa9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"flattenEvo", "[", 
  RowBox[{"init", ",", "net", ",", "10"}], "]"}]], "Input",
 CellChangeTimes->{{3.764028540505661*^9, 3.7640285421440973`*^9}, {
  3.764030061925465*^9, 3.7640300622592726`*^9}},
 CellLabel->"In[77]:=",ExpressionUUID->"15054bc5-abe0-4b68-9973-e879a1cec5bf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", 
   ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", 
   "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", 
   ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
   "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", 
   ",", "0", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{3.764028570934984*^9, 3.7640286109861712`*^9, 
  3.76403006312459*^9, 3.7640306738612223`*^9, 3.764031105038907*^9, 
  3.764054166860135*^9, 3.7640773883138204`*^9, 3.764081919260623*^9, 
  3.764085401745696*^9, 3.764778104380144*^9, 3.764779882876773*^9, 
  3.764780251936426*^9, 3.765211315676762*^9},
 CellLabel->"Out[77]=",ExpressionUUID->"5ec37a4b-82f1-4b7e-afc6-c5346723946b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Now, to compute the incidences.", "Subsubsection",
 CellChangeTimes->{{3.764028824978738*^9, 
  3.7640288343913717`*^9}},ExpressionUUID->"6b70e91b-131d-48f5-bd6e-\
7e5213a7fa39"],

Cell["We will always start with the strings of zeros.", "Text",
 CellChangeTimes->{{3.7640295657364087`*^9, 
  3.7640295848168244`*^9}},ExpressionUUID->"246ee445-607c-4def-a7dc-\
64f851e57e1f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"init", " ", "=", " ", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"0", ",", "n"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7640296256277947`*^9, 3.764029627649394*^9}, {
  3.7640308486873245`*^9, 3.7640308494838715`*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"7894bbc3-d997-4457-a846-d01526b0fb69"],

Cell[BoxData[
 RowBox[{
  RowBox[{"nets", " ", "=", " ", 
   RowBox[{"networks", "[", 
    RowBox[{"n", ",", "k"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.764031047814309*^9, 3.764031054492414*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"b4f954f9-f3e4-4aaf-aaac-f2559b8bc6b0"],

Cell["\<\
A topological relation  (t->s) exists of the t produces the string s.\
\>", "Text",
 CellChangeTimes->{{3.7640299463226943`*^9, 
  3.764029978737631*^9}},ExpressionUUID->"7568c01e-9592-47de-b4bf-\
58c26c342ad8"],

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{"topologies", " ", "=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"Merge", "[", 
       RowBox[{"#", ",", "Total"}], "]"}], "&"}], "@", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"With", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{"n", "=", " ", 
           RowBox[{"nets", "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], "\[IndentingNewLine]", "}"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"n", "[", "\"\<Connections\>\"", "]"}], ",", 
            RowBox[{"flattenEvo", "[", 
             RowBox[{"init", ",", "n", ",", "t"}], "]"}]}], "}"}], "\[Rule]", 
          "1"}]}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Length", "@", "nets"}]}], "}"}]}], "]"}]}]}], 
   ";"}]}]], "Input",
 CellChangeTimes->{{3.764029680274499*^9, 3.76402976349258*^9}, {
   3.7640298020398602`*^9, 3.764029877986876*^9}, {3.7640299920417504`*^9, 
   3.7640300072482157`*^9}, {3.764030114576092*^9, 3.7640301259251103`*^9}, {
   3.764030158965583*^9, 3.7640301596038046`*^9}, {3.7640302769300117`*^9, 
   3.7640302789502783`*^9}, 3.7640306181940727`*^9},
 CellLabel->"In[80]:=",ExpressionUUID->"7efa6b08-5869-4821-a158-33e4c980faf1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{3.7640773474241533`*^9},
 CellLabel->"In[81]:=",ExpressionUUID->"4d664069-a185-49cf-8a37-6df167072dfd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<topoN4K2.m\>\"", ",", "topologies"}], "]"}]], "Input",
 CellChangeTimes->{{3.764030205396309*^9, 3.7640302264824514`*^9}, {
  3.764030601566919*^9, 3.7640306018198533`*^9}, {3.7640772735450134`*^9, 
  3.764077274053722*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"e834c563-f080-4c35-ba4c-f0e9abb98d9c"],

Cell[BoxData["\<\"topoN4K2.m\"\>"], "Output",
 CellChangeTimes->{3.7640302332996993`*^9, 3.764030363479599*^9, 
  3.7640307547331924`*^9, 3.7640774589252787`*^9, 3.764081989700487*^9, 
  3.7640854729655247`*^9, 3.7647781771004777`*^9, 3.7647799544103603`*^9, 
  3.764780323274127*^9, 3.7652113882153645`*^9},
 CellLabel->"Out[82]=",ExpressionUUID->"4a9e09ec-d4c2-4a7b-b680-fa8ed0c64b89"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "@", 
  RowBox[{"(", 
   RowBox[{"Keys", "@", "topologies"}], ")"}]}]], "Input",
 CellChangeTimes->{{3.7640308634279146`*^9, 3.764030904678824*^9}, 
   3.7640775935466566`*^9},
 CellLabel->"In[83]:=",ExpressionUUID->"3fae2c2c-d8dd-4121-9bbc-e1bdf49aa2f8"],

Cell[BoxData["152148"], "Output",
 CellChangeTimes->{{3.7640308753388534`*^9, 3.764030905340446*^9}, 
   3.7640774590512075`*^9, 3.764077594048371*^9, 3.7640819898054295`*^9, 
   3.7640854730394816`*^9, 3.7647781771774335`*^9, 3.7647799544903145`*^9, 
   3.76478032337212*^9, 3.7652113883153076`*^9},
 CellLabel->"Out[83]=",ExpressionUUID->"02b10f6a-db13-48d8-a366-1ec37f7357c1"]
}, Open  ]],

Cell["Let' s see an example of rules.", "Text",
 CellChangeTimes->{{3.7640777166025214`*^9, 
  3.7640777226770554`*^9}},ExpressionUUID->"39fe1deb-145e-4beb-ab0d-\
f02ab5b19b01"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{"Keys", "@", "topologies"}], ")"}], "[", 
   RowBox[{"[", "1111", "]"}], "]"}], "\[Rule]", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"Values", "@", "topologies"}], ")"}], "[", 
   RowBox[{"[", "1111", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7640777282898526`*^9, 3.764077758070859*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"ef490602-abd0-4a2e-9083-589cffc106a2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", 
      "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", 
      "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", 
      "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", 
      "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", 
      "0", ",", "1", ",", "1", ",", "1", ",", "0"}], "}"}]}], "}"}], 
  "\[Rule]", "1"}]], "Output",
 CellChangeTimes->{3.764077760648387*^9, 3.76408198988938*^9, 
  3.76408547313243*^9, 3.764778177245513*^9, 3.764779954593256*^9, 
  3.7647803234431357`*^9, 3.7652113884212494`*^9},
 CellLabel->"Out[84]=",ExpressionUUID->"8a8099cf-7c9d-4d5f-88bd-d69158a73304"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"rules", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"Merge", "[", 
      RowBox[{"#", ",", "Total"}], "]"}], "&"}], "@", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"With", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{"n", "=", " ", 
          RowBox[{"nets", "[", 
           RowBox[{"[", "i", "]"}], "]"}]}], "\[IndentingNewLine]", "}"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"n", "[", "\"\<Rules\>\"", "]"}], ",", 
           RowBox[{"flattenEvo", "[", 
            RowBox[{"init", ",", "n", ",", "t"}], "]"}]}], "}"}], "\[Rule]", 
         "1"}]}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"i", ",", 
        RowBox[{"Length", "@", "nets"}]}], "}"}]}], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7640303845333824`*^9, 3.764030419235017*^9}, 
   3.764030621254595*^9},
 CellLabel->"In[85]:=",ExpressionUUID->"417958db-1e40-4b87-95d5-ea991f631d4c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<rulesN4K2.m\>\"", ",", "rules"}], "]"}]], "Input",
 CellChangeTimes->{{3.7640304280236444`*^9, 3.7640304339715858`*^9}, {
  3.764030595480014*^9, 3.764030595699876*^9}, {3.764054073011792*^9, 
  3.7640540742081094`*^9}, {3.764077280493788*^9, 3.7640772807582145`*^9}},
 CellLabel->"In[86]:=",ExpressionUUID->"e51c70ec-7bd1-4623-b9d5-051ff08f59d4"],

Cell[BoxData["\<\"rulesN4K2.m\"\>"], "Output",
 CellChangeTimes->{3.7640304989226017`*^9, 3.764030825513548*^9, 
  3.7640775194689264`*^9, 3.764082049057412*^9, 3.764085534084825*^9, 
  3.764778236744943*^9, 3.7647803838712215`*^9, 3.765211448668867*^9},
 CellLabel->"Out[86]=",ExpressionUUID->"a437cb80-a19f-4956-aa12-de651ae39ba6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "@", 
  RowBox[{"(", 
   RowBox[{"Keys", "@", "rules"}], ")"}]}]], "Input",
 CellChangeTimes->{{3.764077548253504*^9, 3.764077561631868*^9}, {
  3.7640775981510305`*^9, 3.764077605373909*^9}},
 CellLabel->"In[87]:=",ExpressionUUID->"41ee8b6a-8de5-4b4a-87ea-1d3658783697"],

Cell[BoxData["39592"], "Output",
 CellChangeTimes->{3.7640776060655136`*^9, 3.7640820491933346`*^9, 
  3.764085534203766*^9, 3.764778236831895*^9, 3.764780383941187*^9, 
  3.765211448837772*^9},
 CellLabel->"Out[87]=",ExpressionUUID->"3b1c55de-4f0a-4d25-b6fe-38da6d494807"]
}, Open  ]],

Cell["Let\[CloseCurlyQuote]s see an example of rules.", "Text",
 CellChangeTimes->{{3.764077617768835*^9, 
  3.76407762598215*^9}},ExpressionUUID->"02676643-3ea4-4341-bd7a-\
01b1e1483587"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{"Keys", "@", "rules"}], ")"}], "[", 
   RowBox[{"[", "1111", "]"}], "]"}], "\[Rule]", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"Values", "@", "rules"}], ")"}], "[", 
   RowBox[{"[", "1111", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7640776285556803`*^9, 3.7640776895528827`*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"309fcac0-18ee-49f7-8981-e173952fe41a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"rNand", ",", "rXor", ",", "rXor", ",", "rAnd"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", 
      "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", 
      "1", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", 
      "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
      "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
      "0", ",", "1", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}], 
  "\[Rule]", "1"}]], "Output",
 CellChangeTimes->{
  3.7640776314240417`*^9, {3.764077673744893*^9, 3.764077690052597*^9}, 
   3.764082049234311*^9, 3.7640855342367554`*^9, 3.764778236881865*^9, 
   3.764780383984225*^9, 3.765211448873751*^9},
 CellLabel->"Out[88]=",ExpressionUUID->"a9133d6c-440d-4e98-b090-1cef7e08095e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Algorithmic Probability", "Section",
 CellChangeTimes->{{3.764077786692527*^9, 
  3.7640777981419935`*^9}},ExpressionUUID->"f24bb9f2-049b-406a-b71b-\
259d05d347ef"],

Cell["\<\
The following function will be a convenient way to consult the previous \
database.\
\>", "Text",
 CellChangeTimes->{{3.7640781808928556`*^9, 
  3.7640781825369143`*^9}},ExpressionUUID->"b250ef09-5381-4d2c-89a9-\
5a3fd2e0fa57"],

Cell[BoxData[
 RowBox[{
  RowBox[{"fRelTop", "[", 
   RowBox[{"s1_", ",", "s2_"}], "]"}], ":=", 
  RowBox[{"With", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"out", " ", "=", " ", 
      RowBox[{"topologies", "[", 
       RowBox[{"{", 
        RowBox[{"s1", ",", "s2"}], "}"}], "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"MissingQ", "@", "out"}], ",", "\[IndentingNewLine]", "0", ",", 
      "\[IndentingNewLine]", "out"}], "\[IndentingNewLine]", "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.76407819514672*^9, 3.764078225263549*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"ba8c6fab-ddec-493c-9215-e901dd19288d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"fRelRul", "[", 
   RowBox[{"s1_", ",", "s2_"}], "]"}], ":=", 
  RowBox[{"With", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"out", " ", "=", " ", 
      RowBox[{"rules", "[", 
       RowBox[{"{", 
        RowBox[{"s1", ",", "s2"}], "}"}], "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"MissingQ", "@", "out"}], ",", "\[IndentingNewLine]", "0", ",", 
      "\[IndentingNewLine]", "out"}], "\[IndentingNewLine]", "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7640782344243217`*^9, 3.764078247634783*^9}},
 CellLabel->"In[90]:=",ExpressionUUID->"d2054ffe-d622-4fcc-a542-5a1d5ed69ab7"],

Cell["For example.", "Text",
 CellChangeTimes->{{3.764078317428956*^9, 
  3.7640783209019737`*^9}},ExpressionUUID->"85c6dd76-a5f7-4d14-b6d2-\
6b117f370d64"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fRelTop", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0",
      ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", 
     ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", 
     ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", 
     ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", 
     ",", "1", ",", "1", ",", "1", ",", "0"}], "}"}]}], "\[IndentingNewLine]",
   "]"}]], "Input",
 CellChangeTimes->{{3.7640782561918983`*^9, 3.7640782609212017`*^9}, {
  3.7640782920714273`*^9, 3.7640783117761803`*^9}},
 CellLabel->"In[91]:=",ExpressionUUID->"25a91f60-7c5a-4f78-bddb-e7fd463b8aed"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.764078322459086*^9, 3.764082049353243*^9, 
  3.7640855342947226`*^9, 3.7647782369368334`*^9, 3.7647803840381384`*^9, 
  3.7652114489557047`*^9},
 CellLabel->"Out[91]=",ExpressionUUID->"35322cd4-3403-404f-8878-ae69eec23595"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fRelTop", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0",
      ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", 
     ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", 
     ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", 
     ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", 
     ",", "1", ",", "1", ",", "1", ",", "0"}], "}"}]}], "\[IndentingNewLine]",
   "]"}]], "Input",
 CellChangeTimes->{{3.7640783336007285`*^9, 3.7640783377593536`*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"1cbfd8df-4a34-44f5-8a0b-f5d3757bee0b"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.7640783383320274`*^9, 3.7640820493942194`*^9, 
  3.7640855343177085`*^9, 3.764778236953824*^9, 3.7647803840591264`*^9, 
  3.765211448993683*^9},
 CellLabel->"Out[92]=",ExpressionUUID->"c5390a5b-9e93-412f-961c-5bdecc202b0b"]
}, Open  ]],

Cell["Lets compute the totals.", "Text",
 CellChangeTimes->{{3.7640783431742644`*^9, 
  3.7640783512226725`*^9}},ExpressionUUID->"930c4618-31d8-4944-b71a-\
b173742502a9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"totalTop", " ", "=", " ", 
  RowBox[{"Total", "@", 
   RowBox[{"Values", "@", "topologies"}]}]}]], "Input",
 CellChangeTimes->{{3.7640778000888815`*^9, 3.7640778001038733`*^9}, {
  3.7640780259264956`*^9, 3.764078085160696*^9}},
 CellLabel->"In[93]:=",ExpressionUUID->"424c1ca4-b69f-4e80-b573-ed4d29717ab0"],

Cell[BoxData["331776"], "Output",
 CellChangeTimes->{3.7640780887436495`*^9, 3.764082049452186*^9, 
  3.7640855343869457`*^9, 3.764778236991802*^9, 3.7647803841131*^9, 
  3.7652114490546484`*^9},
 CellLabel->"Out[93]=",ExpressionUUID->"ba0ac514-b59d-4309-8214-dd37ad9a3462"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"totalrules", " ", "=", " ", 
  RowBox[{"Total", "@", 
   RowBox[{"Values", "@", "rules"}]}]}]], "Input",
 CellChangeTimes->{{3.7640781020568323`*^9, 3.7640781162717295`*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"16bf1d75-5474-4e85-872e-91f3bf0f8fa3"],

Cell[BoxData["331776"], "Output",
 CellChangeTimes->{3.764078118762306*^9, 3.764082049477197*^9, 
  3.764085534407933*^9, 3.7647782370156803`*^9, 3.764780384134088*^9, 
  3.7652114490876293`*^9},
 CellLabel->"Out[94]=",ExpressionUUID->"7e68136a-7d76-4264-a4e6-f4154bca312e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "@", "nets"}]], "Input",
 CellChangeTimes->{{3.7640781390077534`*^9, 3.7640781477677546`*^9}},
 CellLabel->"In[95]:=",ExpressionUUID->"66970489-c7f0-49af-841a-a47ce8e9b445"],

Cell[BoxData["331776"], "Output",
 CellChangeTimes->{3.7640781484183846`*^9, 3.7640820495011635`*^9, 
  3.7640855344289207`*^9, 3.7647782370426645`*^9, 3.7647803841540766`*^9, 
  3.76521144912061*^9},
 CellLabel->"Out[95]=",ExpressionUUID->"1d6679ab-fd2c-4c1c-89f3-2a41bb49ad9a"]
}, Open  ]],

Cell["And now the probabilities.", "Text",
 CellChangeTimes->{{3.764078365701157*^9, 
  3.7640783716067886`*^9}},ExpressionUUID->"e2d694fb-b1c0-43dc-8fee-\
a191dbe7a53a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mTop", "[", 
   RowBox[{"top_", ",", "st_"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"fRelTop", "[", 
    RowBox[{"top", ",", "st"}], "]"}], "/", "totalTop"}]}]], "Input",
 CellChangeTimes->{{3.7640783758503656`*^9, 3.7640784200081673`*^9}, {
  3.76407916987593*^9, 3.764079193760315*^9}},
 CellLabel->"In[96]:=",ExpressionUUID->"343826c5-366e-4361-9511-871ec36f30e9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mRul", "[", 
   RowBox[{"rl_", ",", "st_"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"fRelRul", "[", 
    RowBox[{"rl", ",", "st"}], "]"}], "/", "totalrules"}]}]], "Input",
 CellChangeTimes->{{3.764078431432658*^9, 3.7640784618403053`*^9}, {
  3.764079178019283*^9, 3.764079202232765*^9}},
 CellLabel->"In[97]:=",ExpressionUUID->"c1aaa5f8-6d70-48c2-a7cb-8a7ad7da12ea"],

Cell["For example:", "Text",
 CellChangeTimes->{{3.7640784761981134`*^9, 
  3.764078479582183*^9}},ExpressionUUID->"90ce87f4-4b5f-4b2d-9563-\
126a289ede66"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mTop", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0",
      ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", 
     ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", 
     ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", 
     ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", 
     ",", "1", ",", "1", ",", "1", ",", "0"}], "}"}]}], "\[IndentingNewLine]",
   "]"}]], "Input",
 CellChangeTimes->{{3.7640785188837533`*^9, 3.764078529816517*^9}},
 CellLabel->"In[98]:=",ExpressionUUID->"97ffc7de-e808-443b-915b-9b17f0590b98"],

Cell[BoxData[
 FractionBox["1", "331776"]], "Output",
 CellChangeTimes->{3.764078538686454*^9, 3.7640820495841155`*^9, 
  3.7640855344918847`*^9, 3.7647782371158123`*^9, 3.764780384207049*^9, 
  3.7652114492205524`*^9},
 CellLabel->"Out[98]=",ExpressionUUID->"0648e939-cba4-47cc-ad92-14ff5d385ce8"]
}, Open  ]],

Cell["Let\[CloseCurlyQuote]s define a penalty value for the probability cero \
cases.", "Text",
 CellChangeTimes->{{3.764078560349094*^9, 3.764078564742587*^9}, {
  3.7640788744561763`*^9, 
  3.7640788880074644`*^9}},ExpressionUUID->"e012a191-834c-4dcd-ac1e-\
98c00a7c796e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "@", 
  RowBox[{"(", 
   RowBox[{"-", 
    RowBox[{"Log", "[", 
     RowBox[{"2", ",", 
      RowBox[{"1", "/", "totalTop"}]}], "]"}]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.7640788966914883`*^9, 3.7640789041282516`*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"d3c800ec-faf9-4620-b08e-f2d7e30afc68"],

Cell[BoxData["18.339850002884624`"], "Output",
 CellChangeTimes->{3.764078911215209*^9, 3.764082049619094*^9, 
  3.764085534510874*^9, 3.764778237139798*^9, 3.7647803842290363`*^9, 
  3.7652114492575336`*^9},
 CellLabel->"Out[99]=",ExpressionUUID->"09a7a18c-d59e-44da-93cc-d4578afb719f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"penalty", " ", "=", " ", "20"}]], "Input",
 CellChangeTimes->{{3.76407893362442*^9, 3.7640789514652414`*^9}},
 CellLabel->
  "In[100]:=",ExpressionUUID->"b1dc799d-2273-4451-b241-f40eaccfbdfb"],

Cell[BoxData["20"], "Output",
 CellChangeTimes->{{3.7640789460893073`*^9, 3.7640789519559593`*^9}, 
   3.7640820496450796`*^9, 3.764085534533866*^9, 3.7647782371627846`*^9, 
   3.7647803842540226`*^9, 3.7652114492955103`*^9},
 CellLabel->
  "Out[100]=",ExpressionUUID->"32b7026c-24a4-4e21-b97b-364628883ae2"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Conditional CTM", "Subchapter",
 CellChangeTimes->{{3.764086304798916*^9, 
  3.7640863106992702`*^9}},ExpressionUUID->"8098a272-7985-46ba-95f8-\
8516850d77e7"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"kmTopCTM", "[", 
    RowBox[{"top_", ",", "st_"}], "]"}], "Input"], 
  StyleBox[":=", "Input"], 
  StyleBox["\[IndentingNewLine]", "Input"], 
  RowBox[{
   StyleBox["With", "Input"], 
   StyleBox["[", "Input"], 
   RowBox[{
    StyleBox[
     RowBox[{"{", 
      RowBox[{"p", " ", "=", " ", 
       RowBox[{"mTop", "[", 
        RowBox[{"top", ",", "st"}], "]"}]}], "}"}], "Input"], 
    StyleBox[",", "Input"], 
    StyleBox["\[IndentingNewLine]", "Input"], 
    RowBox[{
     StyleBox["If", "Input"], 
     StyleBox["[", "Input"], 
     StyleBox["\[IndentingNewLine]", "Input"], 
     RowBox[{
      RowBox[{
       StyleBox["p", "Input"], 
       StyleBox["<=", "Input"], "0"}], ",", "penalty", ",", 
      StyleBox["\[IndentingNewLine]", "Input"], 
      StyleBox[" ", "Input"], 
      StyleBox[
       RowBox[{"-", 
        RowBox[{"Log", "[", 
         RowBox[{"2", ",", "p"}], "]"}]}], "Input"]}], 
     StyleBox["\[IndentingNewLine]", "Input"], 
     StyleBox["]", "Input"]}]}], 
   StyleBox["\[IndentingNewLine]", "Input"], 
   StyleBox["]", "Input"]}]}]], "Input",
 CellChangeTimes->{{3.764079135654458*^9, 3.764079157209158*^9}, {
  3.764079222788034*^9, 3.7640792360994377`*^9}},
 CellLabel->
  "In[101]:=",ExpressionUUID->"cb27a455-e3a7-4b9a-9332-b84a172f3d68"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"kmRulCTM", "[", 
    RowBox[{"top_", ",", "st_"}], "]"}], "Input"], 
  StyleBox[":=", "Input"], 
  StyleBox["\[IndentingNewLine]", "Input"], 
  RowBox[{
   StyleBox["With", "Input"], 
   StyleBox["[", "Input"], 
   RowBox[{
    StyleBox[
     RowBox[{"{", 
      RowBox[{"p", " ", "=", " ", 
       RowBox[{"mRul", "[", 
        RowBox[{"top", ",", "st"}], "]"}]}], "}"}], "Input"], 
    StyleBox[",", "Input"], 
    StyleBox["\[IndentingNewLine]", "Input"], 
    RowBox[{
     StyleBox["If", "Input"], 
     StyleBox["[", "Input"], 
     StyleBox["\[IndentingNewLine]", "Input"], 
     RowBox[{
      RowBox[{
       StyleBox["p", "Input"], 
       StyleBox["<=", "Input"], "0"}], ",", "penalty", ",", 
      StyleBox["\[IndentingNewLine]", "Input"], 
      StyleBox[" ", "Input"], 
      StyleBox[
       RowBox[{"-", 
        RowBox[{"Log", "[", 
         RowBox[{"2", ",", "p"}], "]"}]}], "Input"]}], 
     StyleBox["\[IndentingNewLine]", "Input"], 
     StyleBox["]", "Input"]}]}], 
   StyleBox["\[IndentingNewLine]", "Input"], 
   StyleBox["]", "Input"]}]}]], "Input",
 CellChangeTimes->{{3.7640792514206967`*^9, 3.7640792691536503`*^9}},
 CellLabel->
  "In[102]:=",ExpressionUUID->"fcbc9c30-808e-4ae8-9973-8708b4e48be1"],

Cell["For example.", "Text",
 CellChangeTimes->{{3.764079376030677*^9, 
  3.7640793797845364`*^9}},ExpressionUUID->"59ca3276-8cf3-42e9-a6f9-\
d2d1ebe89b47"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "@", 
  RowBox[{"kmTopCTM", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", 
      "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", 
      "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", 
      "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", 
      "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", 
      "0", ",", "1", ",", "1", ",", "1", ",", "0"}], "}"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.764079382300101*^9, 3.764079410436051*^9}},
 CellLabel->
  "In[103]:=",ExpressionUUID->"edf08dd5-b821-4b8c-8722-ce8548086cbf"],

Cell[BoxData["18.339850002884624`"], "Output",
 CellChangeTimes->{{3.764079404543414*^9, 3.7640794109607515`*^9}, 
   3.764082049722186*^9, 3.7640855345868397`*^9, 3.7647782372267485`*^9, 
   3.764780384309995*^9, 3.765211449404449*^9},
 CellLabel->
  "Out[103]=",ExpressionUUID->"4e808371-0015-4cba-a52a-f517a9e0e254"]
}, Open  ]],

Cell[CellGroupData[{

Cell["The Algorithmic Classifier", "Section",
 CellChangeTimes->{{3.764086429702541*^9, 3.7640864396346135`*^9}, {
  3.764088336109536*^9, 
  3.764088341646083*^9}},ExpressionUUID->"62870fda-c908-4c99-8ff7-\
fadb9cc6ad2f"],

Cell["Let us now define the model.", "Text",
 CellChangeTimes->{{3.764086442210969*^9, 
  3.764086454427786*^9}},ExpressionUUID->"5b06c0c9-28ae-43a3-bec5-\
cd4f57bad63a"],

Cell["\<\
The model is composed of either the topology or the rules of each set.\
\>", "Text",
 CellChangeTimes->{{3.764086514554723*^9, 
  3.764086555963935*^9}},ExpressionUUID->"51847f77-af22-4915-9cf1-\
ac47da352c9d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"topoSpace", " ", "=", " ", 
   RowBox[{"PositionsMatrix", "/@", 
    RowBox[{"topo", "[", 
     RowBox[{"n", ",", "k"}], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7640870188517237`*^9, 3.764087035333437*^9}, {
  3.7640871851889396`*^9, 3.764087188181782*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"06d473aa-1625-4c5d-ab54-2f8f53b22bc0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"modelTopo1", " ", "=", " ", 
  RowBox[{"AssociationMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", "}"}], "&"}], ",", 
    RowBox[{"Range", "[", 
     RowBox[{"Length", "@", "classesTopo"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7640870418532104`*^9, 3.7640870498385897`*^9}, {
  3.7640872076315794`*^9, 3.76408721583712*^9}, {3.764087829310102*^9, 
  3.764087870174227*^9}},
 CellLabel->
  "In[105]:=",ExpressionUUID->"90da8d72-f71e-485b-b3cd-54a55eba8f1a"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"1", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"2", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"3", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"4", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"5", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"6", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"7", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"8", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"9", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"10", "\[Rule]", 
    RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.7640870502343636`*^9, 3.764087191311095*^9, 
  3.764087871716647*^9, 3.7647782372797184`*^9, 3.764780384364962*^9, 
  3.7652114494953957`*^9},
 CellLabel->
  "Out[105]=",ExpressionUUID->"67bc8064-e1d9-429c-a729-cc345ab91857"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"ChooseDat", "[", 
   RowBox[{"data_", ",", " ", "dig_"}], "]"}], ":=", 
  RowBox[{"Select", "[", 
   RowBox[{"data", ",", " ", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", "dig"}], ")"}], "&"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{3.7640886048727455`*^9},
 CellLabel->
  "In[106]:=",ExpressionUUID->"6f13fa87-72a2-41da-8bf3-4fdbbeb7ca3a"],

Cell[CellGroupData[{

Cell["The Cost Function", "Subsubsection",
 CellChangeTimes->{{3.764088319338539*^9, 
  3.7640883541338377`*^9}},ExpressionUUID->"de75040a-7a1b-4c51-bc52-\
b1c613258560"],

Cell[BoxData[
 RowBox[{
  RowBox[{"costTop", "[", 
   RowBox[{"c_", ",", "set_"}], " ", "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"N", "@", 
   RowBox[{"Total", "@", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"kmTopCTM", "[", 
       RowBox[{"c", ",", 
        RowBox[{
         RowBox[{"set", "[", 
          RowBox[{"[", "i", "]"}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "\[IndentingNewLine]", ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", 
        RowBox[{"Length", "@", "set"}]}], "}"}]}], "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.7640883671617737`*^9, 3.7640884218155966`*^9}, {
  3.7640884984637327`*^9, 3.7640885733838463`*^9}, {3.7640886525438643`*^9, 
  3.7640886552815943`*^9}, {3.7640887089097357`*^9, 3.7640887233520684`*^9}},
 CellLabel->
  "In[107]:=",ExpressionUUID->"a6df9d63-cb82-4062-b39a-82f328fdbb47"],

Cell["Sanity checks.", "Text",
 CellChangeTimes->{{3.7640887752565017`*^9, 
  3.764088779695236*^9}},ExpressionUUID->"b1fc665b-654c-4c8b-bd1c-\
519eaa05fe02"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"costTop", "[", 
  RowBox[{
   RowBox[{"classesTopo", "[", 
    RowBox[{"[", "1", "]"}], "]"}], ",", 
   RowBox[{"ChooseDat", "[", 
    RowBox[{"TrainingSetTopo", ",", " ", "1"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7640885759277363`*^9, 3.764088638216769*^9}, {
  3.7640886711018124`*^9, 3.7640887194812784`*^9}},
 CellLabel->
  "In[108]:=",ExpressionUUID->"98e7d2e8-d4d8-44bc-a484-e10b5a02b008"],

Cell[BoxData["346.19248754831744`"], "Output",
 CellChangeTimes->{
  3.7640886389769125`*^9, {3.7640886801569633`*^9, 3.7640887249081793`*^9}, 
   3.764778237370672*^9, 3.764780384432928*^9, 3.76521144961133*^9},
 CellLabel->
  "Out[108]=",ExpressionUUID->"3214d5dd-77af-4faf-80ee-85c3ec7ff351"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"costTop", "[", 
  RowBox[{
   RowBox[{"classesTopo", "[", 
    RowBox[{"[", "1", "]"}], "]"}], ",", 
   RowBox[{"ChooseDat", "[", 
    RowBox[{"TrainingSetTopo", ",", " ", "2"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.764088736377261*^9, 3.764088740007755*^9}},
 CellLabel->
  "In[109]:=",ExpressionUUID->"64eab0b3-2232-42a0-8966-5e6c1917b81f"],

Cell[BoxData["385.4345875079327`"], "Output",
 CellChangeTimes->{3.7640887415736856`*^9, 3.76477823740565*^9, 
  3.764780384458914*^9, 3.765211449640314*^9},
 CellLabel->
  "Out[109]=",ExpressionUUID->"e0a3a385-ea35-44da-9622-11c6fb8ba238"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"costTop", "[", 
  RowBox[{
   RowBox[{"classesTopo", "[", 
    RowBox[{"[", "3", "]"}], "]"}], ",", 
   RowBox[{"ChooseDat", "[", 
    RowBox[{"TrainingSetTopo", ",", "3"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.764088750120462*^9, 3.764088758194552*^9}},
 CellLabel->
  "In[110]:=",ExpressionUUID->"6087a157-095e-45f8-9bec-cec166a9ea8c"],

Cell[BoxData["360.7970000576925`"], "Output",
 CellChangeTimes->{{3.7640887531685743`*^9, 3.7640887587882123`*^9}, 
   3.7647782374476275`*^9, 3.7647803844809017`*^9, 3.7652114496682982`*^9},
 CellLabel->
  "Out[110]=",ExpressionUUID->"8f6a1b3b-7021-4a43-9cae-8462096915fd"]
}, Open  ]],

Cell["Now, to train the model.", "Text",
 CellChangeTimes->{{3.7640879695062923`*^9, 
  3.76408797475733*^9}},ExpressionUUID->"a444fa73-ad97-40ce-b86b-\
00047dc66b6b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"modelTopo1", "=", 
  RowBox[{"Association", "@", 
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"With", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{"set", " ", "=", " ", 
         RowBox[{"ChooseDat", "[", 
          RowBox[{"TrainingSetTopo", ",", "i"}], "]"}]}], 
        "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"i", "->", 
        RowBox[{
         RowBox[{"MinimalBy", "[", 
          RowBox[{"topoSpace", ",", " ", 
           RowBox[{
            RowBox[{"costTop", "[", 
             RowBox[{"#", ",", "set"}], "]"}], "&"}]}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], 
     "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Length", "@", "classesTopo"}]}], "}"}]}], 
    "\[IndentingNewLine]", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.764087990957616*^9, 3.764088013246221*^9}, {
  3.764088128463771*^9, 3.764088136692953*^9}, {3.764088259279767*^9, 
  3.7640882850774565`*^9}, {3.764088796952754*^9, 3.764088947307271*^9}, {
  3.764089111669031*^9, 3.7640891440954895`*^9}, {3.764090401798032*^9, 
  3.764090407430295*^9}},
 CellLabel->
  "In[111]:=",ExpressionUUID->"a65a6bb0-973e-499c-9717-64cc84f24305"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"1", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"2", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "4"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"3", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"4", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "4"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"5", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"6", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "4"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"7", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"8", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "4"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"9", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"3", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"10", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "4"}], "}"}]}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.7640889541942225`*^9, {3.764089125065548*^9, 3.7640891499738655`*^9}, 
   3.764090412387134*^9, 3.764778242066783*^9, 3.7647803862693043`*^9, 
   3.765211451667161*^9},
 CellLabel->
  "Out[111]=",ExpressionUUID->"7b7508ec-d237-4462-8526-bbb13f984035"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["classesTopo"], "Input",
 CellChangeTimes->{{3.7640889664557104`*^9, 3.7640889710800753`*^9}},
 CellLabel->
  "In[112]:=",ExpressionUUID->"775d4806-22c2-4fdc-8a85-8b6a83b274e1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "4"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.7640889715431643`*^9, 3.7640904174761972`*^9, 
  3.7647782421307464`*^9, 3.7647803863173065`*^9, 3.7652114517720976`*^9},
 CellLabel->
  "Out[112]=",ExpressionUUID->"89c296bd-24a6-4c66-a5ef-997619feb244"]
}, Open  ]],

Cell["Looks like the training predicted perfectly the classes.", "Text",
 CellChangeTimes->{{3.7640880276628437`*^9, 3.7640880301108913`*^9}, {
  3.7640881392936163`*^9, 3.7640881397029667`*^9}, {3.7640893426480813`*^9, 
  3.7640893576709647`*^9}},ExpressionUUID->"aeb3982d-a8d6-42ff-b3ff-\
a75fb0c7f832"],

Cell["Lets see its accuracy.", "Text",
 CellChangeTimes->{{3.7640893605036163`*^9, 
  3.7640893688717084`*^9}},ExpressionUUID->"58251b11-f59b-4751-bf56-\
0d32ed473c5b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"predTopo", "[", 
   RowBox[{"m_", ",", "x_"}], "]"}], ":=", " ", 
  RowBox[{
   RowBox[{"MinimalBy", "[", 
    RowBox[{
     RowBox[{"Keys", "@", "m"}], ",", " ", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"N", "@", 
        RowBox[{"kmTopCTM", "[", 
         RowBox[{
          RowBox[{"m", "[", "#", "]"}], ",", "x"}], "]"}]}], ")"}], "&"}]}], 
    " ", "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.764089910200782*^9, 3.764089934385242*^9}, {
  3.7640899812569914`*^9, 3.7640900587220864`*^9}, {3.7640901340558987`*^9, 
  3.764090134844092*^9}, {3.764090678365667*^9, 3.7640906857015543`*^9}},
 CellLabel->
  "In[113]:=",ExpressionUUID->"2c36328e-3a4c-4a69-8a51-cf9f1c824ff1"],

Cell["For example.", "Text",
 CellChangeTimes->{{3.764090165528002*^9, 
  3.764090169897374*^9}},ExpressionUUID->"b912a5e3-a242-4234-a675-\
c22430cf3f34"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"predTopo", "[", 
  RowBox[{"modelTopo1", ",", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"Last", "@", "TestSetTopo"}], ")"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.764090064490673*^9, 3.764090087275728*^9}, {
  3.7640901453977003`*^9, 3.7640901458018084`*^9}},
 CellLabel->
  "In[114]:=",ExpressionUUID->"ae456d3f-2236-485c-b208-9cf06bfd5cf3"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{
  3.7640900878703966`*^9, {3.7640901464410553`*^9, 3.7640901534021387`*^9}, 
   3.7640904236591096`*^9, 3.7640906885399494`*^9, 3.764778242167725*^9, 
   3.7647803863552856`*^9, 3.76521145183906*^9},
 CellLabel->
  "Out[114]=",ExpressionUUID->"01846756-9b27-4d98-b055-d063f1ef5321"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"right", " ", "=", " ", "0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"wrong", " ", "=", " ", 
  RowBox[{"List", "[", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Table", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"If", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"predTopo", "[", "\[IndentingNewLine]", 
        RowBox[{"modelTopo1", ",", " ", 
         RowBox[{
          RowBox[{"TestSetTopo", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "\[IndentingNewLine]", "]"}], 
       "\[Equal]", " ", 
       RowBox[{
        RowBox[{"TestSetTopo", "[", 
         RowBox[{"[", "i", "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"right", " ", "=", " ", 
       RowBox[{"right", " ", "+", "1"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"wrong", "=", 
       RowBox[{"Append", "[", 
        RowBox[{"wrong", ",", 
         RowBox[{"TestSetTopo", "[", 
          RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
     "]"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", 
      RowBox[{"Length", "[", "TestSetTopo", "]"}]}], "}"}]}], "]"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.7640907467728815`*^9, 3.7640907859532166`*^9}},
 CellLabel->
  "In[115]:=",ExpressionUUID->"43525100-55af-4a63-870b-fa639795ef5d"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{{3.7640907797292724`*^9, 3.7640907920022*^9}, 
   3.764778242197707*^9, 3.7647803863872747`*^9, 3.765211451877037*^9},
 CellLabel->
  "Out[116]=",ExpressionUUID->"93283621-28d1-47f1-9315-e8e0d827a423"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["right"], "Input",
 CellChangeTimes->{{3.7640907967068787`*^9, 3.764090798946254*^9}},
 CellLabel->
  "In[118]:=",ExpressionUUID->"91bc575f-6fe8-4c84-b303-bc73c3ea4220"],

Cell[BoxData["1448"], "Output",
 CellChangeTimes->{3.764090799581892*^9, 3.7647782422876587`*^9, 
  3.7647803865312533`*^9, 3.765211452264817*^9},
 CellLabel->
  "Out[118]=",ExpressionUUID->"5c4d5ed7-f5d5-4a03-9ced-b96f860f5c3c"]
}, Open  ]],

Cell["And the accuracy is :", "Text",
 CellChangeTimes->{{3.7640908126137133`*^9, 
  3.764090815426363*^9}},ExpressionUUID->"88e29bdd-fc08-4354-980d-\
5cfbdd91441f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"N", "@", "right"}], "/", 
  RowBox[{"Length", "[", "TestSetTopo", "]"}]}]], "Input",
 CellChangeTimes->{{3.764090822581128*^9, 3.7640908318663454`*^9}},
 CellLabel->
  "In[119]:=",ExpressionUUID->"77d4f317-e1e9-4161-86fa-8142274f6ced"],

Cell[BoxData["0.724`"], "Output",
 CellChangeTimes->{3.7640908330083504`*^9, 3.764778242346622*^9, 
  3.7647803865552387`*^9, 3.7652114522967978`*^9},
 CellLabel->
  "Out[119]=",ExpressionUUID->"4a20d8f5-df7f-456a-a2ab-53ff0d768515"]
}, Open  ]],

Cell["0.73 % is a significant improvement.", "Text",
 CellChangeTimes->{{3.764090839155037*^9, 3.7640909054901466`*^9}, {
  3.7647804242767067`*^9, 
  3.7647804260290637`*^9}},ExpressionUUID->"92b51d78-aaad-4570-b98e-\
b284151dea8e"],

Cell["And our mistakes are in:", "Text",
 CellChangeTimes->{{3.7640909683075495`*^9, 
  3.764090974570526*^9}},ExpressionUUID->"28155edc-27c7-45c5-b205-\
75456523a451"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Tally", "@", 
  RowBox[{"Values", "@", "wrong"}]}]], "Input",
 CellChangeTimes->{{3.764090931258165*^9, 3.7640909941162767`*^9}},
 CellLabel->
  "In[120]:=",ExpressionUUID->"9cae42d8-2be0-4f37-a270-e663f383d558"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "26"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "27"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "39"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "69"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "110"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "78"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "72"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "40"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "81"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.764090934134243*^9, 3.7640909553182387`*^9}, 
   3.7640909947775087`*^9, 3.764778242392597*^9, 3.7647803865772266`*^9, 
   3.765211452330778*^9},
 CellLabel->
  "Out[120]=",ExpressionUUID->"95581f3f-4c6b-4d47-8266-21d392533130"]
}, Open  ]],

Cell["Mostly in the class 6.", "Text",
 CellChangeTimes->{{3.7640910110266743`*^9, 3.764091040210251*^9}, 
   3.764780439932375*^9},ExpressionUUID->"5a9c87f7-806e-4dcf-ba56-\
f1f31dc56e61"],

Cell["Let\[CloseCurlyQuote]s do a bit of research on the possible cause of \
this:", "Text",
 CellChangeTimes->{{3.764094802543149*^9, 
  3.764094819648222*^9}},ExpressionUUID->"8c7fee85-480b-47a4-89d1-\
1ed8f736a12f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MaximalBy", "[", 
  RowBox[{
   RowBox[{"Tally", "[", 
    RowBox[{"Keys", "@", "TestSetTopo"}], "]"}], ",", 
   RowBox[{
    RowBox[{"#", "[", 
     RowBox[{"[", "2", "]"}], "]"}], "&"}], ",", "5"}], "]"}]], "Input",
 CellChangeTimes->{{3.764094829896467*^9, 3.7640948912125597`*^9}, {
  3.764094956133394*^9, 3.7640949902825785`*^9}},
 CellLabel->
  "In[121]:=",ExpressionUUID->"e58ece97-c9ae-45bd-a769-c41ebd23fd05"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", 
       "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", 
       "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
       "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
       "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", 
       "0", ",", "1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", "116"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
       "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", 
       "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", 
       "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
       "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
       "1", ",", "0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", "91"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", 
       "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
       "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
       "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", 
       "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", 
       "0", ",", "0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", "51"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
       "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", 
       "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", 
       "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", 
       "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", 
       "0", ",", "0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", "47"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", 
       "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", 
       "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", 
       "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", 
       "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", ",", 
       "1", ",", "0", ",", "1", ",", "0", ",", "1"}], "}"}], ",", "34"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.764094891988759*^9, 3.7640949920286922`*^9, 
  3.7647782424485645`*^9, 3.764780386611207*^9, 3.7652114523777514`*^9},
 CellLabel->
  "Out[121]=",ExpressionUUID->"44fd6631-1ec7-47ea-9efd-542f6c9c9b47"]
}, Open  ]],

Cell["So, the string ", "Text",
 CellChangeTimes->{{3.764095000697654*^9, 
  3.764095004584909*^9}},ExpressionUUID->"b9590e8c-e45a-47b1-b826-\
8b5e4c317cc6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"s", "=", 
  RowBox[{
   RowBox[{"MaximalBy", "[", 
    RowBox[{
     RowBox[{"Tally", "[", 
      RowBox[{"Keys", "@", "TestSetTopo"}], "]"}], ",", 
     RowBox[{
      RowBox[{"#", "[", 
       RowBox[{"[", "2", "]"}], "]"}], "&"}], ",", "5"}], "]"}], "[", 
   RowBox[{"[", 
    RowBox[{"1", ",", "1"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.764095013000366*^9, 3.764095026129464*^9}},
 CellLabel->
  "In[122]:=",ExpressionUUID->"97e6e35d-73e6-43cd-abf5-05edab8fb5c5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", 
   ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", 
   "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", 
   ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", 
   "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", 
   ",", "0", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{3.7640950268875823`*^9, 3.764778242471551*^9, 
  3.764780386633201*^9, 3.765211452413731*^9},
 CellLabel->
  "Out[122]=",ExpressionUUID->"98bb8c83-82d1-44e9-ae7d-f30731b5b147"]
}, Open  ]],

Cell["\<\
Is the most common. Let\[CloseCurlyQuote]s see to which classes it belongs \
too.\
\>", "Text",
 CellChangeTimes->{{3.764095099177781*^9, 
  3.7640951204327335`*^9}},ExpressionUUID->"f94ca52c-5c69-4bb5-93e5-\
66b17c838807"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rep", "=", 
   RowBox[{"Select", "[", 
    RowBox[{"TestSetTopo", ",", " ", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", "s"}], ")"}], "&"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.764095133941166*^9, 3.7640951356174164`*^9}, {
   3.7640953729694633`*^9, 3.764095456997067*^9}, {3.7647805717780285`*^9, 
   3.764780576206068*^9}, 3.7650642489054937`*^9},
 CellLabel->
  "In[123]:=",ExpressionUUID->"12388c65-1080-49ca-b51e-73d82c7b7d96"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Tally", "@", 
  RowBox[{"Values", "@", "rep"}]}]], "Input",
 CellChangeTimes->{{3.7647805841586018`*^9, 3.764780609929656*^9}},
 CellLabel->
  "In[124]:=",ExpressionUUID->"ce66fd09-6822-4a0d-ab08-f3a8720c5ed9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "29"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "21"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "28"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "9"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.7647805985533004`*^9, 3.7647806105173197`*^9}, 
   3.7652114524886866`*^9},
 CellLabel->
  "Out[124]=",ExpressionUUID->"368bc58a-20c6-437e-8e06-fd63adc60ab3"]
}, Open  ]],

Cell["\<\
As we can see, it belongs to several classes therefore is impossible to \
correctly classify every time. However, is most probably it belongs to the \
class 1. Lets see what our classifier tell us:\
\>", "Text",
 CellChangeTimes->{{3.7640954447550507`*^9, 3.764095530465355*^9}, 
   3.764780614935156*^9},ExpressionUUID->"cb511f37-cfc2-44d8-aa1a-\
bbe1322be7f4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"predTopo", "[", 
  RowBox[{"modelTopo1", ",", " ", "s"}], "]"}]], "Input",
 CellChangeTimes->{{3.764095544542321*^9, 3.764095552562745*^9}},
 CellLabel->
  "In[125]:=",ExpressionUUID->"e7f917a6-a3aa-42ea-8445-ededa251c3df"],

Cell[BoxData["4"], "Output",
 CellChangeTimes->{3.7640955535991526`*^9, 3.764778242532516*^9, 
  3.7647803867251596`*^9, 3.7652114525246677`*^9},
 CellLabel->
  "Out[125]=",ExpressionUUID->"6e942a2e-6fe4-4130-8faf-9a693feef621"]
}, Open  ]],

Cell["Yes, as expected, is assigned to class 1!", "Text",
 CellChangeTimes->{{3.764095556746357*^9, 3.764095569400137*^9}, 
   3.7647806174884243`*^9},ExpressionUUID->"1c4ad5be-b6b9-4bce-991a-\
f81d6643769c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["For completeness sake, lets classify the operations too.", \
"Subsubsection",
 CellChangeTimes->{{3.764197458509616*^9, 
  3.764197481188961*^9}},ExpressionUUID->"9458f2f8-d686-4b62-83ed-\
61d52acb44ba"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"modelRule", " ", "=", " ", 
  RowBox[{"AssociationMap", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", "}"}], "&"}], ",", 
    RowBox[{"Range", "[", 
     RowBox[{"Length", "@", "classesRules"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.764197501895496*^9, 3.7641975197447004`*^9}},
 CellLabel->
  "In[126]:=",ExpressionUUID->"fdde1f16-2657-4fc8-827e-1aa410395467"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"1", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"2", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"3", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"4", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"5", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"6", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"7", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"8", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"9", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"10", "\[Rule]", 
    RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.764197521710413*^9, 3.764778242553505*^9, 
  3.764780386750145*^9, 3.765211452562646*^9},
 CellLabel->
  "Out[126]=",ExpressionUUID->"e8bf177a-4ae8-482f-8727-1c6b17c0d79d"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"costRule", "[", 
   RowBox[{"c_", ",", "set_"}], " ", "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"N", "@", 
   RowBox[{"Total", "@", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"kmRulCTM", "[", 
       RowBox[{"c", ",", 
        RowBox[{
         RowBox[{"set", "[", 
          RowBox[{"[", "i", "]"}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "\[IndentingNewLine]", ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", 
        RowBox[{"Length", "@", "set"}]}], "}"}]}], "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.7641975511956506`*^9, 3.764197569005478*^9}},
 CellLabel->
  "In[127]:=",ExpressionUUID->"ed26b493-ad59-45de-b3e1-4e8e63de07ae"],

Cell["Sanity check.", "Text",
 CellChangeTimes->{{3.7641976048615265`*^9, 
  3.7641976100605116`*^9}},ExpressionUUID->"6db6380a-38eb-43a1-8c0a-\
f7a41d13e6c5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"costRule", "[", 
  RowBox[{
   RowBox[{"classesRules", "[", 
    RowBox[{"[", "1", "]"}], "]"}], ",", 
   RowBox[{"ChooseDat", "[", 
    RowBox[{"TrainingSetRules", ",", " ", "1"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.764197592384014*^9, 3.7641976201457424`*^9}},
 CellLabel->
  "In[128]:=",ExpressionUUID->"c549651b-94a7-4dc2-96d4-061150431eea"],

Cell[BoxData["264.64198442602617`"], "Output",
 CellChangeTimes->{3.7641976209456153`*^9, 3.76477824259848*^9, 
  3.7647803867951202`*^9, 3.765211452628609*^9},
 CellLabel->
  "Out[128]=",ExpressionUUID->"cf5a8719-b042-4e11-b4fe-e10c754ed416"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"costRule", "[", 
  RowBox[{
   RowBox[{"classesRules", "[", 
    RowBox[{"[", "1", "]"}], "]"}], ",", 
   RowBox[{"ChooseDat", "[", 
    RowBox[{"TrainingSetRules", ",", " ", "2"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.764197627639883*^9, 3.7641976323100877`*^9}},
 CellLabel->
  "In[129]:=",ExpressionUUID->"ba998b6c-a609-4ddf-a9a4-eb12307bb457"],

Cell[BoxData["276.00929407853033`"], "Output",
 CellChangeTimes->{3.764197632927734*^9, 3.764778242622466*^9, 
  3.764780386817115*^9, 3.7652114526705894`*^9},
 CellLabel->
  "Out[129]=",ExpressionUUID->"27433e0f-d37f-456a-adfa-b437860637d3"]
}, Open  ]],

Cell["Search space.", "Text",
 CellChangeTimes->{{3.764197845094412*^9, 
  3.7641978480211315`*^9}},ExpressionUUID->"5c2cf0d4-95f6-4b6f-bf39-\
92087e1209df"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rulesSpace", " ", "=", 
   RowBox[{"rulesL", "[", 
    RowBox[{"n", ",", "k"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7641978499071884`*^9, 3.764197886338519*^9}},
 CellLabel->
  "In[130]:=",ExpressionUUID->"dae65a97-4c62-4c4c-8782-dce0a6d103a6"],

Cell["Now to train the model.", "Text",
 CellChangeTimes->{{3.764197722749868*^9, 
  3.764197728885163*^9}},ExpressionUUID->"b3f8f539-5b55-4986-a909-\
12eabefcc6b1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"modelRule", "=", 
  RowBox[{"Association", "@", 
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"With", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{"set", " ", "=", " ", 
         RowBox[{"ChooseDat", "[", 
          RowBox[{"TrainingSetRules", ",", "i"}], "]"}]}], 
        "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"i", "->", 
        RowBox[{
         RowBox[{"MinimalBy", "[", 
          RowBox[{"rulesSpace", ",", " ", 
           RowBox[{
            RowBox[{"costRule", "[", 
             RowBox[{"#", ",", "set"}], "]"}], "&"}]}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], 
     "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Length", "@", "classesRules"}]}], "}"}]}], 
    "\[IndentingNewLine]", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.7641977334531393`*^9, 3.7641977691063147`*^9}, 
   3.7641978987291155`*^9},
 CellLabel->
  "In[131]:=",ExpressionUUID->"6229a057-11d8-400c-8db5-90d161c42f23"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"1", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"rOr", ",", "rOr", ",", "rNand", ",", "rOr"}], "}"}]}], ",", 
   RowBox[{"2", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"rAnd", ",", "rOr", ",", "rNand", ",", "rAnd"}], "}"}]}], ",", 
   RowBox[{"3", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"rAnd", ",", "rNand", ",", "rOr", ",", "rAnd"}], "}"}]}], ",", 
   RowBox[{"4", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"rNand", ",", "rAnd", ",", "rAnd", ",", "rNand"}], "}"}]}], ",", 
   RowBox[{"5", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"rNand", ",", "rNand", ",", "rNand", ",", "rAnd"}], "}"}]}], ",", 
   RowBox[{"6", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"rNand", ",", "rNand", ",", "rOr", ",", "rAnd"}], "}"}]}], ",", 
   RowBox[{"7", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"rXor", ",", "rNand", ",", "rXor", ",", "rXor"}], "}"}]}], ",", 
   RowBox[{"8", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"rOr", ",", "rOr", ",", "rAnd", ",", "rNand"}], "}"}]}], ",", 
   RowBox[{"9", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"rXor", ",", "rXor", ",", "rXor", ",", "rNand"}], "}"}]}], ",", 
   RowBox[{"10", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"rAnd", ",", "rNand", ",", "rAnd", ",", "rXor"}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.764197782683297*^9, 3.7641979037191715`*^9, 
  3.7647782433230653`*^9, 3.7647803872924614`*^9, 3.7652114532192736`*^9},
 CellLabel->
  "Out[131]=",ExpressionUUID->"5b7eb0cb-43bc-45c5-a66b-7f445457984a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["classesRules"], "Input",
 CellChangeTimes->{{3.7641977889392343`*^9, 3.7641977943134623`*^9}},
 CellLabel->
  "In[132]:=",ExpressionUUID->"d147ad38-9f3b-4ed1-9ce0-917015b96396"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"rOr", ",", "rOr", ",", "rNand", ",", "rOr"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"rAnd", ",", "rOr", ",", "rNand", ",", "rAnd"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"rAnd", ",", "rNand", ",", "rOr", ",", "rAnd"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"rNand", ",", "rAnd", ",", "rAnd", ",", "rNand"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"rNand", ",", "rNand", ",", "rNand", ",", "rAnd"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"rNand", ",", "rNand", ",", "rOr", ",", "rAnd"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"rXor", ",", "rNand", ",", "rXor", ",", "rXor"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"rOr", ",", "rOr", ",", "rAnd", ",", "rNand"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"rXor", ",", "rXor", ",", "rXor", ",", "rNand"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"rAnd", ",", "rNand", ",", "rAnd", ",", "rXor"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.7641977947823305`*^9, 3.7647782433670397`*^9, 
  3.7647803873554244`*^9, 3.7652114532712407`*^9},
 CellLabel->
  "Out[132]=",ExpressionUUID->"42378596-378f-479b-8559-e7316826c842"]
}, Open  ]],

Cell["The classifier is:", "Text",
 CellChangeTimes->{{3.7641979823894033`*^9, 
  3.764197995565118*^9}},ExpressionUUID->"c40e87f3-a5d6-43ab-9706-\
d19a21d59e3a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"predRule", "[", 
   RowBox[{"m_", ",", "x_"}], "]"}], ":=", " ", 
  RowBox[{
   RowBox[{"MinimalBy", "[", 
    RowBox[{
     RowBox[{"Keys", "@", "m"}], ",", " ", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"N", "@", 
        RowBox[{"kmRulCTM", "[", 
         RowBox[{
          RowBox[{"m", "[", "#", "]"}], ",", "x"}], "]"}]}], ")"}], "&"}]}], 
    " ", "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7641979971463747`*^9, 3.7641980235958652`*^9}},
 CellLabel->
  "In[133]:=",ExpressionUUID->"db94bd98-523f-4df5-ae77-5580efffcff8"],

Cell["We reconstructed the rules.", "Text",
 CellChangeTimes->{{3.764197920536461*^9, 
  3.764197926661278*^9}},ExpressionUUID->"81b0d3ec-203e-4c3c-874b-\
f170bb22ff96"],

Cell["Now lets compute the accuracy.", "Text",
 CellChangeTimes->{{3.7641979339037914`*^9, 
  3.7641979450944815`*^9}},ExpressionUUID->"5dc9403e-6b78-4b8a-8f67-\
16335dd1e98e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"right", " ", "=", " ", "0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"wrong", " ", "=", " ", 
  RowBox[{"List", "[", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Table", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"If", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"predRule", "[", "\[IndentingNewLine]", 
        RowBox[{"modelRule", ",", " ", 
         RowBox[{
          RowBox[{"TestSetRules", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "\[IndentingNewLine]", "]"}], 
       "\[Equal]", " ", 
       RowBox[{
        RowBox[{"TestSetRules", "[", 
         RowBox[{"[", "i", "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"right", " ", "=", " ", 
       RowBox[{"right", " ", "+", "1"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"wrong", "=", 
       RowBox[{"Append", "[", 
        RowBox[{"wrong", ",", 
         RowBox[{"TestSetRules", "[", 
          RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
     "]"}], "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", 
      RowBox[{"Length", "[", "TestSetRules", "]"}]}], "}"}]}], "]"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.7641979592393274`*^9, 3.764197959850577*^9}, {
  3.7641980389173565`*^9, 3.7641980719929543`*^9}},
 CellLabel->
  "In[134]:=",ExpressionUUID->"738311a8-39ac-47c7-bba5-6b5ba171f00c"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.7641980729471483`*^9, 3.764778243426007*^9, 
  3.7647803873924046`*^9, 3.765211453322213*^9},
 CellLabel->
  "Out[135]=",ExpressionUUID->"4fed0c55-575b-4a47-8230-698faee99dc8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["right"], "Input",
 CellChangeTimes->{{3.7641980758275642`*^9, 3.7641980764067025`*^9}},
 CellLabel->
  "In[137]:=",ExpressionUUID->"c813fa07-1af1-411b-922c-d270575e21a5"],

Cell[BoxData["1827"], "Output",
 CellChangeTimes->{3.764198076973059*^9, 3.7647782434729805`*^9, 
  3.7647803875383196`*^9, 3.7652114537029963`*^9},
 CellLabel->
  "Out[137]=",ExpressionUUID->"0e4b9b99-e713-4023-a73b-e74674c2afab"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"N", "@", "right"}], "/", 
  RowBox[{"Length", "[", "TestSetRules", "]"}]}]], "Input",
 CellChangeTimes->{{3.7641980950879035`*^9, 3.7641981038913813`*^9}},
 CellLabel->
  "In[138]:=",ExpressionUUID->"735c190d-d416-49d1-bf20-df7b6cb9ea1e"],

Cell[BoxData["0.9135`"], "Output",
 CellChangeTimes->{3.764198105455427*^9, 3.764778243495967*^9, 
  3.764780387562308*^9, 3.7652114537369766`*^9},
 CellLabel->
  "Out[138]=",ExpressionUUID->"91fc0d01-a690-4912-90e3-3704493f7e85"]
}, Open  ]],

Cell["91.35% accuracy.", "Text",
 CellChangeTimes->{{3.764198109502602*^9, 3.764198116637845*^9}, {
  3.764780627093479*^9, 3.764780633180585*^9}, {3.765225878652665*^9, 
  3.76522588015676*^9}},ExpressionUUID->"81da7a98-1907-4e7c-85c9-\
c616e5013c01"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1113, 604},
WindowMargins->{{338, Automatic}, {Automatic, 218}},
Magnification:>1.35 Inherited,
FrontEndVersion->"11.3 for Microsoft Windows (64-bit) (March 6, 2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 274, 4, 132, "Title",ExpressionUUID->"874a30a0-675c-4794-b28c-8da91f905b05"],
Cell[857, 28, 252, 6, 45, "Text",ExpressionUUID->"be93553c-036d-4d9a-ac7c-8939e3748b93"],
Cell[CellGroupData[{
Cell[1134, 38, 217, 4, 60, "Subsubsection",ExpressionUUID->"27c249d9-0577-42cd-a5a7-d91d85c681e1"],
Cell[1354, 44, 366, 8, 40, "Input",ExpressionUUID->"12370685-ce73-48af-b529-f259abb75f33"],
Cell[1723, 54, 320, 7, 75, "Text",ExpressionUUID->"b57281c0-fe12-4c88-a6c3-c09bb1331545"],
Cell[2046, 63, 724, 19, 69, "Input",ExpressionUUID->"893dee53-b829-44d7-96c7-0ffe75ac63ef"],
Cell[2773, 84, 274, 6, 40, "Input",ExpressionUUID->"353524e0-6de1-47ef-8262-23028959f070"],
Cell[3050, 92, 447, 12, 40, "Input",ExpressionUUID->"50820135-0347-465e-ad22-f52a0f20e451"],
Cell[3500, 106, 1218, 29, 293, "Input",ExpressionUUID->"e6ab4c10-128f-43cf-a5d4-9050a657d818"],
Cell[4721, 137, 491, 13, 40, "Input",ExpressionUUID->"c60cf641-3807-4bc7-9610-a795a85b1c5c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5249, 155, 289, 6, 60, "Subsubsection",ExpressionUUID->"a3fd115f-a968-420d-8dc2-395a9451673a"],
Cell[5541, 163, 161, 3, 45, "Text",ExpressionUUID->"d0ed6a3a-e51a-4d2a-b01e-3c6538783226"],
Cell[5705, 168, 490, 10, 69, "Input",ExpressionUUID->"482f8b41-ece3-4efa-9294-a3cc6c4bc28c"],
Cell[6198, 180, 395, 7, 69, "Input",ExpressionUUID->"dbed5df3-bbbe-46ca-ac06-514e91544e56"],
Cell[6596, 189, 149, 3, 45, "Text",ExpressionUUID->"e4b5a2e8-856d-4c46-bebc-ca0ec5a66cf2"],
Cell[6748, 194, 397, 9, 40, "Input",ExpressionUUID->"8473119c-ed2b-4844-91e8-95c7a79c1c20"],
Cell[7148, 205, 254, 5, 40, "Input",ExpressionUUID->"a685e0eb-089c-4e4c-b524-702b248932a5"],
Cell[7405, 212, 150, 3, 45, "Text",ExpressionUUID->"bb8b1ee6-09a1-4a8e-80a6-d7743ecb876b"],
Cell[7558, 217, 641, 15, 69, "Input",ExpressionUUID->"e721d3fc-42ac-4c8a-b7ed-afee8bb870ed"],
Cell[8202, 234, 542, 14, 69, "Input",ExpressionUUID->"d4762275-2b85-43ba-8c0d-5119bbee79a1"],
Cell[8747, 250, 552, 14, 69, "Input",ExpressionUUID->"1085c377-77d7-4dd7-a430-3b3d5849b375"],
Cell[9302, 266, 497, 13, 69, "Input",ExpressionUUID->"d9f36823-0a5a-47b8-aa6e-ed9af6f2bee6"],
Cell[9802, 281, 152, 3, 45, "Text",ExpressionUUID->"ddc5a747-7545-44b2-9913-16f686e3b08f"],
Cell[9957, 286, 663, 15, 69, "Input",ExpressionUUID->"81083405-bee9-469c-9a61-9328b1027b28"],
Cell[10623, 303, 641, 15, 69, "Input",ExpressionUUID->"c427242b-482a-48b2-aa67-e5448f8e30ea"],
Cell[11267, 320, 612, 15, 69, "Input",ExpressionUUID->"67fec7d2-6b8e-48b3-b88e-856beb5f79db"],
Cell[11882, 337, 612, 15, 69, "Input",ExpressionUUID->"f892614f-68b3-4fd2-8c77-35a5b5b8b7f7"],
Cell[12497, 354, 612, 15, 69, "Input",ExpressionUUID->"cd75814e-3806-40e8-a8aa-212e667b61db"],
Cell[13112, 371, 616, 15, 69, "Input",ExpressionUUID->"93f8da89-dd9f-4f88-98de-60a0d5b0ba05"],
Cell[13731, 388, 612, 15, 69, "Input",ExpressionUUID->"92a7d00a-0d12-4913-b705-8b032e2ea73f"],
Cell[14346, 405, 611, 15, 69, "Input",ExpressionUUID->"370a4d34-ab28-449b-b47b-cb47fbcb45b7"],
Cell[14960, 422, 180, 3, 45, "Text",ExpressionUUID->"33acff72-d131-4c9f-b3bc-7da7e222c280"],
Cell[15143, 427, 1441, 32, 209, "Input",ExpressionUUID->"f537061d-7fcd-4973-b4bb-c77c012d630f"],
Cell[16587, 461, 197, 3, 45, "Text",ExpressionUUID->"33498434-5f2c-442e-b971-748a3e2eb6e4"],
Cell[16787, 466, 1365, 30, 433, "Input",ExpressionUUID->"6a15477e-78ab-4039-ae51-14e7cd3a8373"],
Cell[18155, 498, 238, 6, 45, "Text",ExpressionUUID->"3980091e-d6a0-4d64-9898-f6008ba5af37"],
Cell[18396, 506, 1707, 38, 461, "Input",ExpressionUUID->"b9670c43-fbc2-4e2a-bb60-0d05a96b6cc6"],
Cell[CellGroupData[{
Cell[20128, 548, 302, 5, 40, "Input",ExpressionUUID->"5c6db84e-fd64-4083-8317-06d1b9ca627c"],
Cell[20433, 555, 1603, 39, 74, "Output",ExpressionUUID->"a45884e2-271b-4e71-9522-3344e24340f2"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[22085, 600, 156, 3, 92, "Chapter",ExpressionUUID->"454dd695-6fab-400b-a280-791fc6251cdf"],
Cell[CellGroupData[{
Cell[22266, 607, 262, 4, 40, "Input",ExpressionUUID->"d341443c-fdfa-44c6-92ac-8cfa84c3bcfd"],
Cell[22531, 613, 316, 4, 45, "Output",ExpressionUUID->"af104991-7556-490a-87a2-a55985b48957"]
}, Open  ]],
Cell[CellGroupData[{
Cell[22884, 622, 288, 4, 40, "Input",ExpressionUUID->"2d31d83a-b564-40d0-9f3a-236a98b43198"],
Cell[23175, 628, 340, 5, 45, "Output",ExpressionUUID->"d2fffe5a-2e1b-4f17-b6f6-d7024118d88b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[23552, 638, 173, 3, 40, "Input",ExpressionUUID->"5c69b0b7-33f1-412e-bba4-8ec221b744af"],
Cell[23728, 643, 435, 10, 45, "Output",ExpressionUUID->"779d7ae7-d013-4a71-a8a3-d07315c15b7b"]
}, Open  ]],
Cell[24178, 656, 163, 3, 45, "Text",ExpressionUUID->"36d95153-24b9-4563-a69c-b1c7a16f8c8e"],
Cell[24344, 661, 838, 20, 153, "Input",ExpressionUUID->"42b3b650-491f-4257-bfea-450c924e0aa2"],
Cell[25185, 683, 262, 6, 45, "Text",ExpressionUUID->"c2721bac-a1f9-43e9-afe9-f4bf1401600c"],
Cell[25450, 691, 326, 8, 75, "Text",ExpressionUUID->"f8ca8c3b-cb0b-4a7d-8a95-9bb87f96c07a"],
Cell[25779, 701, 711, 16, 40, "Input",ExpressionUUID->"c969ae58-780f-4a9a-a2c9-6b357fcdc317"],
Cell[CellGroupData[{
Cell[26515, 721, 1148, 25, 97, "Input",ExpressionUUID->"4b18907b-3dd2-402d-bf32-e572ea4c6ec9"],
Cell[27666, 748, 3430, 109, 158, "Output",ExpressionUUID->"bf0c0704-4fd1-4756-982f-57f77352f7c4"],
Cell[31099, 859, 1440, 30, 130, "Output",ExpressionUUID->"8b4c973e-2878-4063-894b-809d37b870ed"]
}, Open  ]],
Cell[CellGroupData[{
Cell[32576, 894, 169, 3, 60, "Subsubsection",ExpressionUUID->"58abda7c-0f70-4bf5-a446-af6ab5c25fae"],
Cell[32748, 899, 6165, 136, 1301, "Input",ExpressionUUID->"ce99026e-2ba9-4ff6-ac87-b8ebc2cf5ae8"],
Cell[CellGroupData[{
Cell[38938, 1039, 217, 3, 40, "Input",ExpressionUUID->"2600a2ef-976d-44e3-a31e-7a520103ec3a"],
Cell[39158, 1044, 245, 3, 45, "Output",ExpressionUUID->"9e6c75e8-9c08-4ec0-ba6e-58238a70e30f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[39452, 1053, 168, 3, 60, "Subsubsection",ExpressionUUID->"95c7f8b8-b7f0-4226-863e-b84be8d6c63f"],
Cell[39623, 1058, 5838, 132, 1301, "Input",ExpressionUUID->"cc81dbdc-e0dc-4cb7-88d7-53da67a895ee"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[45510, 1196, 185, 3, 92, "Chapter",ExpressionUUID->"2b6c00b2-213c-4ed8-bf63-30f517089c18"],
Cell[45698, 1201, 272, 5, 45, "Text",ExpressionUUID->"0d501811-8ed8-4047-a37a-3d6d1b437fd0"],
Cell[CellGroupData[{
Cell[45995, 1210, 160, 3, 60, "Subsubsection",ExpressionUUID->"35c04c40-6acc-4173-b3ed-f22997521ca0"],
Cell[CellGroupData[{
Cell[46180, 1217, 261, 4, 40, "Input",ExpressionUUID->"64efad9e-a3ef-4e8d-bace-5ec7bb811d7d"],
Cell[46444, 1223, 84625, 1518, 95, "Output",ExpressionUUID->"55756e32-964c-46dd-84c1-9c8fd0e1c28d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[131106, 2746, 297, 5, 40, "Input",ExpressionUUID->"48e369a0-1bb0-4ea2-ab3d-788f7d81a61d"],
Cell[131406, 2753, 296, 4, 45, "Output",ExpressionUUID->"091b3fe3-8875-43b9-979d-a8f1bebd164c"]
}, Open  ]],
Cell[131717, 2760, 274, 4, 45, "Text",ExpressionUUID->"1d32ca9d-ff59-4eb6-8290-a063269f2922"]
}, Open  ]],
Cell[CellGroupData[{
Cell[132028, 2769, 161, 3, 60, "Subsubsection",ExpressionUUID->"599e589b-df2a-4276-a88a-8a9b0bcb7971"],
Cell[CellGroupData[{
Cell[132214, 2776, 262, 4, 40, "Input",ExpressionUUID->"c4291d81-9393-424c-910a-3dc171706a1a"],
Cell[132479, 2782, 85154, 1522, 95, "Output",ExpressionUUID->"6018a0e6-db89-445a-b1f3-922b62847957"]
}, Open  ]],
Cell[CellGroupData[{
Cell[217670, 4309, 355, 6, 40, "Input",ExpressionUUID->"dcc66170-131c-4276-a187-3b35c4b70eca"],
Cell[218028, 4317, 297, 4, 45, "Output",ExpressionUUID->"aee24221-f708-42d5-b8d0-6461bad3cc46"]
}, Open  ]],
Cell[218340, 4324, 239, 4, 45, "Text",ExpressionUUID->"ce535471-d18b-4e96-99c3-878b72f03151"]
}, Open  ]],
Cell[CellGroupData[{
Cell[218616, 4333, 174, 3, 72, "Subsection",ExpressionUUID->"243e1523-b0e5-481a-945c-2b8a225376c2"],
Cell[CellGroupData[{
Cell[218815, 4340, 247, 4, 40, "Input",ExpressionUUID->"7f3426ac-6b81-43f1-af1c-48c10d7d896f"],
Cell[219065, 4346, 346, 5, 45, "Output",ExpressionUUID->"66c421c9-89d2-4005-a82d-fab469d72589"]
}, Open  ]],
Cell[CellGroupData[{
Cell[219448, 4356, 292, 6, 40, "Input",ExpressionUUID->"a65970ee-29d5-48e9-a73e-b23998705d50"],
Cell[219743, 4364, 322, 4, 45, "Output",ExpressionUUID->"00cfc199-5d39-48db-8eb4-012927dab1b7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[220102, 4373, 1187, 26, 181, "Input",ExpressionUUID->"6f408420-191d-43a1-a319-6a821875fccb"],
Cell[221292, 4401, 29263, 604, 123, "Output",ExpressionUUID->"3aff31e0-9f9c-445d-8526-36bbe9116432"]
}, Open  ]],
Cell[CellGroupData[{
Cell[250592, 5010, 690, 15, 153, "Input",ExpressionUUID->"629502f8-de08-46b5-95f7-ecd6ea7e0f39"],
Cell[251285, 5027, 28273, 578, 123, "Output",ExpressionUUID->"6880fe14-513d-4ab0-a7d0-7d55a73e77fb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[279595, 5610, 321, 6, 40, "Input",ExpressionUUID->"5d65f59a-d255-48a6-8c08-4d9b43c8b086"],
Cell[279919, 5618, 277, 4, 45, "Output",ExpressionUUID->"653759d1-15e3-49aa-ad4a-d83786473060"]
}, Open  ]],
Cell[280211, 5625, 295, 4, 45, "Text",ExpressionUUID->"e1201433-9200-4fd9-a69f-f8e608309d0c"],
Cell[CellGroupData[{
Cell[280531, 5633, 200, 3, 60, "Subsubsection",ExpressionUUID->"296e8c5c-f93f-4c80-9c2d-f17553fa091a"],
Cell[CellGroupData[{
Cell[280756, 5640, 1054, 24, 181, "Input",ExpressionUUID->"8247a3ba-2e04-4d62-aeff-e8b9ad9b8d97"],
Cell[281813, 5666, 29163, 602, 123, "Output",ExpressionUUID->"78de8764-7acf-4723-abf6-2f1c7384884c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[311013, 6273, 590, 13, 153, "Input",ExpressionUUID->"72c48ca0-fea6-40bd-8ef6-deb1e8132828"],
Cell[311606, 6288, 28323, 578, 123, "Output",ExpressionUUID->"e865deb5-3168-4c6f-b359-1eafba7bf6d5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[339966, 6871, 306, 6, 40, "Input",ExpressionUUID->"8951adf7-b76d-4e92-a833-a03314715098"],
Cell[340275, 6879, 253, 3, 45, "Output",ExpressionUUID->"4a27bdcf-3e2b-4b0b-8d80-4f7c5b421fe8"]
}, Open  ]],
Cell[340543, 6885, 193, 3, 45, "Text",ExpressionUUID->"acc1f4fb-4054-4a27-9ac0-592b57eac0eb"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[340797, 6895, 234, 4, 92, "Chapter",ExpressionUUID->"c3450fb5-febf-4eec-a8d4-c0545a8da476"],
Cell[341034, 6901, 268, 6, 45, "Text",ExpressionUUID->"c68154e3-7773-46d5-81da-1aacaf695b02"],
Cell[341305, 6909, 401, 10, 40, "Input",ExpressionUUID->"2062cb6f-fe6a-4c73-ae2b-2b7700ee870b"],
Cell[341709, 6921, 302, 9, 45, "Text",ExpressionUUID->"48d068e0-f005-4160-8ce5-074367bcccc2"],
Cell[CellGroupData[{
Cell[342036, 6934, 292, 5, 40, "Input",ExpressionUUID->"c7aac144-a042-4ed9-90a7-9fca1fcbe75f"],
Cell[342331, 6941, 861, 17, 45, "Output",ExpressionUUID->"4144151f-311a-4a92-8620-624a96fe37e4"]
}, Open  ]],
Cell[343207, 6961, 700, 17, 40, "Input",ExpressionUUID->"7b8569a8-1683-4adf-a24c-d87f3a6f0541"],
Cell[343910, 6980, 747, 14, 40, "Input",ExpressionUUID->"2e66c160-2611-4d96-b3b1-4db02c426778"],
Cell[344660, 6996, 368, 9, 40, "Input",ExpressionUUID->"03dae856-1004-4785-b160-ebc9ac59d647"],
Cell[345031, 7007, 214, 5, 45, "Text",ExpressionUUID->"69e3edf1-1af8-42f5-a7d6-76a4ec1acbff"],
Cell[CellGroupData[{
Cell[345270, 7016, 258, 5, 40, "Input",ExpressionUUID->"d49ec25c-0e57-46d3-abc4-9fbd576cf7a1"],
Cell[345531, 7023, 459, 6, 45, "Output",ExpressionUUID->"dad81f11-217e-4484-babc-e99ee22267cc"]
}, Open  ]],
Cell[346005, 7032, 223, 4, 45, "Text",ExpressionUUID->"8667a448-b6d6-4574-ab7a-5579e84592d1"],
Cell[346231, 7038, 857, 19, 181, "Input",ExpressionUUID->"6314c479-d9b3-48a8-8e1e-43ae718c886b"],
Cell[347091, 7059, 572, 11, 40, "Input",ExpressionUUID->"5d693433-b3c6-4d3c-bb62-d1b427713691"],
Cell[347666, 7072, 215, 3, 40, "Input",ExpressionUUID->"d00dff4d-d610-48b5-8a5d-16a5f51eb961"],
Cell[347884, 7077, 2003, 45, 265, "Input",ExpressionUUID->"4c410711-6c6f-4b36-b3be-1ab903e52363"],
Cell[CellGroupData[{
Cell[349912, 7126, 607, 10, 40, "Input",ExpressionUUID->"3ea3d554-ec6d-4f0c-8cf7-a8072d7d870a"],
Cell[350522, 7138, 799, 11, 45, "Output",ExpressionUUID->"3f6a6bcc-b2ac-48f0-ab69-c2619c00e9fe"]
}, Open  ]],
Cell[CellGroupData[{
Cell[351358, 7154, 450, 8, 40, "Input",ExpressionUUID->"7975e285-640a-46ac-8c45-83881083574f"],
Cell[351811, 7164, 1139, 25, 45, "Output",ExpressionUUID->"c2689fc4-322c-430e-b052-64793f724e4c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[352987, 7194, 273, 5, 40, "Input",ExpressionUUID->"4eb13741-fae0-42b6-9588-63735cb6bad6"],
Cell[353263, 7201, 478, 8, 45, "Output",ExpressionUUID->"59f55d0d-5f7b-4db1-b605-f0660c4d7f66"]
}, Open  ]],
Cell[CellGroupData[{
Cell[353778, 7214, 274, 4, 40, "Input",ExpressionUUID->"520be078-6689-4d36-a371-e7908a9a6ea6"],
Cell[354055, 7220, 710, 16, 45, "Output",ExpressionUUID->"559ee314-31f1-4fca-a032-6e07bfd75f7a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[354802, 7241, 368, 7, 40, "Input",ExpressionUUID->"e84ec925-51a6-437a-9b06-a07d1c19907b"],
Cell[355173, 7250, 1009, 23, 45, "Output",ExpressionUUID->"d15a9de3-e9b4-4906-afe6-7045328f176c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[356219, 7278, 276, 5, 40, "Input",ExpressionUUID->"de9ad868-0481-4c2e-b771-0e9e05ff8350"],
Cell[356498, 7285, 924, 15, 74, "Output",ExpressionUUID->"aa15b95e-915b-4110-b135-020d8178daa9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[357459, 7305, 300, 5, 40, "Input",ExpressionUUID->"15054bc5-abe0-4b68-9973-e879a1cec5bf"],
Cell[357762, 7312, 878, 14, 74, "Output",ExpressionUUID->"5ec37a4b-82f1-4b7e-afc6-c5346723946b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[358677, 7331, 184, 3, 60, "Subsubsection",ExpressionUUID->"6b70e91b-131d-48f5-bd6e-7e5213a7fa39"],
Cell[358864, 7336, 193, 3, 45, "Text",ExpressionUUID->"246ee445-607c-4def-a7dc-64f851e57e1f"],
Cell[359060, 7341, 346, 7, 40, "Input",ExpressionUUID->"7894bbc3-d997-4457-a846-d01526b0fb69"],
Cell[359409, 7350, 286, 6, 40, "Input",ExpressionUUID->"b4f954f9-f3e4-4aaf-aaac-f2559b8bc6b0"],
Cell[359698, 7358, 221, 5, 45, "Text",ExpressionUUID->"7568c01e-9592-47de-b4bf-58c26c342ad8"],
Cell[359922, 7365, 1474, 34, 265, "Input",ExpressionUUID->"7efa6b08-5869-4821-a158-33e4c980faf1"],
Cell[361399, 7401, 246, 5, 40, "Input",ExpressionUUID->"4d664069-a185-49cf-8a37-6df167072dfd"],
Cell[CellGroupData[{
Cell[361670, 7410, 357, 6, 40, "Input",ExpressionUUID->"e834c563-f080-4c35-ba4c-f0e9abb98d9c"],
Cell[362030, 7418, 387, 5, 45, "Output",ExpressionUUID->"4a9e09ec-d4c2-4a7b-b680-fa8ed0c64b89"]
}, Open  ]],
Cell[CellGroupData[{
Cell[362454, 7428, 288, 6, 40, "Input",ExpressionUUID->"3fae2c2c-d8dd-4121-9bbc-e1bdf49aa2f8"],
Cell[362745, 7436, 379, 5, 45, "Output",ExpressionUUID->"02b10f6a-db13-48d8-a366-1ec37f7357c1"]
}, Open  ]],
Cell[363139, 7444, 177, 3, 45, "Text",ExpressionUUID->"39fe1deb-145e-4beb-ab0d-f02ab5b19b01"],
Cell[CellGroupData[{
Cell[363341, 7451, 436, 11, 40, "Input",ExpressionUUID->"ef490602-abd0-4a2e-9083-589cffc106a2"],
Cell[363780, 7464, 1130, 26, 74, "Output",ExpressionUUID->"8a8099cf-7c9d-4d5f-88bd-d69158a73304"]
}, Open  ]],
Cell[364925, 7493, 1156, 29, 265, "Input",ExpressionUUID->"417958db-1e40-4b87-95d5-ea991f631d4c"],
Cell[CellGroupData[{
Cell[366106, 7526, 401, 6, 40, "Input",ExpressionUUID->"e51c70ec-7bd1-4623-b9d5-051ff08f59d4"],
Cell[366510, 7534, 333, 4, 45, "Output",ExpressionUUID->"a437cb80-a19f-4956-aa12-de651ae39ba6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[366880, 7543, 304, 6, 40, "Input",ExpressionUUID->"41ee8b6a-8de5-4b4a-87ea-1d3658783697"],
Cell[367187, 7551, 273, 4, 45, "Output",ExpressionUUID->"3b1c55de-4f0a-4d25-b6fe-38da6d494807"]
}, Open  ]],
Cell[367475, 7558, 188, 3, 45, "Text",ExpressionUUID->"02676643-3ea4-4341-bd7a-01b1e1483587"],
Cell[CellGroupData[{
Cell[367688, 7565, 428, 11, 40, "Input",ExpressionUUID->"309fcac0-18ee-49f7-8981-e173952fe41a"],
Cell[368119, 7578, 954, 19, 74, "Output",ExpressionUUID->"a9133d6c-440d-4e98-b090-1cef7e08095e"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[369122, 7603, 170, 3, 88, "Section",ExpressionUUID->"f24bb9f2-049b-406a-b71b-259d05d347ef"],
Cell[369295, 7608, 237, 6, 45, "Text",ExpressionUUID->"b250ef09-5381-4d2c-89a9-5a3fd2e0fa57"],
Cell[369535, 7616, 733, 18, 209, "Input",ExpressionUUID->"ba8c6fab-ddec-493c-9215-e901dd19288d"],
Cell[370271, 7636, 731, 18, 209, "Input",ExpressionUUID->"d2054ffe-d622-4fcc-a542-5a1d5ed69ab7"],
Cell[371005, 7656, 156, 3, 45, "Text",ExpressionUUID->"85c6dd76-a5f7-4d14-b6d2-6b117f370d64"],
Cell[CellGroupData[{
Cell[371186, 7663, 1102, 24, 153, "Input",ExpressionUUID->"25a91f60-7c5a-4f78-bddb-e7fd463b8aed"],
Cell[372291, 7689, 273, 4, 45, "Output",ExpressionUUID->"35322cd4-3403-404f-8878-ae69eec23595"]
}, Open  ]],
Cell[CellGroupData[{
Cell[372601, 7698, 1049, 23, 153, "Input",ExpressionUUID->"1cbfd8df-4a34-44f5-8a0b-f5d3757bee0b"],
Cell[373653, 7723, 273, 4, 45, "Output",ExpressionUUID->"c5390a5b-9e93-412f-961c-5bdecc202b0b"]
}, Open  ]],
Cell[373941, 7730, 170, 3, 45, "Text",ExpressionUUID->"930c4618-31d8-4944-b71a-b173742502a9"],
Cell[CellGroupData[{
Cell[374136, 7737, 331, 6, 40, "Input",ExpressionUUID->"424c1ca4-b69f-4e80-b573-ed4d29717ab0"],
Cell[374470, 7745, 274, 4, 45, "Output",ExpressionUUID->"ba0ac514-b59d-4309-8214-dd37ad9a3462"]
}, Open  ]],
Cell[CellGroupData[{
Cell[374781, 7754, 277, 5, 40, "Input",ExpressionUUID->"16bf1d75-5474-4e85-872e-91f3bf0f8fa3"],
Cell[375061, 7761, 274, 4, 45, "Output",ExpressionUUID->"7e68136a-7d76-4264-a4e6-f4154bca312e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[375372, 7770, 206, 3, 40, "Input",ExpressionUUID->"66970489-c7f0-49af-841a-a47ce8e9b445"],
Cell[375581, 7775, 279, 4, 45, "Output",ExpressionUUID->"1d6679ab-fd2c-4c1c-89f3-2a41bb49ad9a"]
}, Open  ]],
Cell[375875, 7782, 170, 3, 45, "Text",ExpressionUUID->"e2d694fb-b1c0-43dc-8fee-a191dbe7a53a"],
Cell[376048, 7787, 423, 9, 69, "Input",ExpressionUUID->"343826c5-366e-4361-9511-871ec36f30e9"],
Cell[376474, 7798, 422, 9, 69, "Input",ExpressionUUID->"c1aaa5f8-6d70-48c2-a7cb-8a7ad7da12ea"],
Cell[376899, 7809, 156, 3, 45, "Text",ExpressionUUID->"90ce87f4-4b5f-4b2d-9563-126a289ede66"],
Cell[CellGroupData[{
Cell[377080, 7816, 1044, 23, 153, "Input",ExpressionUUID->"97ffc7de-e808-443b-915b-9b17f0590b98"],
Cell[378127, 7841, 298, 5, 70, "Output",ExpressionUUID->"0648e939-cba4-47cc-ad92-14ff5d385ce8"]
}, Open  ]],
Cell[378440, 7849, 274, 5, 45, "Text",ExpressionUUID->"e012a191-834c-4dcd-ac1e-98c00a7c796e"],
Cell[CellGroupData[{
Cell[378739, 7858, 332, 8, 40, "Input",ExpressionUUID->"d3c800ec-faf9-4620-b08e-f2d7e30afc68"],
Cell[379074, 7868, 287, 4, 45, "Output",ExpressionUUID->"09a7a18c-d59e-44da-93cc-d4578afb719f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[379398, 7877, 216, 4, 40, "Input",ExpressionUUID->"b1dc799d-2273-4451-b241-f40eaccfbdfb"],
Cell[379617, 7883, 308, 5, 45, "Output",ExpressionUUID->"32b7026c-24a4-4e21-b97b-364628883ae2"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[379974, 7894, 165, 3, 85, "Subchapter",ExpressionUUID->"8098a272-7985-46ba-95f8-8516850d77e7"],
Cell[380142, 7899, 1322, 39, 209, "Input",ExpressionUUID->"cb27a455-e3a7-4b9a-9332-b84a172f3d68"],
Cell[381467, 7940, 1275, 38, 209, "Input",ExpressionUUID->"fcbc9c30-808e-4ae8-9973-8708b4e48be1"],
Cell[382745, 7980, 156, 3, 45, "Text",ExpressionUUID->"59ca3276-8cf3-42e9-a6f9-d2d1ebe89b47"],
Cell[CellGroupData[{
Cell[382926, 7987, 1093, 25, 153, "Input",ExpressionUUID->"edf08dd5-b821-4b8c-8722-ce8548086cbf"],
Cell[384022, 8014, 319, 5, 45, "Output",ExpressionUUID->"4e808371-0015-4cba-a52a-f517a9e0e254"]
}, Open  ]],
Cell[CellGroupData[{
Cell[384378, 8024, 222, 4, 88, "Section",ExpressionUUID->"62870fda-c908-4c99-8ff7-fadb9cc6ad2f"],
Cell[384603, 8030, 170, 3, 45, "Text",ExpressionUUID->"5b06c0c9-28ae-43a3-bec5-cd4f57bad63a"],
Cell[384776, 8035, 220, 5, 45, "Text",ExpressionUUID->"51847f77-af22-4915-9cf1-ac47da352c9d"],
Cell[384999, 8042, 385, 9, 40, "Input",ExpressionUUID->"06d473aa-1625-4c5d-ab54-2f8f53b22bc0"],
Cell[CellGroupData[{
Cell[385409, 8055, 501, 12, 40, "Input",ExpressionUUID->"90da8d72-f71e-485b-b3cd-54a55eba8f1a"],
Cell[385913, 8069, 936, 27, 45, "Output",ExpressionUUID->"67bc8064-e1d9-429c-a729-cc345ab91857"]
}, Open  ]],
Cell[386864, 8099, 462, 14, 40, "Input",ExpressionUUID->"6f13fa87-72a2-41da-8bf3-4fdbbeb7ca3a"],
Cell[CellGroupData[{
Cell[387351, 8117, 170, 3, 60, "Subsubsection",ExpressionUUID->"de75040a-7a1b-4c51-bc52-b1c613258560"],
Cell[387524, 8122, 896, 21, 125, "Input",ExpressionUUID->"a6df9d63-cb82-4062-b39a-82f328fdbb47"],
Cell[388423, 8145, 158, 3, 45, "Text",ExpressionUUID->"b1fc665b-654c-4c8b-bd1c-519eaa05fe02"],
Cell[CellGroupData[{
Cell[388606, 8152, 432, 10, 40, "Input",ExpressionUUID->"98e7d2e8-d4d8-44bc-a484-e10b5a02b008"],
Cell[389041, 8164, 295, 5, 45, "Output",ExpressionUUID->"3214d5dd-77af-4faf-80ee-85c3ec7ff351"]
}, Open  ]],
Cell[CellGroupData[{
Cell[389373, 8174, 377, 9, 40, "Input",ExpressionUUID->"64eab0b3-2232-42a0-8966-5e6c1917b81f"],
Cell[389753, 8185, 240, 4, 45, "Output",ExpressionUUID->"e0a3a385-ea35-44da-9622-11c6fb8ba238"]
}, Open  ]],
Cell[CellGroupData[{
Cell[390030, 8194, 372, 9, 40, "Input",ExpressionUUID->"6087a157-095e-45f8-9bec-cec166a9ea8c"],
Cell[390405, 8205, 274, 4, 45, "Output",ExpressionUUID->"8f6a1b3b-7021-4a43-9cae-8462096915fd"]
}, Open  ]],
Cell[390694, 8212, 167, 3, 45, "Text",ExpressionUUID->"a444fa73-ad97-40ce-b86b-00047dc66b6b"],
Cell[CellGroupData[{
Cell[390886, 8219, 1349, 31, 265, "Input",ExpressionUUID->"a65a6bb0-973e-499c-9717-64cc84f24305"],
Cell[392238, 8252, 3678, 119, 158, "Output",ExpressionUUID->"7b7508ec-d237-4462-8526-bbb13f984035"]
}, Open  ]],
Cell[CellGroupData[{
Cell[395953, 8376, 190, 3, 40, "Input",ExpressionUUID->"775d4806-22c2-4fdc-8a85-8b6a83b274e1"],
Cell[396146, 8381, 3189, 106, 158, "Output",ExpressionUUID->"89c296bd-24a6-4c66-a5ef-997619feb244"]
}, Open  ]],
Cell[399350, 8490, 305, 4, 45, "Text",ExpressionUUID->"aeb3982d-a8d6-42ff-b3ff-a75fb0c7f832"],
Cell[399658, 8496, 168, 3, 45, "Text",ExpressionUUID->"58251b11-f59b-4751-bf56-0d32ed473c5b"],
Cell[399829, 8501, 758, 20, 40, "Input",ExpressionUUID->"2c36328e-3a4c-4a69-8a51-cf9f1c824ff1"],
Cell[400590, 8523, 154, 3, 45, "Text",ExpressionUUID->"b912a5e3-a242-4234-a675-c22430cf3f34"],
Cell[CellGroupData[{
Cell[400769, 8530, 418, 10, 40, "Input",ExpressionUUID->"ae456d3f-2236-485c-b208-9cf06bfd5cf3"],
Cell[401190, 8542, 331, 6, 45, "Output",ExpressionUUID->"01846756-9b27-4d98-b055-d063f1ef5321"]
}, Open  ]],
Cell[CellGroupData[{
Cell[401558, 8553, 1451, 36, 321, "Input",ExpressionUUID->"43525100-55af-4a63-870b-fa639795ef5d"],
Cell[403012, 8591, 266, 5, 45, "Output",ExpressionUUID->"93283621-28d1-47f1-9315-e8e0d827a423"]
}, Open  ]],
Cell[CellGroupData[{
Cell[403315, 8601, 182, 3, 40, "Input",ExpressionUUID->"91bc575f-6fe8-4c84-b303-bc73c3ea4220"],
Cell[403500, 8606, 229, 4, 45, "Output",ExpressionUUID->"5c4d5ed7-f5d5-4a03-9ced-b96f860f5c3c"]
}, Open  ]],
Cell[403744, 8613, 165, 3, 45, "Text",ExpressionUUID->"88e29bdd-fc08-4354-980d-5cfbdd91441f"],
Cell[CellGroupData[{
Cell[403934, 8620, 270, 6, 40, "Input",ExpressionUUID->"77d4f317-e1e9-4161-86fa-8142274f6ced"],
Cell[404207, 8628, 233, 4, 45, "Output",ExpressionUUID->"4a20d8f5-df7f-456a-a2ab-53ff0d768515"]
}, Open  ]],
Cell[404455, 8635, 233, 4, 45, "Text",ExpressionUUID->"92b51d78-aaad-4570-b98e-b284151dea8e"],
Cell[404691, 8641, 168, 3, 45, "Text",ExpressionUUID->"28155edc-27c7-45c5-b205-75456523a451"],
Cell[CellGroupData[{
Cell[404884, 8648, 236, 5, 40, "Input",ExpressionUUID->"9cae42d8-2be0-4f37-a270-e663f383d558"],
Cell[405123, 8655, 906, 27, 45, "Output",ExpressionUUID->"95581f3f-4c6b-4d47-8266-21d392533130"]
}, Open  ]],
Cell[406044, 8685, 189, 3, 45, "Text",ExpressionUUID->"5a9c87f7-806e-4dcf-ba56-f1f31dc56e61"],
Cell[406236, 8690, 218, 4, 45, "Text",ExpressionUUID->"8c7fee85-480b-47a4-89d1-1ed8f736a12f"],
Cell[CellGroupData[{
Cell[406479, 8698, 443, 11, 40, "Input",ExpressionUUID->"e58ece97-c9ae-45bd-a769-c41ebd23fd05"],
Cell[406925, 8711, 3001, 61, 298, "Output",ExpressionUUID->"44fd6631-1ec7-47ea-9efd-542f6c9c9b47"]
}, Open  ]],
Cell[409941, 8775, 157, 3, 45, "Text",ExpressionUUID->"b9590e8c-e45a-47b1-b826-8b5e4c317cc6"],
Cell[CellGroupData[{
Cell[410123, 8782, 503, 14, 40, "Input",ExpressionUUID->"97e6e35d-73e6-43cd-abf5-05edab8fb5c5"],
Cell[410629, 8798, 672, 12, 74, "Output",ExpressionUUID->"98bb8c83-82d1-44e9-ae7d-f30731b5b147"]
}, Open  ]],
Cell[411316, 8813, 233, 6, 45, "Text",ExpressionUUID->"f94ca52c-5c69-4bb5-93e5-66b17c838807"],
Cell[411552, 8821, 574, 15, 40, "Input",ExpressionUUID->"12388c65-1080-49ca-b51e-73d82c7b7d96"],
Cell[CellGroupData[{
Cell[412151, 8840, 234, 5, 40, "Input",ExpressionUUID->"ce66fd09-6822-4a0d-ab08-f3a8720c5ed9"],
Cell[412388, 8847, 828, 26, 45, "Output",ExpressionUUID->"368bc58a-20c6-437e-8e06-fd63adc60ab3"]
}, Open  ]],
Cell[413231, 8876, 372, 7, 75, "Text",ExpressionUUID->"cb511f37-cfc2-44d8-aa1a-bbe1322be7f4"],
Cell[CellGroupData[{
Cell[413628, 8887, 247, 5, 40, "Input",ExpressionUUID->"e7f917a6-a3aa-42ea-8445-ededa251c3df"],
Cell[413878, 8894, 228, 4, 45, "Output",ExpressionUUID->"6e942a2e-6fe4-4130-8faf-9a693feef621"]
}, Open  ]],
Cell[414121, 8901, 208, 3, 45, "Text",ExpressionUUID->"1c4ad5be-b6b9-4bce-991a-f81d6643769c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[414366, 8909, 209, 4, 60, "Subsubsection",ExpressionUUID->"9458f2f8-d686-4b62-83ed-61d52acb44ba"],
Cell[CellGroupData[{
Cell[414600, 8917, 400, 10, 40, "Input",ExpressionUUID->"fdde1f16-2657-4fc8-827e-1aa410395467"],
Cell[415003, 8929, 883, 26, 45, "Output",ExpressionUUID->"e8bf177a-4ae8-482f-8727-1c6b17c0d79d"]
}, Open  ]],
Cell[415901, 8958, 739, 19, 125, "Input",ExpressionUUID->"ed26b493-ad59-45de-b3e1-4e8e63de07ae"],
Cell[416643, 8979, 159, 3, 45, "Text",ExpressionUUID->"6db6380a-38eb-43a1-8c0a-f7a41d13e6c5"],
Cell[CellGroupData[{
Cell[416827, 8986, 382, 9, 40, "Input",ExpressionUUID->"c549651b-94a7-4dc2-96d4-061150431eea"],
Cell[417212, 8997, 243, 4, 45, "Output",ExpressionUUID->"cf5a8719-b042-4e11-b4fe-e10c754ed416"]
}, Open  ]],
Cell[CellGroupData[{
Cell[417492, 9006, 382, 9, 40, "Input",ExpressionUUID->"ba998b6c-a609-4ddf-a9a4-eb12307bb457"],
Cell[417877, 9017, 242, 4, 45, "Output",ExpressionUUID->"27433e0f-d37f-456a-adfa-b437860637d3"]
}, Open  ]],
Cell[418134, 9024, 157, 3, 45, "Text",ExpressionUUID->"5c2cf0d4-95f6-4b6f-bf39-92087e1209df"],
Cell[418294, 9029, 291, 7, 40, "Input",ExpressionUUID->"dae65a97-4c62-4c4c-8782-dce0a6d103a6"],
Cell[418588, 9038, 165, 3, 45, "Text",ExpressionUUID->"b3f8f539-5b55-4986-a909-12eabefcc6b1"],
Cell[CellGroupData[{
Cell[418778, 9045, 1138, 28, 265, "Input",ExpressionUUID->"6229a057-11d8-400c-8db5-90d161c42f23"],
Cell[419919, 9075, 1552, 37, 130, "Output",ExpressionUUID->"5b7eb0cb-43bc-45c5-a66b-7f445457984a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[421508, 9117, 191, 3, 40, "Input",ExpressionUUID->"d147ad38-9f3b-4ed1-9ce0-917015b96396"],
Cell[421702, 9122, 1174, 27, 130, "Output",ExpressionUUID->"42378596-378f-479b-8559-e7316826c842"]
}, Open  ]],
Cell[422891, 9152, 162, 3, 45, "Text",ExpressionUUID->"c40e87f3-a5d6-43ab-9706-d19a21d59e3a"],
Cell[423056, 9157, 610, 18, 40, "Input",ExpressionUUID->"db94bd98-523f-4df5-ae77-5580efffcff8"],
Cell[423669, 9177, 169, 3, 45, "Text",ExpressionUUID->"81b0d3ec-203e-4c3c-874b-f170bb22ff96"],
Cell[423841, 9182, 176, 3, 45, "Text",ExpressionUUID->"5dc9403e-6b78-4b8a-8f67-16335dd1e98e"],
Cell[CellGroupData[{
Cell[424042, 9189, 1505, 37, 321, "Input",ExpressionUUID->"738311a8-39ac-47c7-bba5-6b5ba171f00c"],
Cell[425550, 9228, 243, 5, 45, "Output",ExpressionUUID->"4fed0c55-575b-4a47-8230-698faee99dc8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[425830, 9238, 184, 3, 40, "Input",ExpressionUUID->"c813fa07-1af1-411b-922c-d270575e21a5"],
Cell[426017, 9243, 231, 4, 45, "Output",ExpressionUUID->"0e4b9b99-e713-4023-a73b-e74674c2afab"]
}, Open  ]],
Cell[CellGroupData[{
Cell[426285, 9252, 273, 6, 40, "Input",ExpressionUUID->"735c190d-d416-49d1-bf20-df7b6cb9ea1e"],
Cell[426561, 9260, 230, 4, 45, "Output",ExpressionUUID->"91fc0d01-a690-4912-90e3-3704493f7e85"]
}, Open  ]],
Cell[426806, 9267, 252, 4, 45, "Text",ExpressionUUID->"81da7a98-1907-4e7c-85c9-c616e5013c01"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

